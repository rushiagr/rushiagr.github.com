<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cheatsheet | Sense, and Simplicity]]></title>
  <link href="http://rushiagr.github.io/blog/categories/cheatsheet/atom.xml" rel="self"/>
  <link href="http://rushiagr.github.io/"/>
  <updated>2014-04-13T05:18:06+05:30</updated>
  <id>http://rushiagr.github.io/</id>
  <author>
    <name><![CDATA[Rushi Agrawal]]></name>
    <email><![CDATA[rushi.agr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open Source Puppet - Quick Start]]></title>
    <link href="http://rushiagr.github.io/blog/2014/04/12/open-source-puppet-quick-start/"/>
    <updated>2014-04-12T20:18:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2014/04/12/open-source-puppet-quick-start</id>
    <content type="html"><![CDATA[<p>This post aims to be your quickest guide to get started with Puppet. We'll be using the open source version of Puppet. An hour of spare time and two Ubuntu machines (physical or virtual doesn't matter) is all that is needed.</p>

<h2>Quick Introduction</h2>

<p>Lets say you want to install and run apache server on one of the machines in your lab. On another, you want to create a new user. On a third machine, you want to install MySQL, and allow access to this machine only from the first server. Seems like a lot of manual work isn't it? The power of Puppet is, you can specify all these tasks in a file, called 'Puppet manifest', and then execute it. Everything will be set up for you just as you wanted! Now what makes this 'I care about the end result, not the process' approach really powerful is you can 'apply' this manifest over and over again to get the same end result. You can easily modify this manifest file, extend it, and manage it under version control, just like you would with a piece of software. Welcome to the world of IT automation :)</p>

<p>Although the syntax of a Puppet manifest is Ruby-ish, no knowledge of Ruby is required at all (I don't know Ruby).</p>

<p>There is a whole lot of things you can do with Puppet. Here, we'll just get us started with it. Once you are through this post, you can head over to Puppet Labs' documents and tutorials, for more on "how"s and "why"s of Puppet.</p>

<h2>Setup</h2>

<p>You just require two Ubuntu machines connected to each other. One will be the Puppet 'master' node (the machine which will take care of managing the configuration and state of all the machines in our deployment), the other one 'slave' (which unfortunately is the only actual machine in demo deployment :) ).</p>

<p>Here I am using two  virtual machines, but you can create one virtual machine and use your host machine as the other one. The hostnames of the master and slave in my setup are <code>puppet-master</code> and <code>puppet-agent</code>.</p>

<p>Make sure both the machines are ping-able from each other -- by their IP as well as hostnames (e.g. <code>ping 123.123.123.123</code> and <code>ping puppet-master</code>). Make sure your /etc/hosts file looks something like this to achieve that:</p>

<p>(<code>192.168.56.130</code> and <code>192.168.56.131</code> are the IP addresses of externally-visible interfaces of hosts <code>puppet-master</code> and <code>puppet-agent</code> respectively)</p>

<p>Master:</p>

<pre><code>r@puppet-master:~$ cat /etc/hosts
127.0.0.1   localhost
127.0.1.1   puppet-master

192.168.56.131  puppet-agent
</code></pre>

<p>Slave:</p>

<pre><code>r@puppet-agent:~$ cat /etc/hosts
127.0.0.1   localhost
127.0.1.1   puppet-agent

192.168.56.130  puppet-master
</code></pre>

<h2>Getting the hands dirty -- Puppet CLI</h2>

<p>Install <code>puppetmaster</code> package on the master node</p>

<pre><code>sudo apt-get install puppetmaster
</code></pre>

<p>List all the users on the current system:</p>

<pre><code>puppet resource user --list
</code></pre>

<p>So basically a 'user' is a 'resource' in Puppet terminology. Now only list a specific resource. <code>r</code> is the current user in my case.</p>

<pre><code>r@puppet-master:~$ puppet resource user r
user { 'r':
  ensure  =&gt; 'present',
  comment =&gt; 'r,,,',
  gid     =&gt; '1000',
  groups  =&gt; ['adm', 'cdrom', 'sudo', 'dip', 'plugdev', 'lpadmin', 'sambashare'],
  home    =&gt; '/home/r',
  shell   =&gt; '/bin/bash',
  uid     =&gt; '1000',
}
</code></pre>

<p>Notice the syntax. Resource 'r' is of type 'user', with 'ensure', 'comment', etc as keys/attributes, and 'present', 'r,,,' as values for those attributes.</p>

<p>You can change the value using the Puppet CLI</p>

<pre><code>r@puppet-master:~$ sudo puppet resource user r comment='some text missing'
notice: /User[r]/comment: comment changed 'r,,,' to 'some text missing'
user { 'r':
  ensure  =&gt; 'present',
  comment =&gt; 'some text missing',
}
</code></pre>

<p>Create a new user with specified key-value pairs</p>

<pre><code>r@puppet-master:~$ sudo puppet resource user katie ensure=present shell=/bin/bash
notice: /User[katie]/ensure: created
user { 'katie':
  ensure =&gt; 'present',
  shell  =&gt; '/bin/bash',
}
r@puppet-master:~$ sudo puppet resource user katie 
user { 'katie':
  ensure           =&gt; 'present',
  gid              =&gt; '1001',
  home             =&gt; '/home/katie',
  password         =&gt; '!',
  password_max_age =&gt; '99999',
  password_min_age =&gt; '0',
  shell            =&gt; '/bin/bash',
  uid              =&gt; '1001',
}
</code></pre>

<p>Remove the newly created user, but this time, let's put this information into a file <code>katie_remove.pp</code> and ask Puppet to 'apply' this file and thus removing the user 'katie'.</p>

<pre><code>r@puppet-master:~$ cat katie_remove.pp 
user {'katie':
    ensure =&gt; absent,
}
</code></pre>

<p>Apply this Puppet manifest</p>

<pre><code>r@puppet-master:~$ sudo puppet apply katie_absent.pp 
warning: Could not retrieve fact fqdn
notice: /Stage[main]//User[katie]/ensure: removed
notice: Finished catalog run in 0.47 seconds
</code></pre>

<p>Puppet's description of user 'katie':</p>

<pre><code>r@puppet-master:~$ sudo puppet resource user katie
  user { 'katie':
  ensure =&gt; 'absent',
}
</code></pre>

<p>is now same as that of a non-existent user.</p>

<pre><code>r@puppet-master:~$ sudo puppet resource user absent-user
  user { 'absent-user':
  ensure =&gt; 'absent',
}
</code></pre>

<p>That is, the user 'katie' is now deleted. You can see that the 'ensure' attribute can be used to make sure a user (or in general, any 'resource', is present, or absent).</p>

<p><strong>Note</strong>: Ignore the warning which is printed while applying a manifest from a file. Or if you are bothered by it popping up all the time, in the <code>/etc/hosts</code> file, change</p>

<pre><code>127.0.1.1   puppet-master
</code></pre>

<p>to</p>

<pre><code>127.0.1.1   puppet-master.rushiagr.com puppet-master
</code></pre>

<p>where you can choose a domain name of your own choice in place of <code>.rushiagr.com</code>.</p>

<h2>Puppet modules</h2>

<p><strong>Note:</strong> <code>puppet module</code> doesn't work on Precise (Ubuntu 12.04). You need to install ruby, and gems, etc. Too much of a hassle. So I'll just post commands here which work for a higher version of Ubuntu.</p>

<p>Install standard library:</p>

<pre><code>sudo puppet module install puppetlabs/stdlib
</code></pre>

<p>View all the installed modules</p>

<pre><code>r@puppet-master:~$ sudo puppet module list
/etc/puppet/modules
├── puppetlabs-mysql (v2.2.1)
├── puppetlabs-ntp (v3.0.2)
└── puppetlabs-stdlib (v4.1.0)
/usr/share/puppet/modules (no modules installed)
</code></pre>

<p>All the modules, and all other information in the system goes in <code>/etc/puppet</code> directory.</p>

<p><strong>Note</strong>: Modules installed via <code>sudo</code> will be visible when you perform <code>puppet module list</code> with <code>sudo</code> only. Same for non-<code>sudo</code> use.</p>

<h2>Puppet in master-client configuration</h2>

<p>Everything we did so far concerned with a single machine. Let's now introduce another machine -- Puppet agent.</p>

<p>Note that you need to set FQDNs for both the machines. See the step above, where we suppressed a warning.</p>

<p>First, we'll need to install <code>puppet</code> package (the agent) on the agent node.</p>

<pre><code>sudo apt-get install puppet
</code></pre>

<p>By default, the Puppet agent service will not be running.</p>

<pre><code>r@puppet-agent:~$ sudo service puppet status
 * agent is not running
</code></pre>

<p>Before starting it, change <code>START=no</code> to <code>START=yes</code> in <code>/etc/default/puppet</code> file, to start the agent service by default when the system starts/reboots.</p>

<pre><code>sudo sed -i s/START=no/START=yes/g /etc/default/puppet 
</code></pre>

<p>And add these two lines at the end of <code>/etc/puppet/puppet.conf</code> to allow the agent to discover the master by its FQDN.</p>

<pre><code>[agent]
server = puppet-master
</code></pre>

<p>Now start the Puppet agent service</p>

<pre><code>r@puppet-agent:~$ sudo service puppet start
 * Starting puppet agent                                                       [ OK ] 
</code></pre>

<p>I also make sure that clocks of both the machines are synchronized by running <code>ntpdate</code> on both master and slave. I am not sure if this is required, but doesn't do any harm.</p>

<pre><code>sudo ntpdate pool.ntp.org
</code></pre>

<p>Now the master needs to sign the certs by agent.</p>

<p>Execute this command on agent node.</p>

<pre><code>sudo puppet agent --test --waitforcert 60
</code></pre>

<p>Now hop over to the master node, and retrieve the list of certs waiting to be signed</p>

<pre><code>r@puppet-master:~$ sudo puppet cert --list
  "puppet-agent.rushiagr.com" (EB:0F:E4:14:6F:B2:7E:85:7E:21:26:C4:78:80:58:E1)
</code></pre>

<p>Sign the cert</p>

<pre><code>r@puppet-master:~$ sudo puppet cert sign puppet-agent.rushiagr.com
notice: Signed certificate request for puppet-agent.rushiagr.com
notice: Removing file Puppet::SSL::CertificateRequest puppet-agent.rushiagr.com at '/var/lib/puppet/ssl/ca/requests/puppet-agent.rushiagr.com.pem'
</code></pre>

<p>Now we are ready to go. Let's create a file ('Puppet manifest') on master where we write that: 1. We want apache package to be installed. 2. Once we ensure that the package is installed, we want to start the apache service. We'll name the file <code>site.pp</code>, which is the 'main' configuration file for Puppet. We'll put it into <code>/etc/puppet/manifests</code> directory. Note how we can specify a dependency between resources.</p>

<pre><code>package { 'apache2':
    ensure =&gt; installed
}

service { 'apache2':
    ensure =&gt; true,
    enable =&gt; true,
    require =&gt; Package['apache2']
}       
</code></pre>

<p>Puppet works on 'push' model, meaning configurations are pulled by agents at periodic intervals. I think the default periodic interval is 30 minutes. Alternatively, you can pull from agent at your own will, any time. Let's do that now. Execute this command on the agent:</p>

<pre><code>r@puppet-agent:~$ sudo puppet agent --test
info: Caching catalog for puppet-agent.rushiagr.com
info: Applying configuration version '1397343482'
notice: /Stage[main]//Package[apache2]/ensure: ensure changed 'purged' to 'present'
notice: Finished catalog run in 6.30 seconds
</code></pre>

<p>And you can see the apache server running!</p>

<pre><code>r@puppet-agent:~$ sudo service apache2 status
Apache2 is running (pid 5874).
</code></pre>

<p>Ta! Da!</p>

<p>Please comment if you have any ideas to make this post easier for the newbies to understand.</p>

<p>Cheers!</p>

<p><strong>Notes:</strong></p>

<p>This is just a quick start guide. There are excellent resources and docs at <a href="http://puppetlabs.com">puppetlabs.com</a>. I have their beginner's <a href="https://dl.dropboxusercontent.com/u/42084476/OpenStack/learningpuppet.pdf">PDF</a> saved in my DropBox.
Around 80 pages long, it covers almost every aspect of basic Puppet. The only problem with this guide is it is (I think deliberately) made to work only with the Enterprise Puppet version, but you can always refer back to this post to know how to set the open source version :)</p>

<p>If you mess up the cert signing process, here is a quick and dirty way to get it resolved. On master:</p>

<pre><code>sudo puppet cert clean puppet-agent.rushiagr.com
</code></pre>

<p>On both master and slave:</p>

<pre><code>sudo rm -r /var/lib/puppet/ssl 
sudo service puppet restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Cheat Sheet]]></title>
    <link href="http://rushiagr.github.io/blog/2014/03/31/mysql-cheat-sheet/"/>
    <updated>2014-03-31T18:49:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2014/03/31/mysql-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Databases are so important, yet almost all the time I need to work with it, I find that I have already forgotten all the syntax! So here I am writing down a quick cheat sheet to get me up and running when I'm waking up from slumber. I hope this will help atleast one other guy on this planet.</p>

<!-- more -->


<p>I use mostly Ubuntu, so some of the commands might be Ubuntu specific.</p>

<p>Install mysql</p>

<pre><code>sudo apt-get install mysql-server
</code></pre>

<p>A prompt will ask for the root password.</p>

<p>To change the root password:</p>

<pre><code>UPDATE mysql.user SET password=PASSWORD('nova') WHERE user='root';
</code></pre>

<p>NOTE: MySQL keywords are case insensitive. They're represented in capital here just so that they appear different than the rest. When you're just testing out some things logging into the DB console, people generally prefer writing in small caps.</p>

<p>Note that <code>PASSWORD</code> is a function, and unlike other MySQL keywords cannot be used in small caps.</p>

<p>Log into MySQL console with user <code>root</code> and password <code>mysecretpassword</code>:</p>

<pre><code>mysql -uroot -pmysecretpassword
</code></pre>

<p>or</p>

<pre><code>mysql -u'root' -p'mysecretpassword'
</code></pre>

<p>or entering the password in 'secret' mode:</p>

<pre><code>$ mysql -uroot -p
Enter password: 
</code></pre>

<h3>MySQL console</h3>

<p>List all databases:</p>

<pre><code>mysql&gt; SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.01 sec)
</code></pre>

<p>Create a new database <code>rushi</code>:</p>

<pre><code>mysql&gt; CREATE DATABASE rushi;
Query OK, 1 row affected (0.00 sec)

mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| rushi              |
| test               |
+--------------------+
5 rows in set (0.00 sec)
</code></pre>

<p>Select database <code>rushi</code>, so that all the further operations are executed inside this database:</p>

<pre><code>mysql&gt; USE rushi;
Database changed
</code></pre>

<p>Create a table <code>friends</code> inside <code>rushi</code> database:</p>

<pre><code>mysql&gt; CREATE TABLE friends (name VARCHAR(20), age INT);
Query OK, 0 rows affected (0.03 sec)
</code></pre>

<p>If you didn't select the database in the last to last command, you need to specify table in this format:<code>&lt;database&gt;.&lt;tablename&gt;</code>. So the last command would look like:</p>

<pre><code>mysql&gt; CREATE TABLE rushi.friends (name VARCHAR(20), age INT);
</code></pre>

<p>List all the tables:</p>

<pre><code>mysql&gt; show tables;
+-----------------+
| Tables_in_rushi |
+-----------------+
| friends         |
+-----------------+
1 rows in set (0.00 sec)
</code></pre>

<p>Insert data into <code>friends</code>:</p>

<pre><code>mysql&gt; INSERT INTO friends VALUES ('arvind', 24);
Query OK, 1 row affected (0.01 sec)
</code></pre>

<p>Display all the data from the table:</p>

<pre><code>mysql&gt; SELECT * FROM friends;
+--------+------+
| name   | age  |
+--------+------+
| arvind |   24 |
+--------+------+
1 row in set (0.00 sec)
</code></pre>

<p>Insert another friend:</p>

<pre><code>mysql&gt; INSERT INTO friends VALUES ('honshu', 23);
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT * FROM friends;
+--------+------+
| name   | age  |
+--------+------+
| arvind |   24 |
| honshu |   23 |
+--------+------+
2 rows in set (0.00 sec)
</code></pre>

<p>Update a row in the table:</p>

<pre><code>mysql&gt; UPDATE friends SET age=22 WHERE name='honshu';
Query OK, 1 row affected (0.02 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT * FROM friends;
+--------+------+
| name   | age  |
+--------+------+
| arvind |   24 |
| honshu |   22 |
+--------+------+
2 rows in set (0.00 sec)
</code></pre>

<p>Delete a row from table:</p>

<pre><code>mysql&gt; DELETE FROM friends WHERE age=24;
Query OK, 1 row affected (0.00 sec)

mysql&gt; select * from friends;
+--------+------+
| name   | age  |
+--------+------+
| honshu |   22 |
+--------+------+
1 row in set (0.00 sec)
</code></pre>

<p>Delete all rows from the table in one go, and reset the autoincrement if any:</p>

<pre><code>mysql&gt; TRUNCATE friends;
Query OK, 0 rows affected (0.04 sec)
</code></pre>

<p>Delete the table and all of its contents:</p>

<pre><code>mysql&gt; DROP TABLE friends;
</code></pre>

<p>Other commonly used commands are listed below. Try to try all of them out atleast once.
Count the number of rows in a table:</p>

<pre><code>SELECT COUNT(*) FROM friends;
</code></pre>

<p>Select distinct values for a row, and order them too:</p>

<pre><code>SELECT DISTINCT age FROM friends ORDER BY age;
</code></pre>

<p>Modify table to add one more column to it:</p>

<pre><code>ALTER TABLE friend ADD height varchar(10);
</code></pre>

<p>Use regular expressions:</p>

<pre><code>SELECT * FROM friend WHERE name REGEXP 'arv*';
</code></pre>

<p>CAUTION: Regular expressions comes with some binary/encoding trickery. Use it with a lot of caution.</p>

<p>Create a new user for the database, and give it all the root privileges</p>

<pre><code>CREATE USER 'rushiagr'@'localhost' IDENTIFIED BY 'mysecretpass'
GRANT ALL PRIVILEGES ON * . * TO 'rushiagr'@'localhost'
</code></pre>

<p>Take a dump of database <code>rushi</code> and store it in a file <code>db.dump</code>. Execute this command in bash shell, and not in the MySQL shell.:</p>

<pre><code>mysqldump --user root rushi &gt; db.dump
</code></pre>

<p>The End!</p>

<p>Comments/suggestions/feedback? Please feel free to comment and I'll make sure I acknowledge them to the fullest.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git(hub) Cheat Sheet]]></title>
    <link href="http://rushiagr.github.io/blog/2013/03/19/github-cheat-sheet/"/>
    <updated>2013-03-19T04:22:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2013/03/19/github-cheat-sheet</id>
    <content type="html"><![CDATA[<p>I am posting my github cheat sheet here. I started writing it as soon as I started
learning Github and Git. So, some of the content here can appear quite naive.
I will try to keep this blog post as updated as I can, and if you find any
suggestion, please comment!</p>

<p>This post is just for a reference of commands. This post will be a bad way to learn
how git works. A basic understanding of git is assumed.</p>

<!--more-->


<h2>Initial configuration</h2>

<p>Configure user details only for the first time</p>

<pre><code>git config --global user.name "Rushi Agrawal"
git config --global user.email "rushi.agr@gmail.com"
</code></pre>

<p>To check your git configuration</p>

<pre><code>git config --list
</code></pre>

<h2>Branches</h2>

<p>List all branches in the local repo</p>

<pre><code>git branch
</code></pre>

<p>List all branches including remote-tracking branches</p>

<pre><code>git branch -r
</code></pre>

<p>List all branches (including the ones at remote)</p>

<pre><code>git branch -a
</code></pre>

<p>Creating your own branch <code>my_branch</code>, with content same as your current branch</p>

<pre><code>git branch my_branch
</code></pre>

<p>Switch to the newly created branch</p>

<pre><code>git checkout my_branch
</code></pre>

<p>Execute the above two commands in one line:</p>

<pre><code>git checkout -b my_branch
</code></pre>

<p>to pull a branch <code>only_remote</code> which exists at github (at remote <code>rushiagr</code> but not in local repo. (More about <code>git remote update</code> later)</p>

<pre><code>git remote update
git checkout -b only_remote rushiagr/only_remote
</code></pre>

<h2>Remotes</h2>

<p>Create a new remote <code>rushiagr</code> which will track <code>cinder</code> repository by user <code>rushiagr</code></p>

<pre><code>git remote add rushiagr https://github.com/rushiagr/cinder.git
</code></pre>

<p>If this is your personal repo, you can append the username in the remote as shown. After that, every time you push to the origin,
github will not ask for your username but only password.</p>

<pre><code>git remote add rushiagr https://rushiagr@github.com/rushiagr/cinder.git
</code></pre>

<p>Delete the remote <code>rushiagr</code></p>

<pre><code>git remote rm rushiagr
</code></pre>

<p>List all the remotes</p>

<pre><code>git remote
</code></pre>

<p>The above command only shows the names of remotes. To also check the links to the remotes:</p>

<pre><code>git remote -v
</code></pre>

<p>Now this is very important command.</p>

<pre><code>git remote update
</code></pre>

<p>This will contact the git server, and will update the local repository with ALL the content at ALL those remotes. The interesting part is, nothing will actually change. That is, no more new branches (which got created at the server after you last pulled from the server) were created, and the existing branches are also not updated. BUT, all the content goes into the magic <code>.git</code> directory. After you've run this command, when you create a branch only existing at remote, the local git repo will not contact the server but will fetch all the contents from within the repository.</p>

<p>To take a new branch from remote, and create a new branch having contents of that remote branch. (You might need to run 'git remote update')</p>

<pre><code>git checkout -b stable/folsom origin/stable/folsom
</code></pre>

<h2>Push</h2>

<p>Pushing this newly created branch to remote <code>rushiagr</code></p>

<pre><code>git push rushiagr my_branch
</code></pre>

<p>If you want to push the local branch <code>my_branch</code> with a different name to
remote, say <code>my_remote_branch</code>:</p>

<pre><code>git push rushiagr my_branch:my_remote_branch
</code></pre>

<p>To create an association with the remote (only first time):</p>

<pre><code>git push -u origin my_branch
</code></pre>

<p>or</p>

<pre><code>git push --set-upstream origin my_branch
</code></pre>

<h2>Pull</h2>

<p>Git pull is nothing more than a macro that does git fetch and git merge, in
that order. The common syntax to pull from branch <code>remote_branch</code> located at remote <code>remote_name</code> to the current active branch in the local repo:</p>

<pre><code>git pull remote_name remote_branch
</code></pre>

<h2>Oops! I didn't intend to do that!</h2>

<h4>To undo last commit.</h4>

<p>This will just undo the commit, but will keep changes, so that you can modify the files and commit again</p>

<pre><code>git reset --soft HEAD^
</code></pre>

<h4>To not keep the uncommitted changes.</h4>

<p>This command will wipe off all the changes which are not committed. Very useful when you made some changes but dont want to commit it. All the more useful when you <code>pull</code>ed something but everything became a mess (possibly due to a merge conflict, or pulling to/from a different branch!)</p>

<pre><code>git reset --hard
</code></pre>

<h4>To delete a branch <code>timepass_testing</code> from github server</h4>

<pre><code>git push rushiagr --delete timepass_testing
</code></pre>

<p>(NOT <code>git push rushiagr --delete rushiagr/timepass_testing</code>)</p>

<h4>Change author of the last commit</h4>

<pre><code>git commit --amend --author="Rushi Agrawal &lt;rushi.agr@gmail.com&gt;"
</code></pre>

<p>You committed some changes, but then you realised you wanted to add this one line to the commit. In such a case
just add that one line, and run this command to have this last change incorporated into that previous commit. This command also gives you an option to
change the commit message.</p>

<pre><code>git commit -a --amend
</code></pre>

<h2>Show me the money</h2>

<p>To see the patch of the last commit without undoing the last commit</p>

<pre><code>git show
</code></pre>

<p>To see the changes introduced by any earlier commit with commit id <code>c5bb6d821e10ca8f114fa0b3b0149bc8b7257a92</code></p>

<pre><code>git show c5bb6d821e10ca8f114fa0b3b0149bc8b7257a92
</code></pre>

<p>To see the latest changes you made -- the changes which have not been staged to be committed</p>

<pre><code>git diff
</code></pre>

<p>You can redirect the output from the above three commands to a file, to create corresponding patch file.</p>

<h2>Patching in git</h2>

<p>Check the status of patch. How many lines changed, etc</p>

<pre><code>git apply --stat patchfile
</code></pre>

<p>Check if the patch can be applied.
If no output or no error, patch can be applied safely</p>

<pre><code>git apply --check patchfile
</code></pre>

<p>Apply patch with signing-off (better way)</p>

<pre><code>git am --signoff &lt; patchfile
</code></pre>

<p>Normal way of applying patch</p>

<pre><code>git apply patchfile
</code></pre>

<h2>Miscellaneous</h2>

<p>To pull only specific files from another branch: (here, assuming that we have two branches, 'test', and 'master', and currently we are on 'master' branch. If you want to pull ##only 'testfile.py' file from 'test' branch to 'master' branch, do this:)</p>

<pre><code>git checkout test testfile.py1
</code></pre>

<p>If your master changed while you were working on your topic_branch, and if you want to merge the master's changes, and also get an option to squash the changes you made on topic_branch:</p>

<pre><code>git checkout master
git pull origin master
git checkout topic_branch
git rebase -i master
</code></pre>

<p><a href="http://christoph.ruegg.name/blog/2010/5/5/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html}%0A(you%20can%20use%20git%20revert,%20but%20don%E2%80%99t%20know%20how%20exactly%20it%20works">Undo last commit at the remote repo</a></p>

<p>Clone a specific branch git repository from github</p>

<pre><code>git clone -b stable/essex https://github.com/openstack-dev/devstack.git
</code></pre>

<p><a href="https://makandracards.com/makandra/527-squash-several-git-commits-into-a-single-commit">Squash several commits into one single commit</a></p>

<p>Checkout a previous commit with SHA commit id cff2580ad7bc16934b72dd9be7463eb090b31d55 from the current branch to a new branch 'neew'</p>

<pre><code>git checkout -b neew cff2580ad7bc16934b72dd9be7463eb090b31d55
</code></pre>
]]></content>
  </entry>
  
</feed>
