<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cloud | Sense, and Simplicity]]></title>
  <link href="http://rushiagr.github.io/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://rushiagr.github.io/"/>
  <updated>2014-04-11T21:17:10+05:30</updated>
  <id>http://rushiagr.github.io/</id>
  <author>
    <name><![CDATA[Rushi Agrawal]]></name>
    <email><![CDATA[rushi.agr@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenStack in an hour with DevStack]]></title>
    <link href="http://rushiagr.github.io/blog/2014/04/03/openstack-in-an-hour-with-devstack/"/>
    <updated>2014-04-03T22:01:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2014/04/03/openstack-in-an-hour-with-devstack</id>
    <content type="html"><![CDATA[<p>So you found out a cool new technology "OpenStack" and want to try it real quick? Or probably you are hired in a company for your Python skills and now you are supposed to work on OpenStack in the shortest possible time? Fear not, it is not that hard to get started. <a href="http://devstack.org">DevStack</a> is your friend-in-need. No, don't click that hyperlink just yet :)</p>

<!--more-->


<p>To put it in a sentence, DevStack is "OpenStack in a box". You just need a popular Linux based distribution with 2GB RAM and you're all set to start. DevStack is basically a set of scripts which will install all the important OpenStack services in your computer. For this, it will first download all the essential packages, pull in the OpenStack code from various OpenStack projects, and set everything up for you to try out all of it.</p>

<p>NOTE: DO NOT set up DevStack for production clouds.</p>

<p>Here, in this tutorial, I'll be setting up DevStack in a 64-bit Ubuntu 12.04 virtual machine. All your virtual machine needs to have is an Internet connection, and 2GB RAM.</p>

<p>NOTE: Do not run any of the script as a root user, unless specified otherwise explicitly.</p>

<h3>Getting started</h3>

<p>Install git</p>

<pre><code>sudo apt-get install git
</code></pre>

<p>Clone the DevStack repository into your computer and <code>cd</code> into it. This is the code which will set up the cloud for you.</p>

<pre><code>git clone http://github.com/openstack-dev/devstack
cd devstack/
</code></pre>

<p>If you do a <code>ls</code>, you will see <code>stack.sh</code>, <code>unstack.sh</code> and <code>rejoin-stack.sh</code> files in there. These are the most important files.</p>

<pre><code>r@ra:~/devstack$ ls
accrc         exercises         HACKING.rst  rejoin-stack.sh  tests
AUTHORS       exercise.sh       lib          run_tests.sh     tools
clean.sh      extras.d          LICENSE      samples          unstack.sh
driver_certs  files             localrc      stackrc
eucarc        functions         openrc       stack-screenrc
exerciserc    functions-common  README.md    stack.sh
</code></pre>

<p>File <code>stack.sh</code> is the most important of them all. Running this script will:
1. Pull OpenStack code from all of it's important projects' repositories and put them in <code>/opt/stack</code> directory. TODO: say that this directory is configurable.
2. Installs all the dependencies these OpenStack projects have -- both in the form of Ubuntu packages, and also the Python "PIP" repositories.
3. Starts all the OpenStack services with a default configuration.</p>

<p>Bringing down the DevStack-created cloud is easy too -- just invoke the <code>unstack.sh</code> script, and all the services are down again, freeing up the memory that these services consume. I'll talk about <code>rejoin-stack.sh</code> in some time. Let's get started before I start writing at lengths again :)</p>

<p>Execute the <code>stack.sh</code> script</p>

<pre><code>r@ra:~/devstack$ ./stack.sh 

################################################################################
ENTER A PASSWORD TO USE FOR THE DATABASE.
################################################################################
This value will be written to your localrc file so you don't have to enter it 
again.  Use only alphanumeric characters.
If you leave this blank, a random default value will be used.
Enter a password now:
</code></pre>

<p>You need to add the MySQL database password here. Don't worry if you have not installed MySQL on this system. Just provide a password here and this script will install MySQL and use this password there.</p>

<p>As you can see, MySQL is where all the important data is stored by different OpenStack components. You can peep into the database later if you want to see what data is stored, etc.</p>

<p>Also, note the first line after the heading. If the <code>stack.sh</code> script finishes successfully, all the inputs you specify (this, and four more after this) will be written to a file named as <code>localrc</code>. All the local configuration setting pertaining to the DevStack environment will go in this file. I'll provide you with details of all of them very soon. Have patience :)</p>

<p>For the other four prompts, enter 'nova'. Just use 'nova' for this MySQL prompt too if it is not installed yet.</p>

<p>You will see that the script now starts spewing a lot of output on our screen. It is downloading all the required code, packages, dependencies, etc, and setting everything up for us -- databases, services, network, configurations, message queues. Pretty much everything. For the first time, the script might take about 30-minutes, but it again depends upon the speed of your Internet connection, and the processing speed of your virtual machine. From the next time, it can provide you with a cloud in less than 10 minutes!</p>

<p>If the script ends with something like this:</p>

<pre><code>+ merge_config_group /home/r/devstack/local.conf post-extra
+ local localfile=/home/r/devstack/local.conf
+ shift
+ local matchgroups=post-extra
+ [[ -r /home/r/devstack/local.conf ]]
+ return 0
+ [[ -x /home/r/devstack/local.sh ]]
+ service_check
+ local service
+ local failures
+ SCREEN_NAME=stack
+ SERVICE_DIR=/opt/stack/status
+ [[ ! -d /opt/stack/status/stack ]]
++ ls '/opt/stack/status/stack/*.failure'
++ /bin/true
+ failures=
+ '[' -n '' ']'
+ set +o xtrace



Horizon is now available at http://10.0.2.15/
Keystone is serving at http://10.0.2.15:5000/v2.0/
Examples on using novaclient command line is in exercise.sh
The default users are: admin and demo
The password: nova
This is your host ip: 10.0.2.15
stack.sh completed in 269 seconds.
</code></pre>

<p>That means your machine is now home to a Cloud! :)</p>

<p>Here, <code>10.0.2.15</code> is the IP of my first network interface. Don't worry about that for now.</p>

<p>So now you can head over to my blog <a href="http://www.rushiagr.com/blog/2013/05/27/cinder-on-devstack-quick-start/">Cinder on DevStack - Quick Start</a> to get started with creating volumes (persistent storage in cloud) with Cinder -- OpenStack's block-storage project. In that guide, you will also be creating a virtual machine, so it will be a good start to OpenStack. But let's get back in our current scope.</p>

<p>You can type the host IP provided by the script into your browser, to access the dashboard 'Horizon'. Log into it using username 'admin', or 'demo' and password 'nova'. (For simplicity's sake, lets just assume there are two users who are allowed to access this cloud -- one has all the administrative privilages, and the other one is just a normal user).</p>

<p>You can view all the process logs inside screen, by typing:</p>

<pre><code>screen -x
</code></pre>

<p>Head over to <a href="http://www.rushiagr.com/blog/2013/06/05/linux-screens-in-devstack/">Linux Screens in DevStack</a> for more information on how to work with <code>screen</code>.</p>

<h3>Housekeeping and customizations</h3>

<p>In your life as an OpenStack developer, you will be setting up and destroying DevStack instance quite a number of times. So it is good to know how to do that in the most efficient manner.</p>

<p>Just like <code>stack.sh</code> script is used to set up DevStack, <code>unstack.sh</code> is used to destroy the DevStack setup. Running it will kill all the services, BUT it will not delete any of the code. If you want to bring down all the services manually, just do a:</p>

<pre><code>sudo killall screen
</code></pre>

<p>Note that this will just kill all the process which were running, for which you were able to see the logs inside screen. <code>unstack.sh</code> does some cleanups as well along with killing processes.</p>

<p>If you had previously run <code>./stack.sh</code>, but have brought down the environment, you can bring it up back by executing the <code>rejoin_stack.sh</code> script.</p>

<p>NOTE: DevStack environment doesn't persist across reboots!</p>

<p>So you need to bring back up the DevStack environment manually everytime you reboot. Here is where using a virtual machine comes handy. You can take a snapshot of the virtual machine, and then go back to it when you want a clean DevStack environment.</p>

<p>Nonetheless, the best way to reboot is: first execute <code>unstack.sh</code> to bring down the current running DevStack instance. Then reboot, and when your machine comes up again, run <code>rejoin_stack.sh</code>. If you don't run <code>unstack.sh</code>, you will need to execute <code>stack.sh</code> again to have the environment up.</p>

<h3>localrc configurations</h3>

<p><code>localrc</code> is the file where all the local configurations (local = your local machine) are kept.</p>

<p>After first successful <code>stack.sh</code> run, will see that a localrc file gets created with the configuration values you specified while running that script.</p>

<pre><code>$ cat localrc 
DATABASE_PASSWORD=nova
RABBIT_PASSWORD=nova
SERVICE_TOKEN=nova
SERVICE_PASSWORD=nova
ADMIN_PASSWORD=nova
</code></pre>

<p>Sometimes you will forget to unstack, and will reboot the machine. And then you will find that running <code>stack.sh</code> will again do an <code>apt-get update</code>, and check for all packages, etc.</p>

<p>If you specify an option <code>OFFLINE=True</code> in a file named <code>localrc</code>, inside the devstack directory, and if after specifying this you run <code>stack.sh</code>, it will not check anything over the Internet, and will set up DevStack using all the packages and code residing in your machine. Setting up a DevStack using this config option will give you a running cloud in the shortest amount of time (after <code>rejoin_stack.sh</code>, but you have already forgotten to do <code>unstack.sh</code>, right :) ).</p>

<p>Note that <code>stack.sh</code> will see if the git repositories of the OpenStack projects are present in <code>/opt/stack/</code> directory. If they are, it will not fetch any latest code into them from Github. But if any of the directory (say, <code>nova</code>), is absent, it will pull latest code into the newly created <code>nova</code> directory inside <code>/opt/stack</code>.</p>

<p>What if you want to get the latest code into all the OpenStack repositories inside <code>/opt/stack</code>? Just specify a <code>RECLONE=yes</code> parameter in localrc, and rerun <code>./stack.sh</code>. This comes particularly handy when you are developing new code.</p>

<p>NOTE: Keep in mind that while developing code, you need to <strong>commit your local changes</strong> in, say, <code>/opt/stack/nova</code> repository, before you restack (re-run <code>stack.sh</code>) with <code>RECLONE=yes</code> option, as otherwise, the changes will be wiped off. Save yourself from a rude shock. You have been warned.</p>

<p>Configuration options <code>RECLONE=yes</code> and <code>OFFLINE=True</code> are complementary, and hence, use only one of them at a time in <code>localrc</code>.</p>

<p>If you have more than one interfaces, you can specify which one to use for external IP using this configuration:</p>

<pre><code>HOST_IP=192.168.xxx.xxx
</code></pre>

<h3>Developing code</h3>

<p>If you want to immediately test out your code by running it inside DevStack, you need to make the changes in the code, and restart the affected services.</p>

<p>For example, let us say you are making code changes in <code>nova</code>. Just after you are done making the changes, go to the screen, and restart all the services which start with "n-". If you are very sure that only one of the Nova service is affected, just restart that. Or if you don't know which one to restart, it is safe to restart all of them.</p>

<p>In order to restart, go to the respective screen and press <code>CTRL</code>+<code>C</code>. Then, press the up arrow once to get the last command which started this screen session, and then press <code>ENTER</code>.</p>

<h3>Final words</h3>

<p>Note that this guide just gets you started with OpenStack using DevStack. OpenStack, and cloud in general, is not about virtual machines or volumes or networks only. It is a philosophy. It is a complete paradigm shift, and as such, it is impossible to cover all of it by me. Your quest to know more about it has just started. Keep reading more and more about it and I guarantee you you will be fascinated by it's limitless possibilities.</p>

<p>This post is written keeping in mind that it will be consumed by a newbie to OpenStack development. If you are one of the one benefitting from this guide, I would love it if you can provide me with suggestions to improve this post, and any feedback you have about it.</p>

<p>Now you can go to the <a href="http://devstack.org">DevStack</a> website :)</p>

<p>Cheers!
Rushi</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing around with Cinder multi-backend]]></title>
    <link href="http://rushiagr.github.io/blog/2014/01/16/cinder-playing-with-multi-backend/"/>
    <updated>2014-01-16T22:42:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2014/01/16/cinder-playing-with-multi-backend</id>
    <content type="html"><![CDATA[<p>With Grizzly release, Cinder got equipped with another major feature -- multi-backends
with filter scheduler. So now you can have more than one storage boxes for block storage
and manage them with one Cinder deployment. Here, I'm going to test it out using our
favourite method -- trying it out on DevStack!</p>

<!--more-->


<p>DevStack can provide you with two LVM backends to play around with them. But you'll need to restack it.</p>

<p>Go to the devstack directory and pull the latest code. Destroy previous DevStack deployment if it exists.</p>

<pre><code>rushi@jio:~/devstack$ git pull origin master
rushi@jio:~/devstack$ ./unstack.sh
</code></pre>

<p>Add the config option to <code>localrc</code> which give you pre-cooked multi-backend setup with two LVM backends, both of 10G. Stack</p>

<pre><code>rushi@jio:~$ echo "CINDER_MULTI_LVM_BACKEND=True" &gt;&gt; localrc
rushi@jio:~$ ./devstack/stack.sh
</code></pre>

<p>You can see that the cinder.conf file now has two values for enabled backends:</p>

<pre><code>rushi@jio:~$ less /etc/cinder/cinder.conf | grep enabled_backends
enabled_backends = lvmdriver-1,lvmdriver-2
#enabled_backends=&lt;None&gt;
</code></pre>

<p>Also, you can see that there are two configuration groups created at the end of that config file, one each for configurations
corresponding to that particular backend</p>

<pre><code>rushi@jio:~$ tail /etc/cinder/cinder.conf 

[lvmdriver-1]
volume_backend_name = LVM_iSCSI
volume_driver = cinder.volume.drivers.lvm.LVMISCSIDriver
volume_group = stack-volumes

[lvmdriver-2]
volume_backend_name = LVM_iSCSI_2
volume_driver = cinder.volume.drivers.lvm.LVMISCSIDriver
volume_group = stack-volumes2
</code></pre>

<p>So you have two volume groups created for respective backends. Lets check it directly without using Cinder.</p>

<pre><code>rushi@jio:~$ sudo vgs
  VG             #PV #LV #SN Attr   VSize   VFree 
  stack-volumes    1   0   0 wz--n-  10.01g 10.01g
  stack-volumes2   1   0   0 wz--n-  10.01g 10.01g
  ubuntu-vg        1   2   0 wz--n- 931.27g 44.00m
</code></pre>

<p>Hmmm. Two volume groups, each of size 10G.</p>

<h3>Case 1: Spreading volumes across backends</h3>

<p>Now, lets create a volume and see where it ends up.</p>

<pre><code>rushi@jio:~$ cinder create 1
ERROR: You must provide a username via either --os-username or env[OS_USERNAME]
</code></pre>

<p>Oops! Let me try again..</p>

<pre><code>rushi@jio:~$ . devstack/openrc 
rushi@jio:~$ cinder create 1
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|    attachments    |                  []                  |
| availability_zone |                 nova                 |
|      bootable     |                false                 |
|     created_at    |      2014-01-16T17:29:49.241493      |
|    description    |                 None                 |
|         id        | ecfbfebb-73d5-4faf-b625-e69f18020378 |
|      metadata     |                  {}                  |
|        name       |                 None                 |
|        size       |                  1                   |
|    snapshot_id    |                 None                 |
|    source_volid   |                 None                 |
|       status      |               creating               |
|      user_id      |   e441f49105f343da87316ab7157e2ab7   |
|    volume_type    |                 None                 |
+-------------------+--------------------------------------+

rushi@jio:~$ cinder list
+--------------------------------------+-----------+------+------+-------------+----------+-------------+
|                  ID                  |   Status  | Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+------+------+-------------+----------+-------------+
| ecfbfebb-73d5-4faf-b625-e69f18020378 | available | None |  1   |     None    |  false   |             |
+--------------------------------------+-----------+------+------+-------------+----------+-------------+

rushi@jio:~$ sudo vgs
  VG             #PV #LV #SN Attr   VSize   VFree 
  stack-volumes    1   0   0 wz--n-  10.01g 10.01g
  stack-volumes2   1   2   0 wz--n-  10.01g  9.01g
  ubuntu-vg        1   2   0 wz--n- 931.27g 44.00m
</code></pre>

<p>So it went to backend number 2. If you are admin (<code>source devstack/openrc admin admin</code>), you can do a <code>cinder show</code> too, to get information
as to which host did this volume go to. Only the admin is allowed to view the host information.</p>

<p>The scheduler now gets reported of the capabilities which the backends have (check out the <code>c-shr</code> screen to see it). The scheduler then weighs the backend based on these capabilities and decides which of them has higher 'weight' to serve the next 'create' request. By default, the 'weigher' for scheduler is <code>CapacityWeigher</code>. That is, whichever backend has higher capacity, that backend will be chosen for the next 'create' request.</p>

<p>So in our case, when we'll do another 'create volume' it will now land on to the first backend.</p>

<pre><code>rushi@jio:~$ cinder create 1
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|    attachments    |                  []                  |
| availability_zone |                 nova                 |
|      bootable     |                false                 |
|     created_at    |      2014-01-16T17:39:23.958468      |
|    description    |                 None                 |
|         id        | aa79c608-47cc-44e3-a614-f4bddaab68e5 |
|      metadata     |                  {}                  |
|        name       |                 None                 |
|        size       |                  1                   |
|    snapshot_id    |                 None                 |
|    source_volid   |                 None                 |
|       status      |               creating               |
|      user_id      |   e441f49105f343da87316ab7157e2ab7   |
|    volume_type    |                 None                 |
+-------------------+--------------------------------------+

rushi@jio:~$ sudo vgs
  VG             #PV #LV #SN Attr   VSize   VFree 
  stack-volumes    1   0   0 wz--n-  10.01g  9.01g
  stack-volumes2   1   2   0 wz--n-  10.01g  9.01g
  ubuntu-vg        1   2   0 wz--n- 931.27g 44.00m
</code></pre>

<p>Neat!</p>

<h3>Case 2 : Stacking all volumes at one backend</h3>

<p>What if we want to keep all the volumes at only one backend? Cinder allows you to do that too!
There is a configuration option in cinder.conf, <code>capacity_weight_multiplier</code>, which allows you to multiply the 'capacity weight' by a number.
So if the multiplier is 1, a backend with higher capacity will have higher weight, and will be the choice for the next volume creation request.
This is the default case. BUT what if we set it to -1? The backend with higher available capacity will have more negative weight, which will make that backend less preferable for next 'create' request, and hence the request will go to the backend which has lesser capacity!</p>

<p>Let us see this too in action.</p>

<p>Check out the config option from cinder.conf file.</p>

<pre><code>rushi@jio:~$ cat /etc/cinder/cinder.conf | grep -B 3 ^capacity_weight_multiplier

# Multiplier used for weighing volume capacity. Negative
# numbers mean to stack vs spread. (floating point value)
# capacity_weight_multiplier=1.0
</code></pre>

<p>The config option is commented out and is there just so that you can easily change it. Now uncomment it and change it's value to -1.</p>

<p>Delete previously created volumes. Kill all the three Cinder screen processes (<code>c-api</code>, <code>c-sch</code> and <code>c-vol</code>), and restart them.</p>

<p>Lets create two volumes and see where they end up..</p>

<pre><code>rushi@jio:~$ cinder list
+----+--------+------+------+-------------+----------+-------------+
| ID | Status | Name | Size | Volume Type | Bootable | Attached to |
+----+--------+------+------+-------------+----------+-------------+
+----+--------+------+------+-------------+----------+-------------+
rushi@jio:~$ cinder create 1
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|    attachments    |                  []                  |
| availability_zone |                 nova                 |
|      bootable     |                false                 |
|     created_at    |      2014-01-16T17:56:59.845733      |
|    description    |                 None                 |
|         id        | b927b328-5ae0-411a-9de2-22ed732b4946 |
|      metadata     |                  {}                  |
|        name       |                 None                 |
|        size       |                  1                   |
|    snapshot_id    |                 None                 |
|    source_volid   |                 None                 |
|       status      |               creating               |
|      user_id      |   e441f49105f343da87316ab7157e2ab7   |
|    volume_type    |                 None                 |
+-------------------+--------------------------------------+
rushi@jio:~$ cinder create 1
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|    attachments    |                  []                  |
| availability_zone |                 nova                 |
|      bootable     |                false                 |
|     created_at    |      2014-01-16T17:57:01.132756      |
|    description    |                 None                 |
|         id        | 9f643f2d-7221-4a5c-bf48-1977c9b89fd3 |
|      metadata     |                  {}                  |
|        name       |                 None                 |
|        size       |                  1                   |
|    snapshot_id    |                 None                 |
|    source_volid   |                 None                 |
|       status      |               creating               |
|      user_id      |   e441f49105f343da87316ab7157e2ab7   |
|    volume_type    |                 None                 |
+-------------------+--------------------------------------+

rushi@jio:~$ sudo vgs
  VG             #PV #LV #SN Attr   VSize   VFree 
  stack-volumes    1   0   0 wz--n-  10.01g 10.01g
  stack-volumes2   1   2   0 wz--n-  10.01g  8.01g
  ubuntu-vg        1   2   0 wz--n- 931.27g 44.00m
</code></pre>

<p>:)</p>

<h3>Case 3 : Custom choice</h3>

<p>What if I have two different backends (maybe one is slower, or costlier, than the other), and my users want to exactly specify how many volumes they want of each 'type' of backends? Here, Cinder's 'volume types' have us covered.</p>

<p>We can associate a volume type with a backend, and then the users can create a volume of whatever 'type' they want.
Let's throw some discrimination at these backends. I'll create two volume types: 'gold' and 'bronze', and associate 'stack-volumes' with 'gold' and similarly for 'stack-volumes2'. Note that this job can only be done by the administrator.</p>

<p>Let us be admins</p>

<pre><code>rushi@jio:~$ . devstack/openrc admin admin
</code></pre>

<p>Create both the volume types and list them.</p>

<pre><code>rushi@jio:~$ cinder type-create gold
+--------------------------------------+------+
|                  ID                  | Name |
+--------------------------------------+------+
| dd883ee0-24be-42e1-ab2e-b9a01454f2f9 | gold |
+--------------------------------------+------+
rushi@jio:~$ cinder type-create bronze
+--------------------------------------+--------+
|                  ID                  |  Name  |
+--------------------------------------+--------+
| f63dd2cb-f4e7-4d6d-a84f-5bf2cc6c5671 | bronze |
+--------------------------------------+--------+

rushi@jio:~$ cinder type-list
+--------------------------------------+--------+
|                  ID                  |  Name  |
+--------------------------------------+--------+
| dd883ee0-24be-42e1-ab2e-b9a01454f2f9 |  gold  |
| f63dd2cb-f4e7-4d6d-a84f-5bf2cc6c5671 | bronze |
+--------------------------------------+--------+
</code></pre>

<p>Get the backend names (<code>volume_backend_name</code> config option) from cinder.conf file.</p>

<pre><code>rushi@jio:~$ tail /etc/cinder/cinder.conf 

[lvmdriver-1]
volume_backend_name = LVM_iSCSI
volume_driver = cinder.volume.drivers.lvm.LVMISCSIDriver
volume_group = stack-volumes

[lvmdriver-2]
volume_backend_name = LVM_iSCSI_2
volume_driver = cinder.volume.drivers.lvm.LVMISCSIDriver
volume_group = stack-volumes2
</code></pre>

<p>Now let's associate backend <code>LVM_iSCSI</code> with volume type 'gold', and similarly for the other one.</p>

<pre><code>rushi@jio:~$ cinder type-key gold set volume_backend_name=LVM_iSCSI
rushi@jio:~$ cinder type-key bronze set volume_backend_name=LVM_iSCSI_2
</code></pre>

<p>These association are stored as key-value pairs in the volume type's 'extra specs'. Let's see them</p>

<pre><code>rushi@jio:~$ cinder extra-specs-list 
+--------------------------------------+--------+------------------------------------------+
|                  ID                  |  Name  |               extra_specs                |
+--------------------------------------+--------+------------------------------------------+
| dd883ee0-24be-42e1-ab2e-b9a01454f2f9 |  gold  |  {u'volume_backend_name': u'LVM_iSCSI'}  |
| f63dd2cb-f4e7-4d6d-a84f-5bf2cc6c5671 | bronze | {u'volume_backend_name': u'LVM_iSCSI_2'} |
+--------------------------------------+--------+------------------------------------------+
</code></pre>

<p>You can add more key-value pairs for these volume types with different key names. <code>volume_backend_name</code> is a reserved key name, though.</p>

<p>Let's create two volumes of type 'gold' and see where they end up being created:</p>

<pre><code>rushi@jio:~$ cinder create --volume-type gold --name costly_vol_1 1
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|    attachments    |                  []                  |
| availability_zone |                 nova                 |
|      bootable     |                false                 |
|     created_at    |      2014-01-16T18:24:07.670635      |
|    description    |                 None                 |
|         id        | 767d4c56-6d3d-46f7-b0a3-4a00f696bcad |
|      metadata     |                  {}                  |
|        name       |             costly_vol_1             |
|        size       |                  1                   |
|    snapshot_id    |                 None                 |
|    source_volid   |                 None                 |
|       status      |               creating               |
|      user_id      |   c271eb32e71b411bb98ad7b93792d6d5   |
|    volume_type    |                 gold                 |
+-------------------+--------------------------------------+
rushi@jio:~$ cinder create --volume-type gold --name costly_vol_2 1
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|    attachments    |                  []                  |
| availability_zone |                 nova                 |
|      bootable     |                false                 |
|     created_at    |      2014-01-16T18:24:58.382180      |
|    description    |                 None                 |
|         id        | a938e556-65cf-4547-87ff-513d60f626d3 |
|      metadata     |                  {}                  |
|        name       |             costly_vol_2             |
|        size       |                  1                   |
|    snapshot_id    |                 None                 |
|    source_volid   |                 None                 |
|       status      |               creating               |
|      user_id      |   c271eb32e71b411bb98ad7b93792d6d5   |
|    volume_type    |                 gold                 |
+-------------------+--------------------------------------+
rushi@jio:~$ cinder list
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |     Name     | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+
| 767d4c56-6d3d-46f7-b0a3-4a00f696bcad | available | costly_vol_1 |  1   |     gold    |  false   |             |
| a938e556-65cf-4547-87ff-513d60f626d3 | available | costly_vol_2 |  1   |     gold    |  false   |             |
+--------------------------------------+-----------+--------------+------+-------------+----------+-------------+

rushi@jio:~$ sudo vgs
  VG             #PV #LV #SN Attr   VSize   VFree 
  stack-volumes    1   2   0 wz--n-  10.01g  8.01g
  stack-volumes2   1   0   0 wz--n-  10.01g 10.01g
  ubuntu-vg        1   2   0 wz--n- 931.27g 44.00m
</code></pre>

<p>Now create another one, but with type 'bronze' and ensure it is created on the other backend.</p>

<pre><code>rushi@jio:~$ cinder create --volume-type bronze --name cheap_vol_1 1
+-------------------+--------------------------------------+
|      Property     |                Value                 |
+-------------------+--------------------------------------+
|    attachments    |                  []                  |
| availability_zone |                 nova                 |
|      bootable     |                false                 |
|     created_at    |      2014-01-16T18:27:05.852092      |
|    description    |                 None                 |
|         id        | 97f62c7a-b974-41e8-a659-1e6d3eb876d5 |
|      metadata     |                  {}                  |
|        name       |             cheap_vol_1              |
|        size       |                  1                   |
|    snapshot_id    |                 None                 |
|    source_volid   |                 None                 |
|       status      |               creating               |
|      user_id      |   c271eb32e71b411bb98ad7b93792d6d5   |
|    volume_type    |                bronze                |
+-------------------+--------------------------------------+

rushi@jio:~$ sudo pvs
  PV         VG             Fmt  Attr PSize   PFree 
  /dev/loop0 stack-volumes  lvm2 a--   10.01g  8.01g
  /dev/loop1 stack-volumes2 lvm2 a--   10.01g  9.01g
  /dev/sda5  ubuntu-vg      lvm2 a--  931.27g 44.00m
</code></pre>

<p>Done :)</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Screens in DevStack]]></title>
    <link href="http://rushiagr.github.io/blog/2013/06/05/linux-screens-in-devstack/"/>
    <updated>2013-06-05T20:50:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2013/06/05/linux-screens-in-devstack</id>
    <content type="html"><![CDATA[<p>This blog article explains handling screens within OpenStack running as a DevStack setup. Some useful generic screen commands are also provided at the end.</p>

<!--more-->


<p>In a DevStack environment, all the processes run under something special in Linux, called as a <code>screen</code>. For now, you can think of a ‘screen’ as a terminal running inside a terminal, with the special property that when you close your current terminal, your ‘screens’ will not actually die, so that you can reconnect to them when you connect to the Linux system through another terminal again! Now that should give you a hint why people use screens :)</p>

<p>Each screen runs a special ‘service’ of OpenStack. So the logs of each service will go to the respective screen. If you created the DevStack environment as a root user, the process of going to a screen is slightly complicated: You first need to become the <code>stack</code> user if you are currently <code>root</code>, and even before that, you need to run this command in most of the cases:</p>

<p><code>
chown stack:stack `readlink /proc/self/fd/0`
</code>
Else it will produce this error <code>Cannot open your terminal '/dev/pts/2' - please check.</code> , and then you can proceed to run this command to get to the screens:</p>

<p><code>
screen -x
</code>
And if you ran the DevStack <code>stack.sh</code> script as a non-root user, you just need to run that last little thingy to see the screens. One more reason why you should run DevStack as a non-root.</p>

<p>The way to detach from a screen is <code>CTRL+A</code> <code>D</code>, that is, first press <code>CTRL+A</code>, and then press <code>D</code>.</p>

<h2>Navigating across screens</h2>

<p>You will see names of all the screens at the bottom of the terminal. The screen on which you currently are bears an asterisk (<code>*</code>) near its name. To move to the right screen, do a <code>CTRL+A</code> <code>N</code>. Keep in mind that you are going to use <code>CTRL+A</code> a lot of times during your adventures with screen. Similar to the command <code>CTRL+A</code> <code>N</code> to move to the right (“next”) screen, to move to the left screen the command is <code>CTRL+A</code> <code>P</code>.</p>

<p>There is one more way to jump directly to a screen. Lets say you want to directly jump to the fourth screen. You just need to do a <code>CTRL+A</code> <code>4</code>, to go to fourth screen! Wasn’t that easy? But hey! How do I get to the seventeenth screen? Frankly, I don’t know a ‘direct’ way. I do a <code>CTRL+A</code> <code>9</code> once, and <code>CTRL+A</code> <code>N</code> eight more times. :( If you have a better way, please do tell me.</p>

<p>Navigating inside a screen</p>

<p>The first and biggest difficulty I faced while tracking an error in the screen logs is the periodic updates in Cinder dumps some lines to the Cinder screens every now and then. So if you have a stack trace of an error on the screen, it will go up and up and up till you can no more see it! Nope, scrolling your mouse up, or pulling the scrollbar up won’t help either (why not try it once :) ).</p>

<p>Within a few days, I thought “Hey, I’ll just reduce the font of the terminal and I’ll be able to see more lines of screen logs on my screen!”. I knew the command to reduce the font size of the terminal font: <code>CTRL</code>+<code>-</code> (just for the sake of completeness, the command to increase font is <code>CTRL</code>+<code>SHIFT</code>+<code>+</code>). That worked pretty okay upto a point. It actually helps to have logs in small font, as the logs will fit in one line on the screen and will look prettier. But what if I come after say a ten-minute break, and see all my logs are too far up to be able to see even by reducing font size?</p>

<p>Then I got to know the command which saved a ton of time in my life: The command to actually scroll up and down the screen.</p>

<p>To scroll up, first press <code>CTRL</code>+<code>[</code>. After that, you can use arrow keys to scroll up and down. You can also use <code>page-up</code> and <code>page-down</code> buttons to scroll one complete page up or down. This isn’t all of it. If you are vim user, you will find that the <code>H</code> <code>J</code> <code>K</code> <code>L</code> will work for for <code>left</code>, <code>down</code>, <code>up</code>, and <code>right</code> respectively. And the last and most convenient thing: once you press <code>CTRL</code> <code>[</code>, that is, once you are in ‘copy mode’, you can then use your mouse scroll wheel too to scroll up and down!! Now that is a perfect delight :)</p>

<p>To come out of this copy mode (so that you can switch to another screen, and do other such stuff), press <code>]</code> and you are back to normal once again.</p>

<h2>Some more ‘generic’ screen commands</h2>

<p>So that you can start playing around with screens outside OpenStack too</p>

<p>Create a new screen</p>

<p><code>
screen
</code>
To detach from current screen</p>

<p><code>
ctrl+A,D
</code>
To reattach to an existing screen</p>

<p><code>
screen -rd
</code>
To view all the screens, their states and IDs</p>

<p><code>
screen -list
</code>
To kill a screen with id SCREENID</p>

<p><code>
screen -X -S SCREENID kill
</code></p>

<p>Cheers!</p>

<p>-Rushi Agrawal</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cinder on DevStack - Quick Start]]></title>
    <link href="http://rushiagr.github.io/blog/2013/05/27/cinder-on-devstack-quick-start/"/>
    <updated>2013-05-27T22:33:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2013/05/27/cinder-on-devstack-quick-start</id>
    <content type="html"><![CDATA[<p>This blog post covers all the important commands for OpenStack Cinder - The block storage project.
Although this guide is written based on DevStack, it will work with actual deployment of OpenStack
cloud also (except the DevStack/Linux specific bits).</p>

<!--more-->


<p>All the Cinder operations can be performed via either of these three means:</p>

<ol>
<li>CLI (Cinder's <code>python-cinderclient</code> command line module)</li>
<li>GUI (Using OpenStack's GUI project <code>horizon</code>)</li>
<li>Directly calling the Cinder APIs</li>
</ol>


<p>Internally, the CLI and GUI both use Cinder APIs to interact with the Cinder API server, but for
a relatively new guy to OpenStack, I think an introduction through CLI would make the most sense.</p>

<p>Assumptions made:</p>

<ol>
<li>You understand how to setup a DevStack environment and already have one ready at hand (remember <code>./stack.sh</code>?)</li>
<li>You know how to pass default credentials to local shell environment (<code>. /home/path_to_your_devstack_repo/eucarc</code> will do)</li>
</ol>


<p>Let's start.</p>

<h3>Creation and deletion of volumes</h3>

<p>Create a 1-GB cinder volume with no name by running command <code>cinder create 1</code>.
<code>
stack@stlrx300s7-27:/$ cinder create 1
+---------------------+--------------------------------------+
|       Property      |                Value                 |
+---------------------+--------------------------------------+
|     attachments     |                  []                  |
|  availability_zone  |                 nova                 |
|       bootable      |                false                 |
|      created_at     |      2013-05-28T10:32:47.243613      |
| display_description |                 None                 |
|     display_name    |                 None                 |
|          id         | 6754d216-4792-4a38-964a-d002686c8f92 |
|       metadata      |                  {}                  |
|         size        |                  1                   |
|     snapshot_id     |                 None                 |
|     source_volid    |                 None                 |
|        status       |               creating               |
|     volume_type     |                 None                 |
+---------------------+--------------------------------------+
</code></p>

<p>Here I am describing only the minimal functionality of a command. If you wish to see more info about what all you
can do with that command, just type <code>cinder help &lt;command&gt;</code>, so to see all the optional parameters you can pass
while creating a Cinder volume, execute <code>cinder help create</code>.</p>

<p>```
stack@stlrx300s7-27:/$ cinder help create
usage: cinder create [--snapshot-id &lt;snapshot-id>]</p>

<pre><code>                 [--source-volid &lt;source-volid&gt;] [--image-id &lt;image-id&gt;]
                 [--display-name &lt;display-name&gt;]
                 [--display-description &lt;display-description&gt;]
                 [--volume-type &lt;volume-type&gt;]
                 [--availability-zone &lt;availability-zone&gt;]
                 [--metadata [&lt;key=value&gt; [&lt;key=value&gt; ...]]]
                 &lt;size&gt;
</code></pre>

<p>Add a new volume.</p>

<p>Positional arguments:
  <size>                Size of volume in GB</p>

<p>Optional arguments:
  --snapshot-id &lt;snapshot-id></p>

<pre><code>                    Create volume from snapshot id (Optional,
                    Default=None)
</code></pre>

<p>  --source-volid &lt;source-volid></p>

<pre><code>                    Create volume from volume id (Optional, Default=None)
</code></pre>

<p>  --image-id &lt;image-id></p>

<pre><code>                    Create volume from image id (Optional, Default=None)
</code></pre>

<p>  --display-name &lt;display-name></p>

<pre><code>                    Volume name (Optional, Default=None)
</code></pre>

<p>  --display-description &lt;display-description></p>

<pre><code>                    Volume description (Optional, Default=None)
</code></pre>

<p>  --volume-type &lt;volume-type></p>

<pre><code>                    Volume type (Optional, Default=None)
</code></pre>

<p>  --availability-zone &lt;availability-zone></p>

<pre><code>                    Availability zone for volume (Optional, Default=None)
</code></pre>

<p>  --metadata [&lt;key=value> [&lt;key=value> ...]]</p>

<pre><code>                    Metadata key=value pairs (Optional, Default=None)
</code></pre>

<p>```</p>

<p>Don't worry about the parameters, we'll use most of them in a short time.</p>

<p>Let's create a Cinder volume of size 1GB with a name, using <code>cinder create --display-name my_second_vol 1</code>:
<code>
stack@stlrx300s7-27:/$ cinder create --display-name my_second_vol 1
+---------------------+--------------------------------------+
|       Property      |                Value                 |
+---------------------+--------------------------------------+
|     attachments     |                  []                  |
|  availability_zone  |                 nova                 |
|       bootable      |                false                 |
|      created_at     |      2013-05-28T10:40:32.801981      |
| display_description |                 None                 |
|     display_name    |            my_second_vol             |
|          id         | 25fa2028-46dc-4870-84c5-d062ae99dd7a |
|       metadata      |                  {}                  |
|         size        |                  1                   |
|     snapshot_id     |                 None                 |
|     source_volid    |                 None                 |
|        status       |               creating               |
|     volume_type     |                 None                 |
+---------------------+--------------------------------------+
</code></p>

<p>Now lets list out all the Cinder volumes, using <code>cinder list</code>:
<code>
stack@stlrx300s7-27:/$ cinder list
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |  Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
| 25fa2028-46dc-4870-84c5-d062ae99dd7a | available | my_second_vol |  1   |     None    |  false   |             |
| 6754d216-4792-4a38-964a-d002686c8f92 | available |      None     |  1   |     None    |  false   |             |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
</code></p>

<p>Now lets delete the first volume (the one without a name), using <code>cinder delete &lt;volume_id&gt;</code> command. If you
execute <code>cinder list</code> real quick, you will see the status of the volume going to 'deleting', and after some time
the volume will be deleted:
<code>
stack@stlrx300s7-27:/$ cinder delete 6754d216-4792-4a38-964a-d002686c8f92
stack@stlrx300s7-27:/$ cinder list
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |  Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
| 25fa2028-46dc-4870-84c5-d062ae99dd7a | available | my_second_vol |  1   |     None    |  false   |             |
| 6754d216-4792-4a38-964a-d002686c8f92 |  deleting |      None     |  1   |     None    |  false   |             |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
stack@stlrx300s7-27:/$
stack@stlrx300s7-27:/$
stack@stlrx300s7-27:/$ cinder list
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |  Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
| 25fa2028-46dc-4870-84c5-d062ae99dd7a | available | my_second_vol |  1   |     None    |  false   |             |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
</code></p>

<p>On a default DevStack installation, for a volume in Cinder, a 'logical volume' is created on the Linux machine,
inside the 'physical volume' named <code>stack-volumes</code>. To see the logical volumes, and physical volumes on the
ubuntu machine, just run <code>lvs</code> (logical volume scan) and <code>pvs</code> (physical volume scan) respectively (this is just
for information and you can entirely skip this part):
<code>
stack@stlrx300s7-27:/$ sudo lvs
  LV                                          VG            Attr   LSize Origin Snap%  Move Log Copy%  Convert
  volume-25fa2028-46dc-4870-84c5-d062ae99dd7a stack-volumes -wi-ao 1.00g
stack@stlrx300s7-27:/$
stack@stlrx300s7-27:/$ sudo pvs
  PV         VG            Fmt  Attr PSize PFree
  /dev/loop0 stack-volumes lvm2 a-   5.01g 4.01g
</code></p>

<h3>Volume snapshots</h3>

<p>Create the snapshot of volume:
<code>
stack@stlrx300s7-27:/$ cinder snapshot-create 25fa2028-46dc-4870-84c5-d062ae99dd7a
+---------------------+--------------------------------------+
|       Property      |                Value                 |
+---------------------+--------------------------------------+
|      created_at     |      2013-05-28T10:55:03.966690      |
| display_description |                 None                 |
|     display_name    |                 None                 |
|          id         | baf8764f-4c9b-496a-b2ff-bd49825c5d09 |
|       metadata      |                  {}                  |
|         size        |                  1                   |
|        status       |               creating               |
|      volume_id      | 25fa2028-46dc-4870-84c5-d062ae99dd7a |
+---------------------+--------------------------------------+
</code></p>

<p>List all the snapshots:
<code>
stack@stlrx300s7-27:/$ cinder snapshot-list
+--------------------------------------+--------------------------------------+-----------+--------------+------+
|                  ID                  |              Volume ID               |   Status  | Display Name | Size |
+--------------------------------------+--------------------------------------+-----------+--------------+------+
| baf8764f-4c9b-496a-b2ff-bd49825c5d09 | 25fa2028-46dc-4870-84c5-d062ae99dd7a | available |     None     |  1   |
+--------------------------------------+--------------------------------------+-----------+--------------+------+
</code></p>

<p>Now lets create a new volume of 1GB from the snapshot:
<code>
stack@stlrx300s7-27:/$ cinder create --snapshot-id baf8764f-4c9b-496a-b2ff-bd49825c5d09 1
+---------------------+--------------------------------------+
|       Property      |                Value                 |
+---------------------+--------------------------------------+
|     attachments     |                  []                  |
|  availability_zone  |                 nova                 |
|       bootable      |                false                 |
|      created_at     |      2013-05-28T10:56:20.478141      |
| display_description |                 None                 |
|     display_name    |                 None                 |
|          id         | 99ebe1d0-678b-4a9a-8ec4-438f9804d327 |
|       metadata      |                  {}                  |
|         size        |                  1                   |
|     snapshot_id     | baf8764f-4c9b-496a-b2ff-bd49825c5d09 |
|     source_volid    |                 None                 |
|        status       |               creating               |
|     volume_type     |                 None                 |
+---------------------+--------------------------------------+
</code>
Now you will see two volumes when you'll do a <code>cinder list</code>.</p>

<h3>Accessing volumes from inside a virtual instance</h3>

<p>You can attach a volume to a VM instance, to provide additional persistent storage to that VM. It
works just like you attach an external HDD to your computer/laptop. But first, we'll need to create a
virtual machine for that.</p>

<p>List out all the virtual machine images present in our DevStack setup, from which we can boot a
brand new VM instance, using <code>glance image-list</code> or 'nova image-list`:
<code>
stack@stlrx300s7-27:/$ nova image-list
+--------------------------------------+---------------------------------+--------+--------+
| ID                                   | Name                            | Status | Server |
+--------------------------------------+---------------------------------+--------+--------+
| 291fe347-3a6f-4a21-9e85-e8809cb05d6e | cirros-0.3.1-x86_64-uec         | ACTIVE |        |
| 69d14d74-4185-4ba3-9666-1e7f569f38c6 | cirros-0.3.1-x86_64-uec-kernel  | ACTIVE |        |
| 8793532d-0c09-4b1c-aab8-d10832f13c09 | cirros-0.3.1-x86_64-uec-ramdisk | ACTIVE |        |
+--------------------------------------+---------------------------------+--------+--------+
</code></p>

<p>We'll use the image with the shortest name, and boot an instance, giving it a name <code>myinstance</code>.
You can list all the virtual machine instances registered with Nova using command <code>nova list</code>.
If just after running the command to boot the virtual machine, you run <code>nova list</code> a few times,
you will see the machine state going from 'BUILD' to 'ACTIVE' in a few seconds.
<code>
stack@stlrx300s7-27:/$ nova boot --flavor m1.tiny --image 291fe347-3a6f-4a21-9e85-e8809cb05d6e myinstance
+-----------------------------+--------------------------------------+
| Property                    | Value                                |
+-----------------------------+--------------------------------------+
| status                      | BUILD                                |
| updated                     | 2013-05-28T11:03:47Z                 |
| OS-EXT-STS:task_state       | scheduling                           |
| key_name                    | None                                 |
| image                       | cirros-0.3.1-x86_64-uec              |
| hostId                      |                                      |
| OS-EXT-STS:vm_state         | building                             |
| flavor                      | m1.tiny                              |
| id                          | 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f |
| security_groups             | [{u'name': u'default'}]              |
| user_id                     | 35708cb6795845fcab6362e908e6b0cf     |
| name                        | myinstance                           |
| adminPass                   | cQh34G96dCHX                         |
| tenant_id                   | 11f8fde7d627422d84036cabd6cbb7f8     |
| created                     | 2013-05-28T11:03:47Z                 |
| OS-DCF:diskConfig           | MANUAL                               |
| metadata                    | {}                                   |
| accessIPv4                  |                                      |
| accessIPv6                  |                                      |
| progress                    | 0                                    |
| OS-EXT-STS:power_state      | 0                                    |
| OS-EXT-AZ:availability_zone | nova                                 |
| config_drive                |                                      |
+-----------------------------+--------------------------------------+
stack@stlrx300s7-27:/$ nova list
+--------------------------------------+------------+--------+------------+-------------+----------+
| ID                                   | Name       | Status | Task State | Power State | Networks |
+--------------------------------------+------------+--------+------------+-------------+----------+
| 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f | myinstance | BUILD  | networking | NOSTATE     |          |
+--------------------------------------+------------+--------+------------+-------------+----------+
stack@stlrx300s7-27:/$ nova list
+--------------------------------------+------------+--------+------------+-------------+----------+
| ID                                   | Name       | Status | Task State | Power State | Networks |
+--------------------------------------+------------+--------+------------+-------------+----------+
| 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f | myinstance | BUILD  | spawning   | NOSTATE     |          |
+--------------------------------------+------------+--------+------------+-------------+----------+
stack@stlrx300s7-27:/$ nova list
+--------------------------------------+------------+--------+------------+-------------+------------------+
| ID                                   | Name       | Status | Task State | Power State | Networks         |
+--------------------------------------+------------+--------+------------+-------------+------------------+
| 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f | myinstance | ACTIVE | None       | Running     | private=10.0.0.2 |
+--------------------------------------+------------+--------+------------+-------------+------------------+
</code></p>

<p>Now lets attach one of our volume to this instance, and then try to peek into this volume after logging into the instance.</p>

<p>Attach volume using command <code>nova volume-attach &lt;instance_id&gt; &lt;volume_id&gt; &lt;attach_location&gt;</code>. We'll attach at the first
free device location: <code>/dev/vdb</code>:
<code>
stack@stlrx300s7-27:/$ nova volume-attach 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f 25fa2028-46dc-4870-84c5-d062ae99dd7a /dev/vdb
+----------+--------------------------------------+
| Property | Value                                |
+----------+--------------------------------------+
| device   | /dev/vdb                             |
| serverId | 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f |
| id       | 25fa2028-46dc-4870-84c5-d062ae99dd7a |
| volumeId | 25fa2028-46dc-4870-84c5-d062ae99dd7a |
+----------+--------------------------------------+
</code></p>

<p>Now listing the volume will tell you that the volume is attached to an instance (in use):
<code>
stack@stlrx300s7-27:/$ cinder list
+--------------------------------------+-----------+---------------+------+-------------+----------+--------------------------------------+
|                  ID                  |   Status  |  Display Name | Size | Volume Type | Bootable |             Attached to              |
+--------------------------------------+-----------+---------------+------+-------------+----------+--------------------------------------+
| 25fa2028-46dc-4870-84c5-d062ae99dd7a |   in-use  | my_second_vol |  1   |     None    |  false   | 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f |
| 99ebe1d0-678b-4a9a-8ec4-438f9804d327 | available |      None     |  1   |     None    |  false   |                                      |
+--------------------------------------+-----------+---------------+------+-------------+----------+--------------------------------------+
</code></p>

<p>Now let's login into this virtual machine using the private IP of the instance (<code>10.0.0.2</code> in our case). Note how an
error message pops up if you have already created an instance last time when you installed DevStack. If such an error
appears on your screen too, follow the instructions just like the way I did. The default password for the cirros image
we used is <code>cubswin:)</code>. Enter into the instance, and then become root:
```
stack@stlrx300s7-27:/$ ssh cirros@10.0.0.2
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
f5:ac:45:4c:63:8e:e4:19:cc:5a:76:7e:a1:08:e7:c8.
Please contact your system administrator.
Add correct host key in /opt/stack/.ssh/known_hosts to get rid of this message.
Offending RSA key in /opt/stack/.ssh/known_hosts:4
  remove with: ssh-keygen -f "/opt/stack/.ssh/known_hosts" -R 10.0.0.2
RSA host key for 10.0.0.2 has changed and you have requested strict checking.
Host key verification failed.</p>

<p>stack@stlrx300s7-27:/$ ssh-keygen -f "/opt/stack/.ssh/known_hosts" -R 10.0.0.2
/opt/stack/.ssh/known_hosts updated.
Original contents retained as /opt/stack/.ssh/known_hosts.old
<code>
</code>
stack@stlrx300s7-27:/$ ssh cirros@10.0.0.2
The authenticity of host '10.0.0.2 (10.0.0.2)' can't be established.
RSA key fingerprint is f5:ac:45:4c:63:8e:e4:19:cc:5a:76:7e:a1:08:e7:c8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '10.0.0.2' (RSA) to the list of known hosts.
cirros@10.0.0.2's password:
$sudo -i
#
```</p>

<p>Run <code>fdisk -l</code> to see the disks present for the instance. You will see that your newly attached disk
<code>/dev/vdb</code> of size 1GB is now present:
```</p>

<h1>fdisk -l</h1>

<p>Disk /dev/vda: 1073 MB, 1073741824 bytes
16 heads, 63 sectors/track, 2080 cylinders, total 2097152 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000</p>

<p>Disk /dev/vda doesn't contain a valid partition table</p>

<p>Disk /dev/vdb: 1073 MB, 1073741824 bytes
16 heads, 63 sectors/track, 2080 cylinders, total 2097152 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000</p>

<p>Disk /dev/vdb doesn't contain a valid partition table
```</p>

<p>Command <code>blkid /dev/vd*</code> lists out the IDs of block devices for this machine and some related info. Running
this command you will see that info of only the virtual disk <code>/dev/vda</code> is present, meaning our disk <code>/dev/vdb</code>
needs formatting.
```</p>

<h1>blkid /dev/vd*</h1>

<p>/dev/vda: LABEL="cirros-rootfs" UUID="74251bb8-3a28-4a46-9a78-064497b26b9d" SEC_TYPE="ext2" TYPE="ext3"
```</p>

<p>Lets format it to make an EXT3 partition with block-size 1024 bytes using command <code>mkfs.ext3 -b 1024 /dev/vdb</code>:
```</p>

<h1>mkfs.ext3 -b 1024 /dev/vdb</h1>

<p>mke2fs 1.42.2 (27-Mar-2012)
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 1048576 blocks
52428 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=68157440
128 block groups
8192 blocks per group, 8192 fragments per group
512 inodes per group
Superblock backups stored on blocks:</p>

<pre><code>    8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409, 663553, 
    1024001
</code></pre>

<p>Allocating group tables: done                          <br/>
Writing inode tables: done                          <br/>
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done
```</p>

<p>Run <code>blkid</code> again to see the newly partitioned disk listed:
```</p>

<h1>blkid /dev/vd*</h1>

<p>/dev/vda: LABEL="cirros-rootfs" UUID="74251bb8-3a28-4a46-9a78-064497b26b9d" SEC_TYPE="ext2" TYPE="ext3"
/dev/vdb: UUID="22838e81-eb97-457d-b1e0-4ff3d8e45b05" SEC_TYPE="ext2" TYPE="ext3"
```</p>

<p>In order to use this disk, you need to mount it at some location. I'll create a directory <code>/tempmount</code>
and mount our virtual block device there:
```</p>

<h1>mkdir /tempmount</h1>

<h1>mount /dev/vdb /tempmount/</h1>

<p>```</p>

<p>Now you can see the disk listed in the machine disks, using <code>df -h</code> command:
```</p>

<h1>df -h</h1>

<p>Filesystem                Size      Used Available Use% Mounted on
/dev                    242.3M         0    242.3M   0% /dev
/dev/vda                 31.0M      9.7M     19.7M  33% /
tmpfs                   245.9M         0    245.9M   0% /dev/shm
tmpfs                   200.0K     76.0K    124.0K  38% /run
/dev/vdb               1007.7M     34.9M    921.6M   4% /tempmount
```</p>

<p>Now you can <code>cd</code> into <code>/tempmount</code> directory, and do whatever you want to do with the new disk -- put some files there,
or download one!</p>

<p>Lets wrap up this part. Unmount this volume by <code>umount /tempmount</code>, and log out from the machine by pressing <code>CTRL+D</code> twice, and execute <code>nova volume-detach &lt;volume_id&gt;
&lt;server_id&gt;</code> to detach this volume. You can now see the 'Attached to' column becomes empty again after detaching.
<code>
stack@stlrx300s7-27:/$ cinder list
+--------------------------------------+-----------+---------------+------+-------------+----------+--------------------------------------+
|                  ID                  |   Status  |  Display Name | Size | Volume Type | Bootable |             Attached to              |
+--------------------------------------+-----------+---------------+------+-------------+----------+--------------------------------------+
| 25fa2028-46dc-4870-84c5-d062ae99dd7a |   in-use  | my_second_vol |  1   |     None    |  false   | 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f |
| 99ebe1d0-678b-4a9a-8ec4-438f9804d327 | available |      None     |  1   |     None    |  false   |                                      |
+--------------------------------------+-----------+---------------+------+-------------+----------+--------------------------------------+
stack@stlrx300s7-27:/$ nova volume-detach 3b6dd9f1-3ca3-4eed-a508-1cd62d55629f 25fa2028-46dc-4870-84c5-d062ae99dd7a
stack@stlrx300s7-27:/$ cinder list
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
|                  ID                  |   Status  |  Display Name | Size | Volume Type | Bootable | Attached to |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
| 25fa2028-46dc-4870-84c5-d062ae99dd7a | available | my_second_vol |  1   |     None    |  false   |             |
| 99ebe1d0-678b-4a9a-8ec4-438f9804d327 | available |      None     |  1   |     None    |  false   |             |
+--------------------------------------+-----------+---------------+------+-------------+----------+-------------+
</code></p>

<h3>More features</h3>

<p>(Will update shortly)</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStack Tempest quick start with DevStack]]></title>
    <link href="http://rushiagr.github.io/blog/2013/03/20/openstack-tempest-quick-start-with-devstack/"/>
    <updated>2013-03-20T04:54:00+05:30</updated>
    <id>http://rushiagr.github.io/blog/2013/03/20/openstack-tempest-quick-start-with-devstack</id>
    <content type="html"><![CDATA[<p>UPDATE(April 2014): Now when you set up DevStack, Tempest is automatically set up for you.</p>

<p>This quick start guide explains setting up Tempest with a DevStack environment
for Grizzly release. Most of the information here is taken from
<a href="http://www.joinfu.com/2012/03/testing-essex-rc1-with-devstack-and-tempest/">here</a>, the only difference being this blog post is more recent, and is based on Grizzly.</p>

<!--more-->


<p>Assumptions made are that you understand:
1. What is a <code>localrc</code> file in DevStack.
2. What does <code>./stack.sh</code> do in DevStack.
3. How to clone using git.</p>

<h2>Setting up DevStack</h2>

<p>Clone DevStack</p>

<pre><code>git clone https://github.com/openstack-dev/devstack.git
cd devstack
</code></pre>

<p>Tempest requires that the rate-limiting for DevStack is turned off. By default, it is turned on, so turn it off by adding this line to the localrc file.</p>

<pre><code>API_RATE_LIMIT=False
</code></pre>

<p>If you have already created a DevStack environment, you will have to go through the labour of setting it all again by unstacking and restacking it with this parameter in localrc.
Quick tip: If you already had a working DevStack in your computer, adding <code>OFFLINE=True</code> line in localrc will create the DevStack environment in your computer WITHOUT
downloading all the OpenStack code all over again from the Github repos, but will build the environment from the existing code (thus saving you some Internet bandwidth and time).</p>

<p>Build the DevStack environment</p>

<pre><code>./stack.sh
</code></pre>

<p>Supply all the five passwords. (If you are just playing around, just like me, then
you can easily supply <code>nova</code> to all the passwords.)</p>

<p>Note the IP of the system where DevStack is running (The 'host IP' mentioned at the last of the output after running <code>stack.sh</code>).</p>

<h2>Setting up Tempest</h2>

<p>Clone latest Tempest code</p>

<pre><code>git clone https://github.com/openstack/tempest.git
cd tempest
</code></pre>

<p>Create tempest.conf file from the sample configuration file. This file will contain the configuration information of the OpenStack environment (here, the DevStack
environment)</p>

<pre><code>cp etc/tempest.conf.sample etc/tempest.conf
</code></pre>

<p>Now open the file tempest.conf in an editor, and replace all instance of word <code>secret</code> with the appropriate password (<code>nova</code> if you followed me, and just typed <code>nova</code> whenever the
<code>stack.sh</code> script asked for passwords)</p>

<p>If, for example, your host IP is 10.0.24.30, change this line in tempest.conf</p>

<pre><code>uri = http://127.0.0.1:5000/v2.0/
</code></pre>

<p>to make it</p>

<pre><code>uri = http://10.0.24.30:5000/v2.0/
</code></pre>

<p>The last thing to update in the tempest.conf file is the ID of the Cirros image. The image ID can be obtained by two ways</p>

<h4>Image ID using glance</h4>

<p>This command will return the image ID. Note that I have used the password <code>nova</code> in this line. You might also need to change the host IP address</p>

<pre><code>glance -I admin -K nova -T admin -N http://10.0.24.30:5000/v2.0 -S keystone index | grep ami | cut -f1 | awk '{print $1}'
</code></pre>

<h4>Image ID using OpenStack CLI</h4>

<p>Become stack user</p>

<pre><code>su - stack
</code></pre>

<p>Source the sample credentials file</p>

<pre><code>. /opt/stack/devstack/eucarc
</code></pre>

<p>OR</p>

<pre><code>. /opt/stack/devstack/openrc
</code></pre>

<p>Show all the images, with their IDs</p>

<pre><code>$ nova image-list
+--------------------------------------+---------------------------------+--------+--------+
| ID                                   | Name                            | Status | Server |
+--------------------------------------+---------------------------------+--------+--------+
| 13abf9c8-5603-48cb-802e-e27162e10b58 | cirros-0.3.0-x86_64-uec         | ACTIVE |        |
| 39b023ae-9201-427d-8350-4f30e5bbc01a | cirros-0.3.0-x86_64-uec-kernel  | ACTIVE |        |
| 431a9c04-47b1-47e4-9521-7f12295c78e0 | cirros-0.3.0-x86_64-uec-ramdisk | ACTIVE |        |
+--------------------------------------+---------------------------------+--------+--------+
</code></pre>

<p>The ID of the smallest image name is what we're interested in.</p>

<p>Now replace <code>{$IMAGE_ID}</code> and <code>{$IMAGE_ID_ALT}</code> with this value, to make those two lines appear in tempest.conf as</p>

<pre><code>image_ref = 13abf9c8-5603-48cb-802e-e27162e10b58
image_ref_alt = 13abf9c8-5603-48cb-802e-e27162e10b58
</code></pre>

<h2>Installing required dependencies</h2>

<p>Install all the required packages needed to run Tempest integration test suite. (The list of required packages is maintained in file <code>tools/pip-requires</code>)</p>

<pre><code>$ sudo pip install -r tools/pip-requires 
</code></pre>

<h2>Show time!</h2>

<p>We'll run all the tests in verbose mode. To run all the tests:</p>

<pre><code>nosetests -v tempest
</code></pre>

<p>To run tests only from a specific file, say <code>tempest/tests/volume/test_volumes_list.py</code>:</p>

<pre><code>nosetests -sv tempest.tests.volume.test_volumes_list
</code></pre>

<p>OR</p>

<pre><code>nosetests -sv tempest.tests.volume.test_volumes_list.py
</code></pre>

<p>To run a specific test <code>test_volume_list_with_details</code> from test class <code>VolumeListTest</code>, which resides in the above file:</p>

<pre><code>    nosetests -sv tempest.tests.volume.test_volumes_list:VolumeListTest.test_volume_list_with_details
</code></pre>

<p>And that ladies and gentlemen, is the end! :)</p>
]]></content>
  </entry>
  
</feed>
