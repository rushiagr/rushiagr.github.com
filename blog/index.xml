<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>rushiagr</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.rushiagr.com/blog/</link>
    <language>en-us</language>
    <author>Rushi Agrawal</author>
    <copyright>2016 Rushi Agrawal</copyright>
    <updated>Fri, 17 Jun 2016 11:18:27 IST</updated>
    
    
    <item>
      <title>You dont need Vim swap files. And how to get rid of them</title>
      <link>http://www.rushiagr.com/blog/2016/06/17/you-dont-need-vim-swap-files-and-how-to-get-rid-of-them/</link>
      <pubDate>Fri, 17 Jun 2016 11:18:27 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/06/17/you-dont-need-vim-swap-files-and-how-to-get-rid-of-them/</guid>
      <description>

&lt;p&gt;Estimated reading time: 5 minutes.&lt;/p&gt;

&lt;p&gt;Almost all IDEs today have &amp;lsquo;autosave&amp;rsquo; feature. That is, you don&amp;rsquo;t need to
explicitly save a file. The file is automatically saved as you type, so that
even if your computer crashes, you don&amp;rsquo;t lose data. This makes me wonder why
does Vim&amp;rsquo;s default behavior is of using swap files. Swap files are annoying.
I&amp;rsquo;ve seen all Vim developers, including me, struggle with swap files at one
point in their life.&lt;/p&gt;

&lt;p&gt;There is a Vim plugin for autosaving, and it has saved a lot of my time. I have
used the plugin such that every time I enter normal mode (after making edits in
Insert mode), it autosaves file. And, most importantly, I have disabled swap
file creation by Vim. It&amp;rsquo;s really that simple folks. You don&amp;rsquo;t really need swap
files 99.99% of the times.&lt;/p&gt;

&lt;h3 id=&#34;how-to-vim-autosave:c3bd95eae5779c78f8b280be1e967fb5&#34;&gt;How to Vim autosave&lt;/h3&gt;

&lt;p&gt;Download the plugin, which is present at
&lt;a href=&#34;https://github.com/907th/vim-auto-save&#34;&gt;https://github.com/907th/vim-auto-save&lt;/a&gt;, and put the plugin file in &lt;code&gt;~/.vim/plugin&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/plugin
cd ~/.vim/plugin
wget https://raw.githubusercontent.com/907th/vim-auto-save/master/plugin/AutoSave.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open the &lt;code&gt;~/.vimrc&lt;/code&gt; file and add these lines. Comments are
self-explanatory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Enable autosave plugin
let g:auto_save = 1

# Only save in Normal mode periodically. If the value is changed to &#39;1&#39;,
# then changes are saved when you are in Insert mode too, as you type, but
# I would say prefer not save in Insert mode
let g:auto_save_in_insert_mode = 0

# Silently autosave. If you disable this option by changing value to &#39;0&#39;,
# then in the vim status, it will display &amp;quot;(AutoSaved at &amp;lt;current time&amp;gt;)&amp;quot; all
# the time, which might get annoying
let g:auto_save_silent = 1

# And now turn Vim swapfile off
set noswapfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;things-to-note:c3bd95eae5779c78f8b280be1e967fb5&#34;&gt;Things to note&lt;/h3&gt;

&lt;p&gt;There are a few things to note when you switch to this &amp;lsquo;autosave, no swap
files&amp;rsquo; mode:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can&amp;rsquo;t just do a &lt;code&gt;:q!&lt;/code&gt; to exit without writing your unsaved changes.
Autosave already has saved your changes, so the only real way to discard
your changes is to undo all the changes you&amp;rsquo;ve made (&lt;code&gt;u&lt;/code&gt; key) and then exit
the file.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Earlier, you can&amp;rsquo;t modify a Vim file which is already open in another
terminal. Now too Vim will throw a warning message. The difference is how
you&amp;rsquo;re notified of it. Previously, even before opening the file Vim will say
that a swap file exists. But now, Vim will allow you to open the file, and
start editing it too. Only when you come out of Insert mode, AND you are
making a conflicting change, will it say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING: The file has been changed since reading it!!!
Do you really want to write to it (y/n)?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A conflicting change basically means you are making edits at a place where
edits are already made in another terminal where that same file is open.
For example, the file initially had &amp;lsquo;one&amp;rsquo; written on first line when it&amp;rsquo;s
opened in both terminals. In one terminal, you add a second line saying
&amp;lsquo;two&amp;rsquo;, and in another terminal when you add the second line saying &amp;lsquo;three&amp;rsquo;,
we have a conflict. This is because we are writing &amp;lsquo;three&amp;rsquo; at line number 2
where &amp;lsquo;two&amp;rsquo; is alredy written (from another terminal)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this helps. Questions, comments, suggestions, feedback? Comment :)&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Everything you need to know about Tmux copy pasting</title>
      <link>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting/</link>
      <pubDate>Thu, 16 Jun 2016 10:58:02 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting/</guid>
      <description>

&lt;p&gt;Note: It is best if you actually execute steps in this tutorial along with
reading it&lt;/p&gt;

&lt;p&gt;Estimated reading time: 30 minutes if performing a hands-on. Else 10 minutes.&lt;/p&gt;

&lt;p&gt;Note: This Guide is written by running commands on Ubuntu Trusty (14.04), which
comes with Tmux version 1.8. For later versions of Tmux, things which are
different are mentioned at appropriate places .  You can check Tmux version
with &lt;code&gt;tmux -V&lt;/code&gt; command. Please feel free to comment if you find something
missing or wrong, or know something worth adding.&lt;/p&gt;

&lt;h3 id=&#34;tmux-copy-paste-the-defaults:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux copy-paste - the defaults&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m going to explain you the tmux defaults in this section, but don&amp;rsquo;t remember
any of it! The following methods are slightly involved, so we will soon create
Tmux shortcuts for them which are easier to remember. More so, they are
Vim-like, so if you are a Vim user, you&amp;rsquo;ll need to learn even less new
stuff :)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter &amp;lsquo;copy mode&amp;rsquo;. This is the mode in which you can move the cursor
anywhere on the screen. Do this by pressing the &amp;lsquo;prefix&amp;rsquo; (&lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;), and
then pressing &lt;code&gt;[&lt;/code&gt; key. So basically press &lt;code&gt;CTRL&lt;/code&gt; and then &lt;code&gt;j&lt;/code&gt; while holding
the &lt;code&gt;CTRL&lt;/code&gt; button, then release both keys, and then press &lt;code&gt;[&lt;/code&gt; key. Such
sequence will be mentioned as &lt;code&gt;CTRL&lt;/code&gt;+&amp;lsquo;b&amp;rsquo;, &lt;code&gt;[&lt;/code&gt; from now on for other such
sequences too.&lt;/li&gt;
&lt;li&gt;Now use the arrow keys to go to the start of the text you want to copy, and
then press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;SPACE&lt;/code&gt;, or &lt;code&gt;SHIFT&lt;/code&gt;+&lt;code&gt;SPACE&lt;/code&gt;. The cursor should now change
to yellow colour, meaning it has started highlighting.&lt;/li&gt;
&lt;li&gt;Now using arrow keys, move to the point till where you want to copy, and
then press &lt;code&gt;ENTER&lt;/code&gt;. Alternatively, you can press &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;w&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now you can paste the copied text by doing &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;tmux-vim-bindings-for-copy-and-paste:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux Vim-bindings for copy and paste&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add these lines file by name ~/.tmux.conf.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind P paste-buffer
bind-key -t vi-copy &#39;v&#39; begin-selection
bind-key -t vi-copy &#39;y&#39; copy-selection
bind-key -t vi-copy &#39;r&#39; rectangle-toggle
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you can enter copy mode as described above (&lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;), and then go
to start point and press &amp;lsquo;v&amp;rsquo; to start copying. After you have selected text
you want to copy, you can just press &amp;lsquo;y&amp;rsquo; to copy the text into Tmux&amp;rsquo;s
buffer. This is exactly the commands you would use in Vim to copy text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To paste, press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;P&lt;/code&gt;. Note that it&amp;rsquo;s capital &amp;lsquo;p&amp;rsquo; (i.e.
&lt;code&gt;SHIFT&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt;). This again is similar to Vim&amp;rsquo;s shortcut &amp;lsquo;p&amp;rsquo; for paste, though
not exactly similar. You&amp;rsquo;ll realize in your Tmux journey why didn&amp;rsquo;t we use a
small &amp;lsquo;p&amp;rsquo; instead of a capital &amp;lsquo;P&amp;rsquo; ;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we move ahead, I want to tell you that Tmux&amp;rsquo;s copy buffer is independent
of system clipboard (at least on Tmux 1.8. In Tmux 2.0 this seems to be no
longer the case on El Capitan Mac. I unfortunately don&amp;rsquo;t have an Ubuntu Desktop
handy). That is, whatever you copied using &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt; command, it&amp;rsquo;ll still be
pasted when you do a &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;v&lt;/code&gt;, and the stuff you copied in Tmux using Tmux&amp;rsquo;s
way to copy stuff won&amp;rsquo;t be available by default outside of that Tmux session.
But you can change that behavior. I&amp;rsquo;ve now started to use Mac, and somehow it
just works in it, so I don&amp;rsquo;t really know how to make it work in Ubuntu any more
:(. I &amp;lsquo;guess&amp;rsquo; if you follow steps in &amp;lsquo;Copy from remote server&amp;rsquo;, you&amp;rsquo;ll get it
working. Do let me know if you are trying it!&lt;/p&gt;

&lt;h3 id=&#34;tmux-copy-with-mouse-drag:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux copy with mouse drag!&lt;/h3&gt;

&lt;p&gt;You can enable what is called as &amp;lsquo;mouse mode&amp;rsquo;. Using it, you can just select
text by dragging mouse and making a selection. For doin that, you just need to
add these lines to your &lt;code&gt;~/.tmux.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setw -g mode-mouse on
set -g mouse-select-window on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this works only with Tmux version 1.8 or earlier. For later versions
of Tmux, just add this single line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -g mouse on
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;but-now-i-can-t-do-normal-copy-paste-with-mouse:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;But now I can&amp;rsquo;t do normal copy-paste with mouse!&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll notice that now all your selections will go to tmux buffer, and not
system&amp;rsquo;s buffer (called &amp;lsquo;clipboard&amp;rsquo;). The solution is very simple &amp;ndash; just use
&lt;code&gt;SHIFT&lt;/code&gt; button (and on Macs, use &lt;code&gt;ALT&lt;/code&gt; button).&lt;/p&gt;

&lt;p&gt;This is all what you need to know if you are using only your local computer.
But if you are a developer, there is a chance you might be dealing with remote
servers over SSH, and might want to copy text in Tmux on a remote server, and
have it accessible locally. For example you might want to copy an error message
from remote server and send it over to your colleague over chat from you local
computer. There is a way to do that too!&lt;/p&gt;

&lt;h3 id=&#34;copy-from-a-remote-server:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Copy from a remote server&lt;/h3&gt;

&lt;p&gt;You will need to install &lt;code&gt;xclip&lt;/code&gt; on the remote server and local computer too.
On Ubuntu, this can be done by doing &lt;code&gt;sudo apt-get install xclip&lt;/code&gt;. Add this
line to your &lt;code&gt;~/.tmux.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind -t vi-copy y copy-pipe &amp;quot;xclip -sel clip -i&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then SSH on the remote server using -X option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -X remoteuser@remotehost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now anything you copy on that system using Tmux will come to local system&amp;rsquo;s
clipboard.&lt;/p&gt;

&lt;p&gt;Done! Don&amp;rsquo;t forget to comment if you know something worth letting everybody
know! Thank you:)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Moving from Pelican to Hugo</title>
      <link>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</link>
      <pubDate>Sun, 24 Jan 2016 21:19:26 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</guid>
      <description>&lt;p&gt;I was looking for a better theme for my blog which is based on
&lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; static site generator in Python, but then I happened to look at
&lt;a href=&#34;http://npf.io&#34;&gt;this&lt;/a&gt; blog written in Hugo - a Go counterpart of Pelican. The
thing which caught my eye was the &lt;a href=&#34;http://npf.io/blog/&#34;&gt;posts&lt;/a&gt; page, which is
exactly how I wanted my first page to be. I&amp;rsquo;ve always wanted something like
Paul Graham&amp;rsquo;s &lt;a href=&#34;http://paulgraham.com/articles.html&#34;&gt;essays&lt;/a&gt; page, but couldn&amp;rsquo;t
find anything close to it until I found this site. After some thought, I
decided to make the move. This move has no effect on my love for Python
language. It&amp;rsquo;s just laziness trumping drudgery :)&lt;/p&gt;

&lt;p&gt;The good thing about static site generators is all of them support markdown &amp;ndash;
the markup language in which my Pelican blog was written. Althought the syntax
of Hugo was different, I could scribble up a &lt;a href=&#34;https://github.com/rushiagr/public/blob/master/scripts/pelican-to-hugo.py&#34;&gt;small Python
script&lt;/a&gt;
to convert Pelican&amp;rsquo;s way of writing blog metadata to Hugo&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Since I didn&amp;rsquo;t want readers who saved my blog links as bookmarks to suffer, I
had to manually make sure that the URLs of blog posts are not changed. Hugo by
default uses the markdown file name as the URL name. Pelican by default
converts blog post title to a slug and uses that slug in the URL. This has
helped me have markdown file names in lexicographical order (first one named as
&lt;code&gt;a-my-first-blog.md&lt;/code&gt;, second one &lt;code&gt;b-sequel-of-first-article.md&lt;/code&gt;, and so
on) for chronological viewing. But now I have to either change the file names,
or write a &lt;code&gt;slug&lt;/code&gt; entry to each blog post&amp;rsquo;s metadata. I figured out the earlier one
would be less time consuming, and did just that.&lt;/p&gt;

&lt;p&gt;One problem I faced was, the site-generation script was throwing an error.
Googling and stackoverflowing told me that it&amp;rsquo;s due to Hugo version
incompatibility. When Nate Finch, the original author of
&lt;a href=&#34;http://npf.io&#34;&gt;npf.io&lt;/a&gt; generated his site, he must have used an older version
of Hugo. But I had only the latest Hugo binary, built from source. Within some
time I was able to figure out the problem and
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/712506d460dbeb7cb80757d9d4f533f75983968d&#34;&gt;fixed&lt;/a&gt; them, and then submitted
&lt;a href=&#34;https://github.com/natefinch/npf/pull/5&#34;&gt;pull request&lt;/a&gt; for the same too. Open
source for the win :)&lt;/p&gt;

&lt;p&gt;I also realized than whenever I create a new blog post using &lt;code&gt;hugo new
&amp;lt;filename&amp;gt;.md&lt;/code&gt;, it would create another entry on the left sidebar, and not as a
blog post inside the &amp;lsquo;posts&amp;rsquo; page. The workaround was easy here too: just move
the markdown file to &lt;code&gt;blog&lt;/code&gt; directory, and change a few variables as I&amp;rsquo;ve now
written in &lt;a href=&#34;https://github.com/rushiagr/npf#create-a-new-post&#34;&gt;readme&lt;/a&gt;, and
it works as expected. I should probably write a shell function to do all of
these steps in one go :)&lt;/p&gt;

&lt;p&gt;I had to ensure that I remove all files generated by Pelican, as otherwise one
blog entry was going to the older-Pelican themed page when clicked on its link.
This and a
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/384283276cd960e494f97df9de46fda2f7f58383&#34;&gt;few&lt;/a&gt;
tweaks later, I had my shiny blog ready :)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Tmux session shortcuts</title>
      <link>http://www.rushiagr.com/blog/2016/01/10/tmux-session-shortcuts/</link>
      <pubDate>Sun, 10 Jan 2016 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/10/tmux-session-shortcuts/</guid>
      <description>

&lt;p&gt;Tmux is awesome. But the session management commands are way too long for my
liking. Listing all sessions is &lt;code&gt;tmux list-sessions&lt;/code&gt;, attaching to a session
&lt;code&gt;mysession&lt;/code&gt; is &lt;code&gt;tmux attach -t mysession&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;So I created a few functions and aliases, which can be found
&lt;a href=&#34;https://github.com/rushiagr/myutils/blob/master/aliases/tmux.sh&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The general idea is, all commands start with &lt;code&gt;mx&lt;/code&gt;, which is basically a
shortcut for &amp;lsquo;tMuX&amp;rsquo;. So &lt;code&gt;mxl&lt;/code&gt; is to &amp;lsquo;l&amp;rsquo;ist tmux sessions, &lt;code&gt;mxa&lt;/code&gt; is to &amp;lsquo;a&amp;rsquo;ttach
to a tmux session, etc.&lt;/p&gt;

&lt;p&gt;List all running tmux sessions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ mxl
0: 4 windows (created Sun Jan 10 17:14:11 2016) [89x23] (attached)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see one tmux session. Let&amp;rsquo;s create another tmux session with name
&lt;code&gt;dev&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mx dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all sessions now&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ mxl
0: 4 windows (created Sun Jan 10 17:14:11 2016) [89x23] (attached)
dev: 1 windows (created Sun Jan 10 17:59:30 2016) [89x23] (attached)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To attach to session with name &lt;code&gt;dev&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mxa dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also omit session name, and it will attach to the last session you
attached to.&lt;/p&gt;

&lt;p&gt;If there was no session with name &lt;code&gt;dev2&lt;/code&gt;, and you type this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mxa dev2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will automatically create a session for you and attach you to it.&lt;/p&gt;

&lt;p&gt;To detach:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mxd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I find this &lt;code&gt;mxd&lt;/code&gt; to be easier to type than both &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;d&lt;/code&gt; and &lt;code&gt;tmux
detach&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;installation:e0f68b4969c4b0e373b3bdfb560cffb9&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You just need to copy the content in the above referenced link to &lt;code&gt;~/.bashrc&lt;/code&gt;
file and from a new terminal session things will be ready for you to use :)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Better AWS Command Line Interface</title>
      <link>http://www.rushiagr.com/blog/2016/01/02/better-aws-command-line-interface/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/02/better-aws-command-line-interface/</guid>
      <description>

&lt;p&gt;When I first tried to use the AWS CLIs provided by Amazon, I found them not so
human-friendly. Sure, maybe they&amp;rsquo;re good for automating stuff, but if you just
want to view the public IP of a virtual machine, and the CLI throws this on
your screen for just one VM instance, you&amp;rsquo;re likely not going to be impressed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ aws ec2 describe-instances
{
    &amp;quot;Reservations&amp;quot;: [
        {
            &amp;quot;OwnerId&amp;quot;: &amp;quot;123456789012&amp;quot;,
            &amp;quot;ReservationId&amp;quot;: &amp;quot;r-abcd1234&amp;quot;,
            &amp;quot;Groups&amp;quot;: [],
            &amp;quot;Instances&amp;quot;: [
                {
                    &amp;quot;Monitoring&amp;quot;: {
                        &amp;quot;State&amp;quot;: &amp;quot;disabled&amp;quot;
                    },
                    &amp;quot;PublicDnsName&amp;quot;: &amp;quot;ec2-52-52-52-52.ap-southeast-1.compute.amazonaws.com&amp;quot;,
                    &amp;quot;State&amp;quot;: {
                        &amp;quot;Code&amp;quot;: 16,
                        &amp;quot;Name&amp;quot;: &amp;quot;running&amp;quot;
                    },
                    &amp;quot;EbsOptimized&amp;quot;: false,
                    &amp;quot;LaunchTime&amp;quot;: &amp;quot;2015-12-31T12:59:59.000Z&amp;quot;,
                    &amp;quot;PublicIpAddress&amp;quot;: &amp;quot;52.52.52.52&amp;quot;,
                    &amp;quot;PrivateIpAddress&amp;quot;: &amp;quot;172.31.31.31&amp;quot;,
                    &amp;quot;ProductCodes&amp;quot;: [],
                    &amp;quot;VpcId&amp;quot;: &amp;quot;vpc-1234abcd&amp;quot;,
                    &amp;quot;StateTransitionReason&amp;quot;: &amp;quot;&amp;quot;,
                    &amp;quot;InstanceId&amp;quot;: &amp;quot;i-1234abcd&amp;quot;,
                    &amp;quot;ImageId&amp;quot;: &amp;quot;ami-1234abcd&amp;quot;,
                    &amp;quot;PrivateDnsName&amp;quot;: &amp;quot;ip-172-31-31-31.ap-southeast-1.compute.internal&amp;quot;,
                    &amp;quot;KeyName&amp;quot;: &amp;quot;mykey&amp;quot;,
                    &amp;quot;SecurityGroups&amp;quot;: [
                        {
                            &amp;quot;GroupName&amp;quot;: &amp;quot;rushi-sg&amp;quot;,
                            &amp;quot;GroupId&amp;quot;: &amp;quot;sg-abcd1234&amp;quot;
                        }
                    ],
                    &amp;quot;ClientToken&amp;quot;: &amp;quot;&amp;quot;,
                    &amp;quot;SubnetId&amp;quot;: &amp;quot;subnet-abcd1234&amp;quot;,
                    &amp;quot;InstanceType&amp;quot;: &amp;quot;t2.micro&amp;quot;,
                    &amp;quot;NetworkInterfaces&amp;quot;: [
                        {
                            &amp;quot;Status&amp;quot;: &amp;quot;in-use&amp;quot;,
                            &amp;quot;MacAddress&amp;quot;: &amp;quot;06:f3:82:a1:fb:c5&amp;quot;,
                            &amp;quot;SourceDestCheck&amp;quot;: true,
                            &amp;quot;VpcId&amp;quot;: &amp;quot;vpc-abcd1234&amp;quot;,
                            &amp;quot;Description&amp;quot;: &amp;quot;&amp;quot;,
                            &amp;quot;Association&amp;quot;: {
                                &amp;quot;PublicIp&amp;quot;: &amp;quot;52.52.52.52&amp;quot;,
                                &amp;quot;PublicDnsName&amp;quot;: &amp;quot;ec2-52-52-52-52.ap-southeast-1.compute.amazonaws.com&amp;quot;,
                                &amp;quot;IpOwnerId&amp;quot;: &amp;quot;amazon&amp;quot;
                            },
                            &amp;quot;NetworkInterfaceId&amp;quot;: &amp;quot;eni-abcd1234&amp;quot;,
                            &amp;quot;PrivateIpAddresses&amp;quot;: [
                                {
                                    &amp;quot;PrivateDnsName&amp;quot;: &amp;quot;ip-172-31-31-32.ap-southeast-1.compute.internal&amp;quot;,
                                    &amp;quot;Association&amp;quot;: {
                                        &amp;quot;PublicIp&amp;quot;: &amp;quot;52.52.52.52&amp;quot;,
                                        &amp;quot;PublicDnsName&amp;quot;: &amp;quot;ec2-52-52-52-52.ap-southeast-1.compute.amazonaws.com&amp;quot;,
                                        &amp;quot;IpOwnerId&amp;quot;: &amp;quot;amazon&amp;quot;
                                    },
                                    &amp;quot;Primary&amp;quot;: true,
                                    &amp;quot;PrivateIpAddress&amp;quot;: &amp;quot;172.31.31.31&amp;quot;
                                }
                            ],
                            &amp;quot;PrivateDnsName&amp;quot;: &amp;quot;ip-172-31-31-31.ap-southeast-1.compute.internal&amp;quot;,
                            &amp;quot;Attachment&amp;quot;: {
                                &amp;quot;Status&amp;quot;: &amp;quot;attached&amp;quot;,
                                &amp;quot;DeviceIndex&amp;quot;: 0,
                                &amp;quot;DeleteOnTermination&amp;quot;: true,
                                &amp;quot;AttachmentId&amp;quot;: &amp;quot;eni-attach-abcd1234&amp;quot;,
                                &amp;quot;AttachTime&amp;quot;: &amp;quot;2015-12-31T12:59:59.000Z&amp;quot;
                            },
                            &amp;quot;Groups&amp;quot;: [
                                {
                                    &amp;quot;GroupName&amp;quot;: &amp;quot;mygroup&amp;quot;,
                                    &amp;quot;GroupId&amp;quot;: &amp;quot;sg-abcd1234&amp;quot;
                                }
                            ],
                            &amp;quot;SubnetId&amp;quot;: &amp;quot;subnet-abcd1234&amp;quot;,
                            &amp;quot;OwnerId&amp;quot;: &amp;quot;123456789012&amp;quot;,
                            &amp;quot;PrivateIpAddress&amp;quot;: &amp;quot;172.31.31.31&amp;quot;
                        }
                    ],
                    &amp;quot;SourceDestCheck&amp;quot;: true,
                    &amp;quot;Placement&amp;quot;: {
                        &amp;quot;Tenancy&amp;quot;: &amp;quot;default&amp;quot;,
                        &amp;quot;GroupName&amp;quot;: &amp;quot;&amp;quot;,
                        &amp;quot;AvailabilityZone&amp;quot;: &amp;quot;ap-southeast-1a&amp;quot;
                    },
                    &amp;quot;Hypervisor&amp;quot;: &amp;quot;xen&amp;quot;,
                    &amp;quot;BlockDeviceMappings&amp;quot;: [
                        {
                            &amp;quot;DeviceName&amp;quot;: &amp;quot;/dev/sda1&amp;quot;,
                            &amp;quot;Ebs&amp;quot;: {
                                &amp;quot;Status&amp;quot;: &amp;quot;attached&amp;quot;,
                                &amp;quot;DeleteOnTermination&amp;quot;: true,
                                &amp;quot;VolumeId&amp;quot;: &amp;quot;vol-abcd1234&amp;quot;,
                                &amp;quot;AttachTime&amp;quot;: &amp;quot;2015-12-31T12:59:59.000Z&amp;quot;
                            }
                        }
                    ],
                    &amp;quot;Architecture&amp;quot;: &amp;quot;x86_64&amp;quot;,
                    &amp;quot;RootDeviceType&amp;quot;: &amp;quot;ebs&amp;quot;,
                    &amp;quot;RootDeviceName&amp;quot;: &amp;quot;/dev/sda1&amp;quot;,
                    &amp;quot;VirtualizationType&amp;quot;: &amp;quot;hvm&amp;quot;,
                    &amp;quot;Tags&amp;quot;: [
                        {
                            &amp;quot;Value&amp;quot;: &amp;quot;rushi some VM&amp;quot;,
                            &amp;quot;Key&amp;quot;: &amp;quot;Name&amp;quot;
                        }
                    ],
                    &amp;quot;AmiLaunchIndex&amp;quot;: 0
                }
            ]
        },
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only things I&amp;rsquo;m interested in, after creating a VM is to see it&amp;rsquo;s public
IP, it&amp;rsquo;s flavor, volume size, and instance name. The JSON output which it
throws on my face makes viewing that basic information much harder.&lt;/p&gt;

&lt;p&gt;Fortunately, I am a programmer. So I wrote a simple CLI: &lt;code&gt;lsvm&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm -h
lsvm [-h] [-s] [&amp;lt;name&amp;gt;]
    -h      Prints helptext and exits
    -s      Prints sizes of VM disks in GB, starting with root disk
    &amp;lt;name&amp;gt;  Only prints VM whose name contains &#39;&amp;lt;name&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Installing the CLI is simple. Just run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sh -c &amp;quot;$(wget -q https://raw.githubusercontent.com/rushiagr/public/master/scripts/simplest-aws-cli.sh -O -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ensure that you have internet connection before running this command, and also
make sure that your computer can run &lt;code&gt;pip&lt;/code&gt; commands. Keep your access and
secret key handy.&lt;/p&gt;

&lt;h3 id=&#34;list-all-the-vm-instances:a9c5ded79a164e4b6c02d02a570b1d97&#34;&gt;List all the VM instances&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm
    ID              Name           Status   Flavor        IP      Vols
i-abcd1234     rushi dev m/c      running  t2.micro 52.12.123.123  1
i-abcd1233   rushi pkg builder    running  t2.micro 52.12.123.122  1
i-abcd1232 rushi vanilla devstack running  t2.large 54.12.123.121  1
i-abcd1231  rushi dbaas devstack  running m4.xlarge 52.12.123.120  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all VMs whose name contains word &amp;lsquo;devstack&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm
    ID              Name           Status   Flavor        IP      Vols
i-abcd1232 rushi vanilla devstack running  t2.large 54.12.123.121  1
i-abcd1231  rushi dbaas devstack  running m4.xlarge 52.12.123.120  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show sizes of volumes of instances:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm  -s
    ID                   Name               Status   Flavor        IP       Vols(GB)
i-abcd1234          rushi dev m/c          running  t2.micro 52.12.123.123    [8]
i-abcd1233        rushi pkg builder        running  t2.micro 52.12.123.122    [8]
i-abcd1232      rushi vanilla devstack     running  t2.large 54.12.123.121    [50]
i-abcd1231       rushi dbaas devstack      running m4.xlarge 52.12.123.120    [50]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-vm-instance:a9c5ded79a164e4b6c02d02a570b1d97&#34;&gt;Creating VM instance&lt;/h3&gt;

&lt;p&gt;Creating a VM instance is tough too, with AWS CLI, so I made another command
&lt;code&gt;mkvm&lt;/code&gt; (installed already with the previous script) which is very intuitive for human use. It asks for information in a
step-by-step manner - exactly the way a human sitting in front of a computer should be
treated with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ mkvm
Only Ubuntu image supported as of now
Available flavors: [&#39;t1.micro&#39;, &#39;m1.small&#39;, &#39;m1.medium&#39;, &#39;m1.large&#39;, &#39;m1.xlarge&#39;, &#39;m3.medium&#39;, &#39;m3.large&#39;, &#39;m3.xlarge&#39;, &#39;m3.2xlarge&#39;, &#39;m4.large&#39;, &#39;m4.xlarge&#39;, &#39;m4.2xlarge&#39;, &#39;m4.4xlarge&#39;, &#39;m4.10xlarge&#39;, &#39;t2.micro&#39;, &#39;t2.small&#39;, &#39;t2.medium&#39;, &#39;t2.large&#39;, &#39;m2.xlarge&#39;, &#39;m2.2xlarge&#39;, &#39;m2.4xlarge&#39;, &#39;cr1.8xlarge&#39;, &#39;i2.xlarge&#39;, &#39;i2.2xlarge&#39;, &#39;i2.4xlarge&#39;, &#39;i2.8xlarge&#39;, &#39;hi1.4xlarge&#39;, &#39;hs1.8xlarge&#39;, &#39;c1.medium&#39;, &#39;c1.xlarge&#39;, &#39;c3.large&#39;, &#39;c3.xlarge&#39;, &#39;c3.2xlarge&#39;, &#39;c3.4xlarge&#39;, &#39;c3.8xlarge&#39;, &#39;c4.large&#39;, &#39;c4.xlarge&#39;, &#39;c4.2xlarge&#39;, &#39;c4.4xlarge&#39;, &#39;c4.8xlarge&#39;, &#39;cc1.4xlarge&#39;, &#39;cc2.8xlarge&#39;, &#39;g2.2xlarge&#39;, &#39;cg1.4xlarge&#39;, &#39;r3.large&#39;, &#39;r3.xlarge&#39;, &#39;r3.2xlarge&#39;, &#39;r3.4xlarge&#39;, &#39;r3.8xlarge&#39;, &#39;d2.xlarge&#39;, &#39;d2.2xlarge&#39;, &#39;d2.4xlarge&#39;, &#39;d2.8xlarge&#39;]
Select flavor [&#39;l&#39; to list]: t2.micro
Available key pairs: [&#39;rushi-kp-1&#39;, &#39;prod-keypair&#39;, &#39;test-keypair&#39;]
Select keypair: rushi-kp-1
Available security groups: [&#39;Rushi SecGroup&#39;, &#39;openToAll&#39;, &#39;Rushi SG&#39;, &#39;Rushi Devstack SG&#39;]
Select security group. None to create new one: Rushi SecGroup
Enter root volume size in GBs: 8
r@rushi:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ending-notes:a9c5ded79a164e4b6c02d02a570b1d97&#34;&gt;Ending notes&lt;/h3&gt;

&lt;p&gt;The AWS CLI was created maybe to help automation, but they&amp;rsquo;re not quite
suitable for human use. Here is my attempt to show to the world how the things
could be made easier for human consumption. I use these commands quite a lot
when I want to quickly create a VM, or want to get information about already
created VMs. Logging in into the console is way too slow for my liking.&lt;/p&gt;

&lt;p&gt;Just to recap:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The commands are shorter, so you have to type less&lt;/li&gt;
&lt;li&gt;The output is concise - only important information is included&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkvm&lt;/code&gt; provides you with information which you&amp;rsquo;ll require while creating the
instances, e.g. security group names, etc.&lt;/li&gt;
&lt;li&gt;Nowhere do you need to specify (hexadecimal) IDs while creating VMs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I just spent a few hours over the weekend to get this working. So obviously
the code is going to have rough edges, frowned-upon software practices, and a
lot of unhandled edge cases. I&amp;rsquo;ll be pretty excited if you want to help wit
the idea! I&amp;rsquo;ve created a repository at
&lt;a href=&#34;http://github.com/rushiagr/aclih&#34;&gt;http://github.com/rushiagr/aclih&lt;/a&gt; where
please feel free to submit pull requests or issues. Interested in writing
&amp;lsquo;rmvm&amp;rsquo; to delete VM anyone? :)&lt;/p&gt;

&lt;p&gt;Thank you :)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Build VM Images using Diskimage-builder</title>
      <link>http://www.rushiagr.com/blog/2016/01/02/build-vm-image-using-diskimage-builder/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/02/build-vm-image-using-diskimage-builder/</guid>
      <description>&lt;p&gt;OpenStack has this nice tool &lt;a href=&#34;https://github.com/openstack/diskimage-builder&#34;&gt;diskimage-builder&lt;/a&gt;to create virtual machine images without the need
of a cloud. These vm images can then be uploaded to cloud (e.g. in Glance for
OpenStack cloud), and they become immediately usable. You can also create VMs in
virtualbox from these images (though I don&amp;rsquo;t remember exact steps to make the
image work with VirtualBox. Do let me know if you get the VM working with
VirtualBox/Vagrant)&lt;/p&gt;

&lt;p&gt;Here I&amp;rsquo;ll describe ways to create a bare cloud-uploadable Ubuntu image. I will
also provide information as to how to build an image which will have some
packages pre-installed in them. Note that the commands here will create only
one image file as opposed to three &amp;ndash; one each for ramdisk, kernel and machine image.&lt;/p&gt;

&lt;p&gt;Prerequisites&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install qemu-utils
git clone http://github.com/openstack/diskimage-builder
cd diskimage-builder
sudo pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the binaries are in bin filder. You can go in the &lt;code&gt;bin\&lt;/code&gt; directory to
execute diskimage-builder commands, or add that directory to your &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create bare Ubuntu image, which you can directly upload to a cloud e.g.
OpenStack.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disk-image-create -a amd64 -o ubuntu-amd64 vm ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Image generated will be of name &lt;code&gt;ubuntu-amd64.qcow2&lt;/code&gt;. Such an image will be for
same OS version as your host Ubuntu version. If you want
to build an image against a different OS version, specify
&lt;code&gt;DIB_RELEASE=&amp;lt;releasename&amp;gt;&lt;/code&gt; as a prefix to the command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DIB_RELEASE=trusty disk-image-create -a amd64 -o ubuntu-amd64 vm ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create an Ubuntu VM image which you can boot via KVM or VirtualBox/Vagrant.
You will need to manually
add public keys to authorized_keys for a user inside that VM.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disk-image-create -o base -a amd64 vm base ubuntu cloud-init-nocloud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create an image with &lt;code&gt;mysql-server&lt;/code&gt; and &lt;code&gt;tmux&lt;/code&gt; package (and their dependencies) installed inside the image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;disk-image-create -a amd64 -o ubuntu-amd64 -p mysql-server,tmux vm ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How to upload image to glance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;glance image-create --name dib-ubuntu --disk-format=qcow2 --container-format=bare &amp;lt; img/ubuntu-amd64.qcow2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;ubuntu-amd64.qcow2&lt;/code&gt; is the image to upload.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Better way to view MySQL tables</title>
      <link>http://www.rushiagr.com/blog/2015/12/12/better-way-to-view-mysql-tables/</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2015/12/12/better-way-to-view-mysql-tables/</guid>
      <description>

&lt;h3 id=&#34;the-problem:1a3447b8e3a40d86311532717f0ef6f7&#34;&gt;The problem&lt;/h3&gt;

&lt;p&gt;You are trying to print a MySQL table with a large number of columns, with
&lt;code&gt;SELECT *&lt;/code&gt; command. You type &lt;code&gt;SELECT * FROM mysql.user LIMIT 1&lt;/code&gt;, and your terminal
becomes &lt;a href=&#34;https://raw.githubusercontent.com/rushiagr/public/master/img/mysql-table-with-many-rows-messy.png&#34;&gt;this&lt;/a&gt;.
If you wanted to view more than one row, you&amp;rsquo;re in a trouble :)&lt;/p&gt;

&lt;h3 id=&#34;the-solution:1a3447b8e3a40d86311532717f0ef6f7&#34;&gt;The solution&lt;/h3&gt;

&lt;p&gt;Run MySQL with this option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql --pager=&amp;quot;less --chop-long-lines --quit-if-one-screen --no-init&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make your table display only the rows it can in the current screen, something like &lt;a href=&#34;https://raw.githubusercontent.com/rushiagr/public/master/img/mysql-with-less-pager-neat.png&#34;&gt;this&lt;/a&gt;. You can
use the arrow keys to move sideways to view the hidden column. Pressing the &amp;lsquo;right&amp;rsquo; arrow key will move half page towards right. Neat, isn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;You can create an alias for mysql:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Using shorter version of &#39;less&#39; flags mentioned above
alias mysql=&#39;mysql -SFX&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can put the above line in your &lt;code&gt;~/.bashrc&lt;/code&gt; file to load this alias
in every new terminal session.&lt;/p&gt;

&lt;h3 id=&#34;bonus-point-for-vim-users:1a3447b8e3a40d86311532717f0ef6f7&#34;&gt;Bonus point for Vim users&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;less&lt;/code&gt; allows using keys &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; for scrolling down and scrolling up. Unfortunately, you cannot directly use keys &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; to move sideways using &lt;code&gt;less&lt;/code&gt;. Fortunately, you can map &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; to move left or right, respectively. Here&amp;rsquo;s how to do that:&lt;/p&gt;

&lt;p&gt;Create a file &lt;code&gt;.lesskey&lt;/code&gt; in your home directory, with the following contents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;l noaction 10\e)
h noaction 10\e)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run this command, to generate &lt;code&gt;~/.less&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lesskey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate a binary file which &lt;code&gt;less&lt;/code&gt; understands. If you now start a new MySQL terminal session (of course with the above said &lt;code&gt;--pages&lt;/code&gt; flag), you can use Vim&amp;rsquo;s &lt;code&gt;HJKL&lt;/code&gt; movements. Here I have specified to move 10 characters to the right if you make one &amp;lsquo;right&amp;rsquo; Vim movement.&lt;/p&gt;

&lt;h3 id=&#34;quick-setup-script:1a3447b8e3a40d86311532717f0ef6f7&#34;&gt;Quick setup script&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t want to do the above stuff manually? Just run this command and your computer will be set up in a second!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh -c &amp;quot;$(wget -q https://raw.githubusercontent.com/rushiagr/public/master/scripts/mysql-pretty-table.sh -O -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that changes will take effect from a new shell session (or you can run &lt;code&gt;source ~/.bashrc&lt;/code&gt; if you want things to work in the current session too.&lt;/p&gt;

&lt;h3 id=&#34;more-information:1a3447b8e3a40d86311532717f0ef6f7&#34;&gt;More information&lt;/h3&gt;

&lt;p&gt;Find more information at below links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://unix.stackexchange.com/a/169969/91602&#34;&gt;About mapping &amp;lsquo;h&amp;rsquo; and &amp;lsquo;k&amp;rsquo; to Vim movements in &amp;lsquo;less&amp;rsquo;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/a/6422698/1143173&#34;&gt;About using &amp;lsquo;less&amp;rsquo; as MySQL pager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Quick JustDial scraper</title>
      <link>http://www.rushiagr.com/blog/2015/09/14/quick-justdial-scraper/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2015/09/14/quick-justdial-scraper/</guid>
      <description>&lt;p&gt;So my friend asked me to scrape data from JustDial and give it to him in an excel sheet.
I thought let&amp;rsquo;s give it a try. He needed
name of firm, address and phone number of any JustDial URL he wants to scrape. After effectively
around 4 hours of work, the below script was created.&lt;/p&gt;

&lt;p&gt;Note that the script is dirty. You need to edit the jd_url to search any other URL. Also,
the looping will go on forever, so you have to keep checking the file size of generated
&amp;lsquo;data.csv&amp;rsquo; file, and when you&amp;rsquo;re sure it&amp;rsquo;s not increasing any more, kill the script by
pressing CTRL+C. This script works as of today. Tomorrow it might not. Also, excuse
stray comments/bad formatting of code. I&amp;rsquo;m not sure I want to clean it right now :)&lt;/p&gt;

&lt;p&gt;Feel free to use/modify it the way you want.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# PIP requirements: requests, beautifulsoup4
import requests
from bs4 import BeautifulSoup
import json
import csv

jd_url = &amp;quot;http://www.justdial.com/Bangalore/Car-Hire-%3Cnear%3E-Shanthinagar&amp;quot;

# Split http/https prefix if any
# TODO: work on URLs which dont&#39; have the CT part in URL
jd_url = jd_url.split(&#39;http://www.justdial.com/&#39;)[-1].split(&#39;https://www.justdial.com/&#39;)[-1]
city, search, cat_id = &#39;&#39;, &#39;&#39;, &#39;&#39;
split_vals = jd_url.split(&#39;/&#39;)
if len(split_vals) == 3:
    city, search, cat_id = jd_url.split(&#39;/&#39;)
    cat_id = cat_id.split(&#39;-&#39;)[-1]
elif len(split_vals) == 2:
    city, search = jd_url.split(&#39;/&#39;)
search = search.replace(&#39;-&#39;, &#39;+&#39;)


with open(&#39;data.csv&#39;, &#39;w&#39;) as f:
    #writer = csv.writer(f, delimiter=&#39;,&#39;, quoting=csv.QUOTE_ALL, lineterminator=&#39;\n&#39;)

    page = 1
    while True:
        print &#39;page&#39;, page
        resp = requests.get(&#39;http://www.justdial.com&#39;+&#39;/functions/ajxsearch.php?national_search=0&amp;amp;act=pagination&amp;amp;city={0}&amp;amp;search={1}&amp;amp;where=&amp;amp;catid={2}&amp;amp;psearch=&amp;amp;prid=&amp;amp;page={3}&#39;.format(city, search, cat_id, page))
        markup = resp.json()[&#39;markup&#39;].replace(&#39;\/&#39;, &#39;/&#39;)
        soup = BeautifulSoup(markup, &#39;html.parser&#39;)


        for thing in soup.find_all(&#39;section&#39;):
            csv_list = []
            if thing.get(&#39;class&#39;)==[u&#39;jcar&#39;]:
                # Company name
                for a_tag in thing.find_all(&#39;a&#39;):
                    if a_tag.get(&#39;onclick&#39;)==&amp;quot;_ct(&#39;clntnm&#39;, &#39;lspg&#39;);&amp;quot;:
                        csv_list.append(a_tag.get(&#39;title&#39;))

                # Address
                for span_tag in thing.find_all(&#39;span&#39;):
                    if span_tag.get(&#39;class&#39;)==[u&#39;mrehover&#39;, u&#39;dn&#39;]:
                        csv_list.append(span_tag.get_text().strip())

                # Phone number
                for a_tag in thing.find_all(&#39;a&#39;):
                    if a_tag.get(&#39;href&#39;).startswith(&#39;tel:&#39;):
                        csv_list.append(a_tag.get(&#39;href&#39;).split(&#39;:&#39;)[-1])


                csv_list = [&#39;&amp;quot;&#39;+item+&#39;&amp;quot;&#39; for item in csv_list]
                writeline = &#39;,&#39;.join(csv_list)+&#39;\n&#39;
                f.write(&#39;,&#39;.join(csv_list)+&#39;\n&#39;)
        page+=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>OpenStack Keystone with Cassandra Database in DevStack</title>
      <link>http://www.rushiagr.com/blog/2015/09/10/openstack-keystone-with-cassandra-database-in-devstack/</link>
      <pubDate>Thu, 10 Sep 2015 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2015/09/10/openstack-keystone-with-cassandra-database-in-devstack/</guid>
      <description>

&lt;p&gt;Using Cassandra as backing database for OpenStack Keystone was our solution
to multi-region deployment problem of OpenStack cloud. This blog post is not
to discuss the problem. We are talking about how to have a development
environment to play around with Keystone working with a dev Cassandra deployment.&lt;/p&gt;

&lt;h4 id=&#34;just-run-this-script-and-you-re-all-set:ac993324848a8aead891c139adf0f8b7&#34;&gt;&amp;ldquo;Just run this script and you&amp;rsquo;re all set!&amp;rdquo;&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;ve put together all commands into a script which can be found here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/rushiagr/keystone-cassandra/master/keystone-cassandra.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a fresh Ubuntu VM, just copy this script into that machine and
execute it. Give it 15-20 mins at least (depending upon your internet connection), and it will set up:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DevStack with Keystone installed and running with all the data stored in/fetched from local Cassandra installation&lt;/li&gt;
&lt;li&gt;A Cassandra development cluster (CCM) with 5 nodes and replication factor of 3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, you will need Internet access inside the VM. Also, give the VM around
3GB of RAM, else things might not work properly. Actually, if you change the
Cassandra configuration to one node instead of 5, probably 2 GB will suffice. But I&amp;rsquo;ve
not tried it. (Let me know if you tried it and it works!)&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remember, this is a dev cluster. It&amp;rsquo;s not supposed to be used in production. Hell, it&amp;rsquo;s not even ready for it.&lt;/li&gt;
&lt;li&gt;Keystone is running on 127.0.0.1. I&amp;rsquo;ve done this so that it will work on any person&amp;rsquo;s VM&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve tested only on a Ubuntu Trusty VM, on Amazon EC2 m4.large instance which has 8 GB RAM. OpenStack on AWS &amp;ndash; ironic, isn&amp;rsquo;t it? :)&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m using Java which comes with Ubuntu&amp;rsquo;s APT packages. In production one is supposed to use Oracle Java as per Cassandra folks.&lt;/li&gt;
&lt;li&gt;The code for this script is located at &lt;code&gt;https://github.com/rushiagr/keystone/tree/liberty-cassandra&lt;/code&gt;, i.e. on &lt;code&gt;liberty-cassandra&lt;/code&gt; branch. Note that this work is currently based upon Keystone&amp;rsquo;s Liberty code as on first week of June. It might not work directly with latest code as it might require fixing imports which might have become outdated. However, I don&amp;rsquo;t think it&amp;rsquo;s going to take more than an hour to make it work with latest code; just that I don&amp;rsquo;t have enough motivation right now to keep the code updated with &amp;lsquo;latest&amp;rsquo; all the time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;credits:ac993324848a8aead891c139adf0f8b7&#34;&gt;Credits&lt;/h4&gt;

&lt;p&gt;This work was done by the &amp;lsquo;distributed database&amp;rsquo; team of 4 people: Ajaya Agrawal, Rushi Agrawal (me), Vivek Dhayaal and Yogeshwar Shenoy, listed in alphabetical order. And obviously Reliance, for providing us an opportunity to work on this thing.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Apache mod_wsgi parallelization notes</title>
      <link>http://www.rushiagr.com/blog/2015/07/24/apache-mod_wsgi-parallelization-notes/</link>
      <pubDate>Fri, 24 Jul 2015 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2015/07/24/apache-mod_wsgi-parallelization-notes/</guid>
      <description>

&lt;p&gt;This is my notes on
&lt;a href=&#34;https://code.google.com/p/modwsgi/wiki/ProcessesAndThreading&#34;&gt;&amp;lsquo;Processes and Threading&amp;rsquo;&lt;/a&gt;
doc by the author of mod_wsgi module of Apache. This blog post just serves as a &amp;lsquo;quick refresher&amp;rsquo;, and
is only useful if you have read the original document but it&amp;rsquo;s been too long since you
read it :)&lt;/p&gt;

&lt;h2 id=&#34;apache-with-mod-wsgi:d8164b9dd960e232cff9349f39ccb12e&#34;&gt;Apache with mod_wsgi&lt;/h2&gt;

&lt;p&gt;A Python application can run with multiple processes as well as multiple threads
with mod_wsgi.&lt;/p&gt;

&lt;h3 id=&#34;prefork-multiprocessing-module:d8164b9dd960e232cff9349f39ccb12e&#34;&gt;Prefork multiprocessing module&lt;/h3&gt;

&lt;p&gt;Apache creates multiple processes, and each request is handled by one process.
A process only handles one request at a time.
This means, if you have set number of processes to 1, there will be only one
request handeled at a time overall.&lt;/p&gt;

&lt;h3 id=&#34;worker-multiprocessing-module:d8164b9dd960e232cff9349f39ccb12e&#34;&gt;Worker multiprocessing module&lt;/h3&gt;

&lt;p&gt;Multiple processes, and multiple threads in each processa.
Even if a process is handling a request, another thread in the same process
can handle one more request.
You might need some synchronization primitive to make sure multiple threads
of same process don&amp;rsquo;t corrupt shared memory (only occurs when shared memory
is mutated)&lt;/p&gt;

&lt;h3 id=&#34;but-gil:d8164b9dd960e232cff9349f39ccb12e&#34;&gt;But GIL?&lt;/h3&gt;

&lt;p&gt;Python GIL problem is largely alleviated with mod_wsgi since multiple processes
can handle requests, and GIL has impact ranging to only one process. One more
point to note is that the apache code which maps a URL/request to a wsgi application,
and the code which maps static file URLs to actual static files to serve is
written in C, and is free from GIL.&lt;/p&gt;

&lt;p&gt;In the wsgi python code, two environment variables: &amp;lsquo;wsgi.multithread&amp;rsquo; and
&amp;lsquo;wsgi.multiprocess&amp;rsquo; will define which of the above two modules are going to be
used.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Docker quick start notes</title>
      <link>http://www.rushiagr.com/blog/2015/06/07/docker-quick-start-notes/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2015/06/07/docker-quick-start-notes/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Update *: Blog updated to use latest way to install docker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After reading about docker and containers, I thought let&amp;rsquo;s try them out.
Here are my notes. Obviously all of them are taken from Internet. Maybe this
collection here will help someone start with docker faster than spending time
searching all over the internet.&lt;/p&gt;

&lt;p&gt;It assumes your base OS is Ubuntu 14.04 Trusty Tahr (when was the last time
you saw the codename spelled &amp;lsquo;Trusty Tahr&amp;rsquo; and not &amp;lsquo;Trusty&amp;rsquo;? :) ).&lt;/p&gt;

&lt;p&gt;Ensure kernel version is more than 3.10&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uname -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install docker&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sSL https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See docker version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pull an Ubuntu Trusty docker image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker pull ubuntu:14.04
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, you can search for a docker image &amp;lsquo;tutorial&amp;rsquo; in docker&amp;rsquo;s repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker search tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And them pull a docker image &amp;lsquo;tutorial&amp;rsquo; by user &amp;lsquo;learn&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker pull learn/tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all docker images present in the system&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run a docker image, and execute command &amp;lsquo;echo &amp;ldquo;hello world&amp;rdquo;&amp;rsquo; in the docker
container created out of that image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run ubuntu:14.04 echo &amp;quot;hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Container information is stored in /var/lib/docker&lt;/p&gt;

&lt;p&gt;If you run the above command multiple times, it will create a new container
each time.&lt;/p&gt;

&lt;p&gt;To know the ID of the last container, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker ps -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To list all the running containers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the above command will not show the container we last run, because
the container which we ran last time terminated just after it finished
executing echo command.&lt;/p&gt;

&lt;p&gt;Create a new docker image by name &lt;code&gt;&amp;lt;yourname&amp;gt;/echo&lt;/code&gt; by &amp;lsquo;committing&amp;rsquo; the last
container which you ran&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker commit &amp;lt;container ID&amp;gt; &amp;lt;yourname&amp;gt;/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now running &lt;code&gt;sudo docker images&lt;/code&gt; will list you two images instead of one&lt;/p&gt;

&lt;p&gt;Now you can run this new docker container like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run &amp;lt;yourname&amp;gt;/echo ls -alrth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we installed something, or created a file in the old container, it will
be visible now in this container too.&lt;/p&gt;

&lt;p&gt;Get more information about a docker image or a running container:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker inspect &amp;lt;yourname&amp;gt;/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To push docker image to docker repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker push &amp;lt;yourname&amp;gt;/echo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To download ubuntu Trusty base image if not present locally, and open a shell session into it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker run -t -i ubuntu:14.04 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-i i.e. &amp;ndash;interactive=false, keeps STDIN open even if not attached&lt;/p&gt;

&lt;p&gt;-t i.e. &amp;ndash;tty=false allocates a pseudo tty&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry what these mean. If you add these options, you&amp;rsquo;ll see that
you already get logged in into the container shell, and the container
only dies off once you exit from that session (usually by writing &lt;code&gt;exit&lt;/code&gt;
or pressing CTRL + D.&lt;/p&gt;

&lt;p&gt;To remove an image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker rmi learn/tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;things-not-covered-in-this-tutorial:49285dca7b53d383ade641738736c634&#34;&gt;Things not covered in this tutorial:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create your own custom docker images and share with other people:
&lt;a href=&#34;https://docs.docker.com/userguide/dockerimages/&#34;&gt;https://docs.docker.com/userguide/dockerimages/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Cache APT packages with Squid proxy</title>
      <link>http://www.rushiagr.com/blog/2015/06/05/cache-apt-packages-with-squid-proxy/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2015/06/05/cache-apt-packages-with-squid-proxy/</guid>
      <description>

&lt;p&gt;TL;DR: Know how to install and set up Squid proxy, so that you can cache packages,
and hence save bandwidth if you want to install those packages again and again.
Also works if you are already behind a squid proxy.&lt;/p&gt;

&lt;h2 id=&#34;problem-repetitive-download-slow:4536ae7fffd586a321b78960b2283427&#34;&gt;Problem: Repetitive download. Slow.&lt;/h2&gt;

&lt;p&gt;If you deal with virtual machines a lot, you might know the pain of
managing packages on each one of them. Every time I had to create a new VM,
I would run &lt;code&gt;apt-get update&lt;/code&gt; (to get information about all the latest packages
available for my Ubuntu system), &lt;code&gt;apt-get dist-upgrade&lt;/code&gt; (to install latest
versions of all packages already installed), and also install some packages
not present in stock Ubuntu image, like &lt;code&gt;git&lt;/code&gt; (yes, it&amp;rsquo;s 2015
and Ubuntu still doesn&amp;rsquo;t come pre-installed with &lt;code&gt;git&lt;/code&gt;), &lt;code&gt;ipython&lt;/code&gt;, &lt;code&gt;bwm-ng&lt;/code&gt;
and some others. This would mean I&amp;rsquo;m downloading the same file over the network
over and over again. Now there are two ways to deal with this situation&lt;/p&gt;

&lt;h2 id=&#34;solution-1-local-ubuntu-mirror-super-fast-but-unweildy:4536ae7fffd586a321b78960b2283427&#34;&gt;Solution 1: Local Ubuntu mirror - Super fast but unweildy&lt;/h2&gt;

&lt;p&gt;The first solution is to download a complete Ubuntu mirror to your computer.
That is, download ALL Ubuntu packages to your system, and then it is super fast.
The first download will be close to 80GBs though. It would have been fine for
me to download 80GBs, but you&amp;rsquo;ll realize the problem when you want to update
this mirror. If you are trying to update the local mirror every week or so,
each time it will ask you to download around 5GB of data. And that unfortunately
is too much for me to download every few days.&lt;/p&gt;

&lt;h2 id=&#34;solution-2-cache-with-squid-proxy-just-about-perfect:4536ae7fffd586a321b78960b2283427&#34;&gt;Solution 2: Cache with Squid proxy - Just about perfect&lt;/h2&gt;

&lt;p&gt;The other alternative is use a local cache, using Squid proxy. It works like
just another cache: if you want a package of a specific version, Squid will connect
over the internet to find more details about that file. Once it gets these details,
it checks if a file (package) matching those details is already present in the local
cache. If it is locally present, it just sends this local copy to the requester.
So the total Internet bandwidth utilised is only to get the file details, which
is miniscule (Bytes) compared to downloading the whole package (MBs)j. If the
details doesn&amp;rsquo;t match any locally cached packages, the proxy fetches that package
from internet and responds to the requester.&lt;/p&gt;

&lt;h2 id=&#34;practical:4536ae7fffd586a321b78960b2283427&#34;&gt;Practical!&lt;/h2&gt;

&lt;p&gt;Enough of theory, let&amp;rsquo;s put theory to some practice :)&lt;/p&gt;

&lt;p&gt;All of the commands below are run on Ubuntu 14.04 (Trusty).&lt;/p&gt;

&lt;p&gt;Install Squid proxy package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install squid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure: replace &lt;code&gt;/etc/squid3/squid.conf&lt;/code&gt; and make it contain these lines.
You will need root permissions to edit this file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;acl localhost src 127.0.0.1/32 ::1
acl to_localhost dst 127.0.0.0/8 0.0.0.0/32 ::1
acl localnet src 10.0.0.0/8 # RFC1918 possible internal network
acl localnet src 172.16.0.0/12  # RFC1918 possible internal network
acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
acl SSL_ports port 443
acl Safe_ports port 80      # http
acl Safe_ports port 21      # ftp
acl Safe_ports port 443     # https
acl Safe_ports port 70      # gopher
acl Safe_ports port 210     # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280     # http-mgmt
acl Safe_ports port 488     # gss-http
acl Safe_ports port 591     # filemaker
acl Safe_ports port 777     # multiling http
acl CONNECT method CONNECT
http_access allow manager localhost
http_access deny manager
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128
maximum_object_size 1024 MB
cache_dir aufs /var/spool/squid3 5000 24 256
coredump_dir /var/spool/squid3
refresh_pattern ^ftp:       1440    20% 10080
refresh_pattern ^gopher:    1440    0%  1440
refresh_pattern -i (/cgi-bin/|\?) 0 0%  0
refresh_pattern (Release|Packages(.gz)*)$      0       20%     2880
refresh_pattern .       0   20% 4320
refresh_all_ims on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need to know or remember what is happening here right now. Just copy
and paste :)&lt;/p&gt;

&lt;p&gt;Restart the service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service squid3 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now squid service is running, and listening on port 3128. You can use any IP
of your base system which is accessible from your VMs to get packages
via this cache. I give my base system an IP of &lt;code&gt;192.168.100.1&lt;/code&gt;, so I just
need to do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export http_proxy=http://192.168.100.1:3128/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to source the proxy environment variable, which we&amp;rsquo;ll use to point the APT system
to, to fetch packages from. To test if you proxy is working fine locally,
you can provide &lt;code&gt;127.0.0.1&lt;/code&gt;, your localhost IP instead.&lt;/p&gt;

&lt;p&gt;And after that can start using the cache to download packages by just passing &lt;code&gt;-E&lt;/code&gt;
option to the &lt;code&gt;sudo&lt;/code&gt; command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -E apt-get install &amp;lt;your package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sure there are alternative ways of using the proxy, but this is my favourite!&lt;/p&gt;

&lt;h2 id=&#34;i-m-already-behind-a-proxy:4536ae7fffd586a321b78960b2283427&#34;&gt;I&amp;rsquo;m already behind a proxy!&lt;/h2&gt;

&lt;p&gt;Worry not, add these lines to &lt;code&gt;squid.conf&lt;/code&gt;, restart squid and you&amp;rsquo;re all set for using the
brand new proxy instead of the old one :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cache_peer 10.135.121.138 parent 3128 0 no-query no-digest
never_direct allow all
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ending-thoughts:4536ae7fffd586a321b78960b2283427&#34;&gt;Ending thoughts&lt;/h2&gt;

&lt;p&gt;You can go to &lt;code&gt;/var/spool/squid3&lt;/code&gt; and run a &lt;code&gt;du -sch&lt;/code&gt; to see the total size
of cached files. I find it easy sometimes to calculate the total size of
files this directory holds, to make sure the proxy is working correctly &amp;ndash;
if you can &amp;lsquo;new&amp;rsquo; packages being downloaded, but the size of this directory
is not increasing, they&amp;rsquo;re not coming via this proxy, and you need to figure
out why :)&lt;/p&gt;

&lt;p&gt;One more important thing I should tell is that the configuration file
we&amp;rsquo;ve used not only caches APT packages, but also any static files
hosted anywhere on the internet. So if let&amp;rsquo;s say you want to download an
Ubuntu ISO or some other ISO multiple times in your setup (say, inside VMs),
you can cache the ISO file as well with our current setup.&lt;/p&gt;

&lt;p&gt;Tell me what is the size your &lt;code&gt;/var/spool/squid3/&lt;/code&gt; directory has
reached. Mine is at 1GB right now after a year of it&amp;rsquo;s usage.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;-Rushi&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Puppet installation from modules</title>
      <link>http://www.rushiagr.com/blog/2014/09/14/puppet-installation-from-modules/</link>
      <pubDate>Sun, 14 Sep 2014 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2014/09/14/puppet-installation-from-modules/</guid>
      <description>&lt;p&gt;A quick example of how to use Puppet to install and manage MySQL. We&amp;rsquo;ll
download required Puppet modules from their git repositories.&lt;/p&gt;

&lt;p&gt;Again, everything is tried on Ubuntu (14.04).&lt;/p&gt;

&lt;p&gt;Make sure &lt;code&gt;hostname -f&lt;/code&gt; shows your FQDN. Then install puppet&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install puppet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;git submodules&lt;/code&gt; to manage different git repositories. But first,
create our own repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir puppet-mysql
cd puppet-mysql
git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Puppet modules &lt;code&gt;stdlib&lt;/code&gt; and &lt;code&gt;mysql&lt;/code&gt; into directory &lt;code&gt;modules&lt;/code&gt; as git
submodules.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/puppetlabs/puppetlabs-stdlib.git modules/stdlib
git submodule add https://github.com/puppetlabs/puppetlabs-mysql.git modules/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a site.pp file in the root directory of this repository, with the following contents&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node default {
    class { &#39;mysql::server&#39;:
        root_password =&amp;gt; &#39;nova&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll apply this &lt;code&gt;site.pp&lt;/code&gt; file to the system. As our modules directory is
different from Puppet&amp;rsquo;s default, we&amp;rsquo;ll need to specify that while running
Puppet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo puppet apply site.pp --modulepath modules/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see the action in more detail, also pass the &lt;code&gt;--debug&lt;/code&gt; option to the above
execution&lt;/p&gt;

&lt;p&gt;And you&amp;rsquo;re all set.&lt;/p&gt;

&lt;p&gt;Now from your commandline, you can try to access mysql and it will work!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -uroot -pnova
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done! Cheers!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>OpenStack Unit Testing Nuggets</title>
      <link>http://www.rushiagr.com/blog/2014/09/05/openstack-unit-testing-nuggets/</link>
      <pubDate>Fri, 05 Sep 2014 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2014/09/05/openstack-unit-testing-nuggets/</guid>
      <description>

&lt;p&gt;A small post about little things I found out while running unit tests in
OpenStack.&lt;/p&gt;

&lt;h2 id=&#34;unit-testing-setup:ef0fed5d80bf1672d3195cb4c6973c84&#34;&gt;Unit-testing setup&lt;/h2&gt;

&lt;p&gt;Everybody knows &lt;code&gt;./run_tests.sh&lt;/code&gt; is used to run the unit tests of an OpenStack
project. But, you require to install dependencies before doing it. And
installing dependencies might not always succeed. So make sure you install
these packages before running &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential libssl-dev libffi-dev \
    python-dev libxslt1-dev libpq-dev python-mysqldb \
    libmysqlclient-dev libvirt-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Atleast &lt;code&gt;cinder&lt;/code&gt; and &lt;code&gt;nova&lt;/code&gt; dependencies will get installed properly after
this.&lt;/p&gt;

&lt;h2 id=&#34;run-tests-frequently-used-commands:ef0fed5d80bf1672d3195cb4c6973c84&#34;&gt;run_tests frequently used commands&lt;/h2&gt;

&lt;p&gt;To force the tests to NOT run in a virtual environment, even if it is present:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh -N
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Force a clean rebuild of virtual environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run only PEP8 checks&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run PEP8 checks only on the files which have been changed since last commit&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh -8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run all tests from a specific file only, e.g. nova/tests/test_utils.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh nova.tests.test_utils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run all tests of only a specific class inside a test file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh nova.tests.test_utils.ResourceFilterTestCase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run only a specific test&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh nova.tests.test_utils.ResourceFilterTestCase.test_resource_filtering
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wildcards-while-running-the-tests:ef0fed5d80bf1672d3195cb4c6973c84&#34;&gt;Wildcards while running the tests&lt;/h2&gt;

&lt;p&gt;Frequently you&amp;rsquo;ll find yourself testing only a couple of tests. In such cases,
a wildcard will save you from typing the whole path of the test. The below
command will also run &lt;code&gt;test_resource_filtering&lt;/code&gt; test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./run_tests.sh nova.tests.*resource_filt*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I currently don&amp;rsquo;t know how to make a test work without adding &lt;code&gt;nova.tests&lt;/code&gt;
before it&lt;/p&gt;

&lt;h2 id=&#34;run-tests-is-not-happy:ef0fed5d80bf1672d3195cb4c6973c84&#34;&gt;run_tests is not happy&lt;/h2&gt;

&lt;p&gt;Sometimes you&amp;rsquo;ll see running &lt;code&gt;./run_tests.sh&lt;/code&gt; can throw a lot of lines of
ununderstandable gibberish on your screen. In the end it will say &lt;code&gt;testr
failed&lt;/code&gt;, but it won&amp;rsquo;t give an indication of where it failed and why. I have
seen that this happens due to only one of the following two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Syntax error&lt;/em&gt;: There is a syntax error in your code.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Dependencies outdated&lt;/em&gt;: Dependencies in your virtual environment is
outdated. In such cases, you will need to recreate a virtual environment with
latest packages. Or better: just update the virtual environment with the latest
packages using this command:&lt;/p&gt;

&lt;p&gt;./run_tests.sh -u&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;UPDATE: I&amp;rsquo;ve seen that nowadays it doesn&amp;rsquo;t throw a lot of gibberish, but just
says &amp;lsquo;testr failed&amp;rsquo;, without any error log or stacktrace. This is the same
situation &amp;ndash; can only happen when there is a syntax error, or if the
dependencies are outdated.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it for now.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>iSCSI administration on Ubuntu - Quick Start</title>
      <link>http://www.rushiagr.com/blog/2014/09/05/iscsi-administration-on-ubuntu-quick-start/</link>
      <pubDate>Fri, 05 Sep 2014 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2014/09/05/iscsi-administration-on-ubuntu-quick-start/</guid>
      <description>

&lt;p&gt;This post get&amp;rsquo;s you started with iSCSI administration on an Ubuntu machine.
Although I have used Ubuntu Trusty (14.04) version, it should work with Precise
(12.04) too, with the latest packages.&lt;/p&gt;

&lt;h4 id=&#34;prerequisites:929de0ff9dbcd4c871b27335ee5a3706&#34;&gt;Prerequisites&lt;/h4&gt;

&lt;p&gt;Make sure you have atleast a little idea of what these terms
mean: iSCSI, LUN, IQN, initiator, target and portal. Google and wikipedia are
your friends.&lt;/p&gt;

&lt;h4 id=&#34;a-quick-summary:929de0ff9dbcd4c871b27335ee5a3706&#34;&gt;A quick summary:&lt;/h4&gt;

&lt;p&gt;There are two parts of iSCSI communication - initiator and target. So let&amp;rsquo;s take an example. There is a storage server in your
company, where you have a &amp;lsquo;drive&amp;rsquo; for your team. The storage server is the
&amp;lsquo;target&amp;rsquo;, and your laptop, where you&amp;rsquo;ll mount the drive to access it&amp;rsquo;s contents
is the &amp;lsquo;initiator&amp;rsquo;. In other words, target is like a &amp;lsquo;server&amp;rsquo; which stores
data, and allows initiators (think &amp;lsquo;clients&amp;rsquo;) to connect to it.&lt;/p&gt;

&lt;p&gt;In this short hands-on introduction, we&amp;rsquo;ll use the same Ubuntu machine as
target as well as initiator. We can use a file as the storage behind the
target, but this post also shows how to use LVM logical volume as the backing
store for the iSCSI target.&lt;/p&gt;

&lt;p&gt;Actually, we&amp;rsquo;ll back the logical volume (LV) with a file, as shown in
&lt;a href=&#34;http://www.rushiagr.com/blog/2014/01/14/quick-start-linux-logical-volume-manager/&#34;&gt;this&lt;/a&gt;,
so essentially we&amp;rsquo;re just using &amp;lsquo;file as a backing store for targets&amp;rsquo; but in a
roundabout way :)&lt;/p&gt;

&lt;p&gt;OK, let&amp;rsquo;s get started. Make sure you execute all the following commands as root
user.&lt;/p&gt;

&lt;p&gt;First install the required dependencies&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install lvm2 tgt open-iscsi
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;initialize-logical-volume:929de0ff9dbcd4c871b27335ee5a3706&#34;&gt;Initialize logical volume&lt;/h4&gt;

&lt;p&gt;Create a file of 1GB, create a volume group over it, and then over it, create a
400MB logical volume, and see if it got created or not&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ra:~# truncate --size 1G backingfile
root@ra:~# sudo losetup --find --show backingfile 
/dev/loop0
root@ra:~# sudo vgcreate myvg /dev/loop0
  No physical volume label read from /dev/loop0
  Physical volume &amp;quot;/dev/loop0&amp;quot; successfully created
  Volume group &amp;quot;myvg&amp;quot; successfully created
root@ra:~# sudo lvcreate --size 400M --name mylv myvg
  Logical volume &amp;quot;mylv&amp;quot; created
root@ra:~# lvs
  LV   VG   Attr      LSize   Pool Origin Data%  Move Log Copy% Convert
  mylv myvg -wi-a---- 400.00m                                           
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;target-administration:929de0ff9dbcd4c871b27335ee5a3706&#34;&gt;Target administration&lt;/h4&gt;

&lt;p&gt;Now let&amp;rsquo;s create a target, with target ID 1, and give it an IQN (iSCSI
Qualified Name) &lt;code&gt;iqn.2001-04.example.com:your.first.iscsi.target&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tgtadm --lld iscsi --op new --mode target --tid 1 -T iqn.2001-04.example.com:your.first.iscsi.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the target, see it&amp;rsquo;s properties:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ra:~# tgtadm --lld iscsi --op show --mode target
Target 1: iqn.2001-04.example.com:your.first.iscsi.target
    System information:
        Driver: iscsi
        State: ready
    I_T nexus information:
    LUN information:
        LUN: 0
            Type: controller
            SCSI ID: IET     00010000
            SCSI SN: beaf10
            Size: 0 MB, Block size: 1
            Online: Yes
            Removable media: No
            Prevent removal: No
            Readonly: No
            SWP: No
            Thin-provisioning: No
            Backing store type: null
            Backing store path: None
            Backing store flags: 
    Account information:
    ACL information:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see there is a LUN, LUN 0 attached to the target. Let&amp;rsquo;s attach our
logical volume &lt;code&gt;mylv&lt;/code&gt; as LUN 1 to the target.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tgtadm --lld iscsi --op new --mode logicalunit --tid 1 --lun 1 -b /dev/myvg/mylv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, actually you could&amp;rsquo;ve attached a flat file as a LUN to the target. So you
could&amp;rsquo;ve skipped all the intermediate steps and attached the &lt;code&gt;backingfile&lt;/code&gt;
directly to the target like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tgtadm --lld iscsi --op new --mode logicalunit --tid 1 --lun 1 -b backingfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A backing file would&amp;rsquo;ve been good enough for this demo, but you know the benefits of logical volume isn&amp;rsquo;t it? :)&lt;/p&gt;

&lt;p&gt;Okay, let&amp;rsquo;s see if the LUN got created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ra:~# tgtadm --lld iscsi --op show --mode target
Target 1: iqn.2001-04.example.com:your.first.iscsi.target
    System information:
        Driver: iscsi
        State: ready
    I_T nexus information:
    LUN information:
        LUN: 0
            Type: controller
            SCSI ID: IET     00010000
            SCSI SN: beaf10
            Size: 0 MB, Block size: 1
            Online: Yes
            Removable media: No
            Prevent removal: No
            Readonly: No
            SWP: No
            Thin-provisioning: No
            Backing store type: null
            Backing store path: None
            Backing store flags: 
        LUN: 1
            Type: disk
            SCSI ID: IET     00010001
            SCSI SN: beaf11
            Size: 419 MB, Block size: 512
            Online: Yes
            Removable media: No
            Prevent removal: No
            Readonly: No
            SWP: No
            Thin-provisioning: No
            Backing store type: rdwr
            Backing store path: /dev/myvg/mylv
            Backing store flags: 
    Account information:
    ACL information:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s allow all initiators to bind to this target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tgtadm --lld iscsi --op bind --mode target --tid 1 -I ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re done with the &amp;lsquo;target&amp;rsquo; side now. You can check, using &lt;code&gt;netstat&lt;/code&gt; that port
3260, the default port, is now open. Note that all our commands so far started with
&lt;code&gt;tgtadm&lt;/code&gt;, i.e., the target administration utility.&lt;/p&gt;

&lt;h4 id=&#34;initiator-administration:929de0ff9dbcd4c871b27335ee5a3706&#34;&gt;Initiator administration&lt;/h4&gt;

&lt;p&gt;Now let&amp;rsquo;s start from the &amp;lsquo;initiator&amp;rsquo; end. We&amp;rsquo;ll behave as if we&amp;rsquo;re a client
trying to connect to the server &amp;ndash; the target.&lt;/p&gt;

&lt;p&gt;Discover all the targets on our local machine (&lt;code&gt;127.0.0.1&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ra:~# sudo iscsiadm --mode discovery --type sendtargets --portal 127.0.0.1
127.0.0.1:3260,1 iqn.2001-04.example.com:your.first.iscsi.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the client perspective, we&amp;rsquo;re now able to see a target. Let&amp;rsquo;s login into
that target&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ra:~# sudo iscsiadm --mode node --targetname iqn.2001-04.example.com:your.first.iscsi.target --portal 127.0.0.1:3260 --login
Logging in to [iface: default, target: iqn.2001-04.example.com:your.first.iscsi.target, portal: 127.0.0.1,3260] (multiple)
Login to [iface: default, target: iqn.2001-04.example.com:your.first.iscsi.target, portal: 127.0.0.1,3260] successful.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After logging in, the target will be visible in the client&amp;rsquo;s system as a new
device. Running a &lt;code&gt;fdisk -l&lt;/code&gt; shows that there is a new device &lt;code&gt;/dev/sda&lt;/code&gt; is now
present.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ra:~# fdisk -l

Disk /dev/vda: 57.1 GB, 57076908032 bytes
255 heads, 63 sectors/track, 6939 cylinders, total 111478336 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0001cd46

   Device Boot      Start         End      Blocks   Id  System
/dev/vda1   *        2048   106520575    53259264   83  Linux
/dev/vda2       106522622   111476735     2477057    5  Extended
/dev/vda5       106522624   111476735     2477056   82  Linux swap / Solaris

Disk /dev/mapper/myvg-mylv: 419 MB, 419430400 bytes
255 heads, 63 sectors/track, 50 cylinders, total 819200 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/mapper/myvg-mylv doesn&#39;t contain a valid partition table

Disk /dev/sda: 419 MB, 419430400 bytes
13 heads, 62 sectors/track, 1016 cylinders, total 819200 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/sda doesn&#39;t contain a valid partition table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we just need to format this device with a filesystem, say EXT4, and then
mount it at some location to start using it!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ra:~# sudo mkfs.ext4 /dev/sda
mke2fs 1.42.9 (4-Feb-2014)
/dev/sda is entire device, not just one partition!
Proceed anyway? (y,n) y
Filesystem label=
OS type: Linux
Block size=1024 (log=0)
Fragment size=1024 (log=0)
Stride=0 blocks, Stripe width=0 blocks
102400 inodes, 409600 blocks
20480 blocks (5.00%) reserved for the super user
First data block=1
Maximum filesystem blocks=67633152
50 block groups
8192 blocks per group, 8192 fragments per group
2048 inodes per group
Superblock backups stored on blocks: 
    8193, 24577, 40961, 57345, 73729, 204801, 221185, 401409

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information: done 

root@ra:~# mkdir tempmount
root@ra:~# mount /dev/sda tempmount/
root@ra:~# cd tempmount/
root@ra:~/tempmount# ls
lost+found
root@ra:~/tempmount# 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;destruction:929de0ff9dbcd4c871b27335ee5a3706&#34;&gt;Destruction&lt;/h4&gt;

&lt;p&gt;The simplest way to get rid of all the things you&amp;rsquo;ve created is to unmount the
device, and restart the system.&lt;/p&gt;

&lt;p&gt;Aaand done!&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>