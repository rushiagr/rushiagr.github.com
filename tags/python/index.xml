<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>rushiagr</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.rushiagr.com/tags/python/</link>
    <language>en-us</language>
    <author>Rushi Agrawal</author>
    <copyright>2016 Rushi Agrawal</copyright>
    <updated>Tue, 11 Oct 2016 17:59:46 IST</updated>
    
    
    <item>
      <title>Python Engineer Beginner Mistakes</title>
      <link>http://www.rushiagr.com/blog/2016/10/11/python-engineer-beginner-mistakes/</link>
      <pubDate>Tue, 11 Oct 2016 17:59:46 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/10/11/python-engineer-beginner-mistakes/</guid>
      <description>

&lt;p&gt;I am writing Python code since 5 years, and I have worked with around 5-6
entry-level Python programmers. There is a pattern I can see in their programming
practices. My hope is by reading this article there will be lesser such
mistakes.&lt;/p&gt;

&lt;p&gt;I have worked on OpenStack for over three years, which is written in Python
and has a very high code quality, so I feel I am qualified enough to write this
post.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with talking about these beginner-programmers first. Some of the
people I have worked with are self-taught programmers but majority of them are
junior developers working in startups in Bangalore. For self-taught Python
programmers, such mistakes are understandable &amp;ndash; Python is a pretty easy
language to pick up and code, so they don&amp;rsquo;t really have a motivation to go with
best practices right from the start. Even if they googled &amp;lsquo;Python best
programming practices&amp;rsquo;, they will find a really big list of practices without
any indication about which ones are the most important and absolutely must be
followed right from the start.  For Python beginners working in startups, I am
guessing there are not enough senior Python programmers who can teach them the
required best practices.&lt;/p&gt;

&lt;p&gt;In this article I&amp;rsquo;m going to list the bare-minimum of these simple practices
you should follow. Surprisingly, most of the &amp;lsquo;Beginner Python mistakes to
avoid&amp;rsquo; articles on the web don&amp;rsquo;t talk about the bad practices I encounter. I
think they just assume such simple things are taken care of by a programmer.
My experience tells otherwise.&lt;/p&gt;

&lt;h2 id=&#34;indentation-tabs-and-spaces:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Indentation, tabs and spaces.&lt;/h2&gt;

&lt;p&gt;Never use tabs. Only use spaces. Use 4 spaces for a tab, always.&lt;/p&gt;

&lt;p&gt;I frequently see codes which use a mix of spaces and tabs, and mix of 2-space and
4-space indentations all in one file!  If you are coming from a different
language, or if you already have a notion of, say, 8 spaces for a tab, then it
might be difficult and seem unnecessary at first. But I am guessing you are
liking the language and you look forward to writing lots and lots of Python
code in your lifespan; in such a case, just bear with me for a few weeks and
it&amp;rsquo;ll come naturally to you, trust me :)&lt;/p&gt;

&lt;h2 id=&#34;raise-specific-exceptions:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Raise specific exceptions&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t write like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    # do something here
except Exception as e:
    # handle exception
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Catching the parent &lt;code&gt;Exception&lt;/code&gt; is bad. If you know what exception the code is
going to throw, just &lt;code&gt;except&lt;/code&gt; that specific exception. The most common example I have seen
is when calling &lt;code&gt;get()&lt;/code&gt; method on a Django&amp;rsquo;s model. If the object is not
present, Django throws &lt;code&gt;ObjectDoesNotExists&lt;/code&gt; exception. Catch &lt;em&gt;this&lt;/em&gt; exception,
not Exception.&lt;/p&gt;

&lt;p&gt;Most often, you do some corrective action in the &amp;lsquo;handling exception&amp;rsquo; part. If
you are excepting (if there&amp;rsquo;s a word &amp;lsquo;excepting&amp;rsquo;) &lt;code&gt;Exception&lt;/code&gt;, then you are
heading straight into this &amp;lsquo;handling exception&amp;rsquo; section no matter what
exception occurred. If your database is down, the &amp;lsquo;DatabaseIsDown&amp;rsquo; (I made up
that name) exception
will also be caught! This might make debugging extremely hard when your app
grows big or you start getting a lot of users.&lt;/p&gt;

&lt;h2 id=&#34;trailing-whitespaces:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Trailing whitespaces&lt;/h2&gt;

&lt;p&gt;In context of Python, whitespaces means space characters. There should be no
line in Python code which has spaces at it&amp;rsquo;s end.&lt;/p&gt;

&lt;p&gt;You might think why make such a big issue of this. The problem is
version/source control. You invariably will use a source control system at some
point of time, for example &amp;lsquo;git&amp;rsquo;. When you commit trailing spaces, it becomes
difficult to read the diffs (the difference between two commits/checkins).
Also, removing or adding more spaces might feel okay if you develop a habit of
leaving around trailing spaces. But when you will start using a source control
system, this will add unnecessary noise in commits, making code review and
debugging difficult. Remember, code is read much times than is written or
modified.&lt;/p&gt;

&lt;h2 id=&#34;edge-cases-first-shallow-nesting:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Edge cases first. Shallow nesting.&lt;/h2&gt;

&lt;p&gt;Consider two pseudo codes. These are codes for handling a request, but you can
altogether ignore that fact.&lt;/p&gt;

&lt;p&gt;Pseudo code 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if request is post:
    if parameter &#39;param1&#39; is specified:
        if the user can be authenticated:
            if the user can perform this action:
                # Execute core business logic here
            else:
                return saying &#39;user cannot perform this action&#39;
    else:
        return saying &#39;parameter param1 is mandatory&#39;
else:
    return saying &#39;any other method apart from POST method is disallowed&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pseudo code 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if request is not post:
    return saying &#39;any other method apart from POST method is disallowed&#39;

if parameter &#39;param1&#39; is specified:
    return saying &#39;parameter param1 is mandatory&#39;

if the user can be authenticated:
    return saying &#39;user cannot be authenticated&#39;

if the user can perform this action:
    return saying &#39;user cannot perform this action&#39;

# Execute core business logic here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the second code is much easier to read. You will also notice
that the second code doesn&amp;rsquo;t have a lot of nesting, which avoids common
problems. Can you see that I have not written one &amp;lsquo;else&amp;rsquo; section? If the core
logic is several dozens of lines long, it becomes difficult to find out which
&lt;code&gt;else&lt;/code&gt; belongs to which &lt;code&gt;if&lt;/code&gt; if we write in &amp;lsquo;Pseudo code 1&amp;rsquo; style.&lt;/p&gt;

&lt;p&gt;I am sure while starting to write, pseudo code 1 should feel normal. But with
very minimal effort you can very soon get used to writing code in &amp;lsquo;pseudo code
2&amp;rsquo; style.&lt;/p&gt;

&lt;p&gt;The suggestions mentioned below are minor, probably opinionated ones. These might apply to
not only Python but any programming language. I feel that these points are
important enough that you should start a habit of adhering to them right from
the start. It&amp;rsquo;ll help you in the long run.&lt;/p&gt;

&lt;h2 id=&#34;make-commit-messages-lengthy:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Make commit messages lengthy&lt;/h2&gt;

&lt;p&gt;This is a fairly general trend I see. The commit messages such people generally
write are just a few words long. Most of the beginners have started using &lt;code&gt;git&lt;/code&gt;
as version control system. In git, such people have gotten used to using &lt;code&gt;git
commit -m &amp;quot;your commit message here&amp;quot;&lt;/code&gt; command. If you use this command, I am
sure you won&amp;rsquo;t even feel like writing a commit message more than what fits in
one line :). Do you know that you can just type &lt;code&gt;git commit&lt;/code&gt; and it will open
up an editor (vim or nano) to write the commit message? Start using this
and stop using &lt;code&gt;-m&lt;/code&gt; flag directly on command line. Your colleagues and your
future self will be thankful to you :).&lt;/p&gt;

&lt;p&gt;I generally prefer writing a short description in the first line of commit
message, then leave a blank line, and then write a paragraph after that to
explain in more detail if required. The first line is the most important. Try
to describe as much as possible concisely in this single line. But don&amp;rsquo;t ever
let this line go above 100 characters, preferably 80. See this commit message
as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Don&#39;t allow access to POST /v1/purchases API without authentication

It was revealed during testing that the above mentioned API is accessible
even when accessed without authentication. This is a security risk. This
commit fixes it. One &#39;if&#39; condition added to reject API call if the user is
not authenticated.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might feel that it&amp;rsquo;s a lot of effort to write such log git commit messages.
But you can realise it&amp;rsquo;ll not take more than 2 minutes to write this. Much less
than how much time you spent writing code corresponding to this commit :)&lt;/p&gt;

&lt;p&gt;Again, remember that commit messages are important part of documentation, and are
extremely important for debugging later.&lt;/p&gt;

&lt;h2 id=&#34;do-only-one-thing-in-a-commit:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Do only one thing in a commit&lt;/h2&gt;

&lt;p&gt;If you are fixing three issues, make sure you create three different commits
for each one, and never one big commit to include three bug fixes. Even if each
of these bugfixes are just a couple of lines. If you are doing a feature work,
then it&amp;rsquo;s okay to put all the feature work in one single commit, but for a
bugfixes, create a separate commit for each one. As you can see, you should get
comfortable with the idea that a commit can be as short as one line and as
large as couple of hundred of lines.  Let go of the feeling which your brain has
about number of lines in a commit, that it feels right only when there are about 50-100 lines
in a commit. :)&lt;/p&gt;

&lt;p&gt;If you are using git, take use of &lt;code&gt;git add -p&lt;/code&gt; to add specific chunks of code
in git, instead of adding a complete file into git like you&amp;rsquo;re used to, by
doing &lt;code&gt;git add file1.py&lt;/code&gt;. It&amp;rsquo;s a pretty powerful tool. Spend 15 mins to
understand it and you&amp;rsquo;ll go &amp;lsquo;why didn&amp;rsquo;t I know about this till now!&amp;rsquo;&lt;/p&gt;

&lt;p&gt;I am realizing I can actually write &amp;lsquo;Git beginner mistakes&amp;rsquo; as a separate blog
:). But anyway, continuing..&lt;/p&gt;

&lt;h2 id=&#34;spaces-after-comma-and-colon:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Spaces after comma and colon&lt;/h2&gt;

&lt;p&gt;Just make this a habit. It improves your code readability.&lt;/p&gt;

&lt;p&gt;Example 1 - bad:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_user(name=name,height=height,weight=weight):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 2 - good:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_user(name=name, height=height, weight=weight):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 3 - bad:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;request_dict={&#39;name&#39;:name,&#39;height&#39;:height}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 4 - good:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;request_dict = {&#39;name&#39;: name, &#39;height&#39;: height}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-a-lot-of-comments-and-docstrings:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Write a lot of comments and docstrings&lt;/h2&gt;

&lt;p&gt;If something is not abvious from the code, you should write a comment about
it. Also, make a habit of writing docstrings to functions/methods, even if it
is just a single line. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_user(name, height=None, weight=None):
    &#39;&#39;&#39;Create a user entry in database. Returns database object created for user.&#39;&#39;&#39;
    # Logic to create entry into db and return db object
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-todos-literally-everywhere:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Write TODOs literally everywhere&lt;/h2&gt;

&lt;p&gt;While writing code, you realize it can be improved, but you don&amp;rsquo;t want to
improve it right now as it is not that important thing at this moment. What
should you do? Just create a TODO! I find this a very good compromise for
smaller tasks, instead of creating an issue in an issue/bug tracker. TODOs can
be written for improving on docstrings (TODO(rushiagr): add more description
here), a more optimised version of code (e.g. TODO(rushiagr): can be
optimised by using list comprehensions instead of the &amp;lsquo;for&amp;rsquo; loop), or a
refactoring (TODO(rushiagr): create a common method of this thrice-duplicated
code). The parenteses specify who wrote the TODO, which can be helpful if
somebody wants to fix the TODO but doesn&amp;rsquo;t know who to contact for more
information. But you can leave this part out too.&lt;/p&gt;

&lt;p&gt;I use TODOs so much that I created a Vim abbreviation for it, so that as soon
as I type &lt;code&gt;#t&lt;/code&gt; followed by a space, it auto-completes it to &lt;code&gt;# TODO(rushiagr):
&lt;/code&gt;. If you&amp;rsquo;re using Vim, you can do by adding this line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:abbreviate #t # TODO(rushiagr):
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;parting-words:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Parting words&lt;/h3&gt;

&lt;p&gt;My architect at Reliance used to say this: &amp;lsquo;You should not be able to
tell by looking at code who wrote that code&amp;rsquo;. What he meant was, one should not
be able to introduce his/her specific style of writing code into code base. Code
should be written using a convention generally accepted by the whole of the
team. It might not completely include everything of the best-practices of that
language, but your team should decide what programming practices can&amp;rsquo;t be
compromised.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all folks! :) Do let me know what you feel about this blog by
commenting. Do you know something which you too encountered a lot which is not
present in this article?  Or you disagree with something I wrote?&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>A different approach to AWS CLI</title>
      <link>http://www.rushiagr.com/blog/2016/01/02/better-aws-command-line-interface/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/02/better-aws-command-line-interface/</guid>
      <description>

&lt;p&gt;For a user of Amazon Web Services, quickly viewing a dashboard of all resources
is not straightforward. If using a web browser, the session won&amp;rsquo;t persist for
more than a day and one will have to re-authenticate every day. If using AWS
CLI, then he/she might not remember the exact command (was it
&lt;code&gt;describe-key-pair&lt;/code&gt; or &lt;code&gt;describe-keypair&lt;/code&gt; or &lt;code&gt;describe-keypairs&lt;/code&gt;?) but even if
they do, the output is a not-so-readable JSON. For viewing virtual machines,
you might not want to see hundreds of lines of detail.
Maybe you just wanted to see the IP of the VM so that you can SSH into it. Or
maybe you just wanted to quickly create a virtual machine to test something: do
you remember all the parameters you need to specify for instance creation? And
don&amp;rsquo;t forget that you will need to specify the AMI ID of the image, even if you
know exactly the operating system name and version.&lt;/p&gt;

&lt;p&gt;There is no doubt that AWS CLI is an impressive piece of work. It allows you to
do absolutely everything with their cloud. The
documentation is thorough. It is great for automation too &amp;ndash; output is easily parse-able JSON. However, it&amp;rsquo;s not as
human-friendly. It doesn&amp;rsquo;t tell you which options are mandatory and which are
optional. It doesn&amp;rsquo;t remind you if you forget to specify keypair while creating an
instance. You end up deleting that instance, then Google-searching &amp;lsquo;aws cli delete instance&amp;rsquo;
and finally creating another instance. The CLI has some inconsistencies too &amp;ndash; creating
a keypair is &lt;code&gt;create-key-pair&lt;/code&gt; but creating a virtual machine is not
&lt;code&gt;create-instance&lt;/code&gt; but &lt;code&gt;run-instances&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To alleviate these pains, I created a simple CLI tool called &amp;ldquo;&lt;a href=&#34;http://github.com/rushiagr/cch&#34;&gt;CCH - Cloud CLI
for Humans&lt;/a&gt;&amp;rdquo;. Just typing &lt;code&gt;lsvm&lt;/code&gt; prints all
the virtual machines you have in the cluster. Each command can be run without
passing a parameter to it. If an operation requires additional parameters and
you didn&amp;rsquo;t specify it for the first time, it&amp;rsquo;ll ask you to input those
parameters. For example &lt;code&gt;mkvm&lt;/code&gt;, the command to create virtual machines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ mkvm
Available flavors: t2.micro, t2.nano, ...
Select flavor [&#39;l&#39; to list]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commands for resource creation are short and consistent (&lt;code&gt;mkvm&lt;/code&gt; creates virtual
machines, &lt;code&gt;mkkp&lt;/code&gt; creates keypairs, &lt;code&gt;mksg&lt;/code&gt; create security groups). No need to
remember AMI IDs (presently it selects Ubuntu 16.04 64-bit image by default,
but in future you might specify an OS name and OS version). All the commands
supported so far are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsvm    - List all virtual machines
mkvm    - Create a virtual machine
stpvm   - Stop a virtual machine
rmvm    - Terminate a virtual machine

lskp    - List all keypairs
mkkp    - Create keypairs
rmkp    - Delete a keypair

lssg    - List all security groups (including a detailed view)
mksg    - Create a security group (including specifying secgroup rules)
rmsg    - Delete a security group
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installation:a9c5ded79a164e4b6c02d02a570b1d97&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;I have added the tool to PyPI, so download is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install cch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;aws configure&lt;/code&gt; if you don&amp;rsquo;t have AWS credentials configured on your
system. Typically, credentials are kept in &lt;code&gt;~/.aws/credentials&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;sample-usage:a9c5ded79a164e4b6c02d02a570b1d97&#34;&gt;Sample usage&lt;/h2&gt;

&lt;p&gt;For full list of operations supported so far, see this &lt;a href=&#34;https://asciinema.org/a/ektm98481nniu7rldc1ncu5af&#34;&gt;asciinema
screencast&lt;/a&gt; I&amp;rsquo;m providing
examples here for some of the commands.&lt;/p&gt;

&lt;p&gt;See help text of a command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm -h
lsvm [-h] [-s] [&amp;lt;name&amp;gt;]
    -h      Prints helptext and exits
    -s      Prints sizes of VM disks in GB, starting with root disk
    &amp;lt;name&amp;gt;  Only prints VM whose name contains &#39;&amp;lt;name&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all virtual machines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm
    ID              Name           Status   Flavor        IP      Vols
i-abcd1234     rushi dev m/c      running  t2.micro 52.12.123.123  1
i-abcd1233   rushi pkg builder    running  t2.micro 52.12.123.122  1
i-abcd1232 rushi vanilla devstack running  t2.large 54.12.123.121  1
i-abcd1231  rushi dbaas devstack  running m4.xlarge 52.12.123.120  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also show sizes of volumes of instances:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm  -s
    ID                   Name               Status   Flavor        IP       Vols(GB)
i-abcd1234          rushi dev m/c          running  t2.micro 52.12.123.123    [8]
i-abcd1233        rushi pkg builder        running  t2.micro 52.12.123.122    [8]
i-abcd1232      rushi vanilla devstack     running  t2.large 54.12.123.121    [50]
i-abcd1231       rushi dbaas devstack      running m4.xlarge 52.12.123.120    [50]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all VMs whose name contains word &amp;lsquo;devstack&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ lsvm devstack
    ID              Name           Status   Flavor        IP      Vols
i-abcd1232 rushi vanilla devstack running  t2.large 54.12.123.121  1
i-abcd1231  rushi dbaas devstack  running m4.xlarge 52.12.123.120  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a virtual machine&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r@rushi:~$ mkvm
Only Ubuntu image supported as of now
Available flavors: [&#39;t1.micro&#39;, &#39;m1.small&#39;, ... ]
Select flavor [&#39;l&#39; to list]: t2.micro
Available key pairs: [&#39;rushi-kp-1&#39;, &#39;prod-keypair&#39;, &#39;test-keypair&#39;]
Select keypair: rushi-kp-1
Available security groups: [&#39;Rushi SecGroup&#39;, &#39;openToAll&#39;]
Select security group. None to create new one: Rushi SecGroup
Enter root volume size in GBs: 8
r@rushi:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Think this makes sense/no sense? Please write a comment below. Create a PR or issue for CCH development. I should totally think of a better name for the CLI tool :)&lt;/p&gt;

&lt;p&gt;Thank you :)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Quick JustDial scraper</title>
      <link>http://www.rushiagr.com/blog/2015/09/14/quick-justdial-scraper/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 &#43;0000</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2015/09/14/quick-justdial-scraper/</guid>
      <description>&lt;p&gt;So my friend asked me to scrape data from JustDial and give it to him in an excel sheet.
I thought let&amp;rsquo;s give it a try. He needed
name of firm, address and phone number of any JustDial URL he wants to scrape. After effectively
around 4 hours of work, the below script was created.&lt;/p&gt;

&lt;p&gt;Note that the script is dirty. You need to edit the jd_url to search any other URL. Also,
the looping will go on forever, so you have to keep checking the file size of generated
&amp;lsquo;data.csv&amp;rsquo; file, and when you&amp;rsquo;re sure it&amp;rsquo;s not increasing any more, kill the script by
pressing CTRL+C. This script works as of today. Tomorrow it might not. Also, excuse
stray comments/bad formatting of code. I&amp;rsquo;m not sure I want to clean it right now :)&lt;/p&gt;

&lt;p&gt;Feel free to use/modify it the way you want.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# PIP requirements: requests, beautifulsoup4
import requests
from bs4 import BeautifulSoup
import json
import csv

jd_url = &amp;quot;http://www.justdial.com/Bangalore/Car-Hire-%3Cnear%3E-Shanthinagar&amp;quot;

# Split http/https prefix if any
# TODO: work on URLs which dont&#39; have the CT part in URL
jd_url = jd_url.split(&#39;http://www.justdial.com/&#39;)[-1].split(&#39;https://www.justdial.com/&#39;)[-1]
city, search, cat_id = &#39;&#39;, &#39;&#39;, &#39;&#39;
split_vals = jd_url.split(&#39;/&#39;)
if len(split_vals) == 3:
    city, search, cat_id = jd_url.split(&#39;/&#39;)
    cat_id = cat_id.split(&#39;-&#39;)[-1]
elif len(split_vals) == 2:
    city, search = jd_url.split(&#39;/&#39;)
search = search.replace(&#39;-&#39;, &#39;+&#39;)


with open(&#39;data.csv&#39;, &#39;w&#39;) as f:
    #writer = csv.writer(f, delimiter=&#39;,&#39;, quoting=csv.QUOTE_ALL, lineterminator=&#39;\n&#39;)

    page = 1
    while True:
        print &#39;page&#39;, page
        resp = requests.get(&#39;http://www.justdial.com&#39;+&#39;/functions/ajxsearch.php?national_search=0&amp;amp;act=pagination&amp;amp;city={0}&amp;amp;search={1}&amp;amp;where=&amp;amp;catid={2}&amp;amp;psearch=&amp;amp;prid=&amp;amp;page={3}&#39;.format(city, search, cat_id, page))
        markup = resp.json()[&#39;markup&#39;].replace(&#39;\/&#39;, &#39;/&#39;)
        soup = BeautifulSoup(markup, &#39;html.parser&#39;)


        for thing in soup.find_all(&#39;section&#39;):
            csv_list = []
            if thing.get(&#39;class&#39;)==[u&#39;jcar&#39;]:
                # Company name
                for a_tag in thing.find_all(&#39;a&#39;):
                    if a_tag.get(&#39;onclick&#39;)==&amp;quot;_ct(&#39;clntnm&#39;, &#39;lspg&#39;);&amp;quot;:
                        csv_list.append(a_tag.get(&#39;title&#39;))

                # Address
                for span_tag in thing.find_all(&#39;span&#39;):
                    if span_tag.get(&#39;class&#39;)==[u&#39;mrehover&#39;, u&#39;dn&#39;]:
                        csv_list.append(span_tag.get_text().strip())

                # Phone number
                for a_tag in thing.find_all(&#39;a&#39;):
                    if a_tag.get(&#39;href&#39;).startswith(&#39;tel:&#39;):
                        csv_list.append(a_tag.get(&#39;href&#39;).split(&#39;:&#39;)[-1])


                csv_list = [&#39;&amp;quot;&#39;+item+&#39;&amp;quot;&#39; for item in csv_list]
                writeline = &#39;,&#39;.join(csv_list)+&#39;\n&#39;
                f.write(&#39;,&#39;.join(csv_list)+&#39;\n&#39;)
        page+=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>