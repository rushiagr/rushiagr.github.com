<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>rushiagr</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.rushiagr.com/tags/development/</link>
    <language>en-us</language>
    <author>Rushi Agrawal</author>
    <copyright>2016 Rushi Agrawal</copyright>
    <updated>Fri, 17 Jun 2016 11:18:27 IST</updated>
    
    
    <item>
      <title>You dont need Vim swap files. And how to get rid of them</title>
      <link>http://www.rushiagr.com/blog/2016/06/17/you-dont-need-vim-swap-files-and-how-to-get-rid-of-them/</link>
      <pubDate>Fri, 17 Jun 2016 11:18:27 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/06/17/you-dont-need-vim-swap-files-and-how-to-get-rid-of-them/</guid>
      <description>

&lt;p&gt;Estimated reading time: 5 minutes.&lt;/p&gt;

&lt;p&gt;Almost all IDEs today have &amp;lsquo;autosave&amp;rsquo; feature. That is, you don&amp;rsquo;t need to
explicitly save a file. The file is automatically saved as you type, so that
even if your computer crashes, you don&amp;rsquo;t lose data. This makes me wonder why
does Vim&amp;rsquo;s default behavior is of using swap files. Swap files are annoying.
I&amp;rsquo;ve seen all Vim developers, including me, struggle with swap files at one
point in their life.&lt;/p&gt;

&lt;p&gt;There is a Vim plugin for autosaving, and it has saved a lot of my time. I have
used the plugin such that every time I enter normal mode (after making edits in
Insert mode), it autosaves file. And, most importantly, I have disabled swap
file creation by Vim. It&amp;rsquo;s really that simple folks. You don&amp;rsquo;t really need swap
files 99.99% of the times.&lt;/p&gt;

&lt;h3 id=&#34;how-to-vim-autosave:c3bd95eae5779c78f8b280be1e967fb5&#34;&gt;How to Vim autosave&lt;/h3&gt;

&lt;p&gt;Download the plugin, which is present at
&lt;a href=&#34;https://github.com/907th/vim-auto-save&#34;&gt;https://github.com/907th/vim-auto-save&lt;/a&gt;, and put the plugin file in &lt;code&gt;~/.vim/plugin&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/plugin
cd ~/.vim/plugin
wget https://raw.githubusercontent.com/907th/vim-auto-save/master/plugin/AutoSave.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open the &lt;code&gt;~/.vimrc&lt;/code&gt; file and add these lines. Comments are
self-explanatory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Enable autosave plugin
let g:auto_save = 1

# Only save in Normal mode periodically. If the value is changed to &#39;1&#39;,
# then changes are saved when you are in Insert mode too, as you type, but
# I would say prefer not save in Insert mode
let g:auto_save_in_insert_mode = 0

# Silently autosave. If you disable this option by changing value to &#39;0&#39;,
# then in the vim status, it will display &amp;quot;(AutoSaved at &amp;lt;current time&amp;gt;)&amp;quot; all
# the time, which might get annoying
let g:auto_save_silent = 1

# And now turn Vim swapfile off
set noswapfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;things-to-note:c3bd95eae5779c78f8b280be1e967fb5&#34;&gt;Things to note&lt;/h3&gt;

&lt;p&gt;There are a few things to note when you switch to this &amp;lsquo;autosave, no swap
files&amp;rsquo; mode:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can&amp;rsquo;t just do a &lt;code&gt;:q!&lt;/code&gt; to exit without writing your unsaved changes.
Autosave already has saved your changes, so the only real way to discard
your changes is to undo all the changes you&amp;rsquo;ve made (&lt;code&gt;u&lt;/code&gt; key) and then exit
the file.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Earlier, you can&amp;rsquo;t modify a Vim file which is already open in another
terminal. Now too Vim will throw a warning message. The difference is how
you&amp;rsquo;re notified of it. Previously, even before opening the file Vim will say
that a swap file exists. But now, Vim will allow you to open the file, and
start editing it too. Only when you come out of Insert mode, AND you are
making a conflicting change, will it say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING: The file has been changed since reading it!!!
Do you really want to write to it (y/n)?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A conflicting change basically means you are making edits at a place where
edits are already made in another terminal where that same file is open.
For example, the file initially had &amp;lsquo;one&amp;rsquo; written on first line when it&amp;rsquo;s
opened in both terminals. In one terminal, you add a second line saying
&amp;lsquo;two&amp;rsquo;, and in another terminal when you add the second line saying &amp;lsquo;three&amp;rsquo;,
we have a conflict. This is because we are writing &amp;lsquo;three&amp;rsquo; at line number 2
where &amp;lsquo;two&amp;rsquo; is alredy written (from another terminal)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this helps. Questions, comments, suggestions, feedback? Comment :)&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Everything you need to know about Tmux copy pasting</title>
      <link>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting/</link>
      <pubDate>Thu, 16 Jun 2016 10:58:02 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting/</guid>
      <description>

&lt;p&gt;Note: It is best if you actually execute steps in this tutorial along with
reading it&lt;/p&gt;

&lt;p&gt;Estimated reading time: 30 minutes if performing a hands-on. Else 10 minutes.&lt;/p&gt;

&lt;p&gt;Note: This Guide is written by running commands on Ubuntu Trusty (14.04), which
comes with Tmux version 1.8. For later versions of Tmux, things which are
different are mentioned at appropriate places .  You can check Tmux version
with &lt;code&gt;tmux -V&lt;/code&gt; command. Please feel free to comment if you find something
missing or wrong, or know something worth adding.&lt;/p&gt;

&lt;h3 id=&#34;tmux-copy-paste-the-defaults:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux copy-paste - the defaults&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m going to explain you the tmux defaults in this section, but don&amp;rsquo;t remember
any of it! The following methods are slightly involved, so we will soon create
Tmux shortcuts for them which are easier to remember. More so, they are
Vim-like, so if you are a Vim user, you&amp;rsquo;ll need to learn even less new
stuff :)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter &amp;lsquo;copy mode&amp;rsquo;. This is the mode in which you can move the cursor
anywhere on the screen. Do this by pressing the &amp;lsquo;prefix&amp;rsquo; (&lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;), and
then pressing &lt;code&gt;[&lt;/code&gt; key. So basically press &lt;code&gt;CTRL&lt;/code&gt; and then &lt;code&gt;j&lt;/code&gt; while holding
the &lt;code&gt;CTRL&lt;/code&gt; button, then release both keys, and then press &lt;code&gt;[&lt;/code&gt; key. Such
sequence will be mentioned as &lt;code&gt;CTRL&lt;/code&gt;+&amp;lsquo;b&amp;rsquo;, &lt;code&gt;[&lt;/code&gt; from now on for other such
sequences too.&lt;/li&gt;
&lt;li&gt;Now use the arrow keys to go to the start of the text you want to copy, and
then press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;SPACE&lt;/code&gt;, or &lt;code&gt;SHIFT&lt;/code&gt;+&lt;code&gt;SPACE&lt;/code&gt;. The cursor should now change
to yellow colour, meaning it has started highlighting.&lt;/li&gt;
&lt;li&gt;Now using arrow keys, move to the point till where you want to copy, and
then press &lt;code&gt;ENTER&lt;/code&gt;. Alternatively, you can press &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;w&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now you can paste the copied text by doing &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;tmux-vim-bindings-for-copy-and-paste:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux Vim-bindings for copy and paste&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add these lines file by name ~/.tmux.conf.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind P paste-buffer
bind-key -t vi-copy &#39;v&#39; begin-selection
bind-key -t vi-copy &#39;y&#39; copy-selection
bind-key -t vi-copy &#39;r&#39; rectangle-toggle
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you can enter copy mode as described above (&lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;), and then go
to start point and press &amp;lsquo;v&amp;rsquo; to start copying. After you have selected text
you want to copy, you can just press &amp;lsquo;y&amp;rsquo; to copy the text into Tmux&amp;rsquo;s
buffer. This is exactly the commands you would use in Vim to copy text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To paste, press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;P&lt;/code&gt;. Note that it&amp;rsquo;s capital &amp;lsquo;p&amp;rsquo; (i.e.
&lt;code&gt;SHIFT&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt;). This again is similar to Vim&amp;rsquo;s shortcut &amp;lsquo;p&amp;rsquo; for paste, though
not exactly similar. You&amp;rsquo;ll realize in your Tmux journey why didn&amp;rsquo;t we use a
small &amp;lsquo;p&amp;rsquo; instead of a capital &amp;lsquo;P&amp;rsquo; ;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we move ahead, I want to tell you that Tmux&amp;rsquo;s copy buffer is independent
of system clipboard (at least on Tmux 1.8. In Tmux 2.0 this seems to be no
longer the case on El Capitan Mac. I unfortunately don&amp;rsquo;t have an Ubuntu Desktop
handy). That is, whatever you copied using &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt; command, it&amp;rsquo;ll still be
pasted when you do a &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;v&lt;/code&gt;, and the stuff you copied in Tmux using Tmux&amp;rsquo;s
way to copy stuff won&amp;rsquo;t be available by default outside of that Tmux session.
But you can change that behavior. I&amp;rsquo;ve now started to use Mac, and somehow it
just works in it, so I don&amp;rsquo;t really know how to make it work in Ubuntu any more
:(. I &amp;lsquo;guess&amp;rsquo; if you follow steps in &amp;lsquo;Copy from remote server&amp;rsquo;, you&amp;rsquo;ll get it
working. Do let me know if you are trying it!&lt;/p&gt;

&lt;h3 id=&#34;tmux-copy-with-mouse-drag:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux copy with mouse drag!&lt;/h3&gt;

&lt;p&gt;You can enable what is called as &amp;lsquo;mouse mode&amp;rsquo;. Using it, you can just select
text by dragging mouse and making a selection. For doin that, you just need to
add these lines to your &lt;code&gt;~/.tmux.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setw -g mode-mouse on
set -g mouse-select-window on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this works only with Tmux version 1.8 or earlier. For later versions
of Tmux, just add this single line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -g mouse on
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;but-now-i-can-t-do-normal-copy-paste-with-mouse:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;But now I can&amp;rsquo;t do normal copy-paste with mouse!&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll notice that now all your selections will go to tmux buffer, and not
system&amp;rsquo;s buffer (called &amp;lsquo;clipboard&amp;rsquo;). The solution is very simple &amp;ndash; just use
&lt;code&gt;SHIFT&lt;/code&gt; button (and on Macs, use &lt;code&gt;ALT&lt;/code&gt; button).&lt;/p&gt;

&lt;p&gt;This is all what you need to know if you are using only your local computer.
But if you are a developer, there is a chance you might be dealing with remote
servers over SSH, and might want to copy text in Tmux on a remote server, and
have it accessible locally. For example you might want to copy an error message
from remote server and send it over to your colleague over chat from you local
computer. There is a way to do that too!&lt;/p&gt;

&lt;h3 id=&#34;copy-from-a-remote-server:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Copy from a remote server&lt;/h3&gt;

&lt;p&gt;You will need to install &lt;code&gt;xclip&lt;/code&gt; on the remote server and local computer too.
On Ubuntu, this can be done by doing &lt;code&gt;sudo apt-get install xclip&lt;/code&gt;. Add this
line to your &lt;code&gt;~/.tmux.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind -t vi-copy y copy-pipe &amp;quot;xclip -sel clip -i&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then SSH on the remote server using -X option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -X remoteuser@remotehost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now anything you copy on that system using Tmux will come to local system&amp;rsquo;s
clipboard.&lt;/p&gt;

&lt;p&gt;Done! Don&amp;rsquo;t forget to comment if you know something worth letting everybody
know! Thank you:)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Moving from Pelican to Hugo</title>
      <link>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</link>
      <pubDate>Sun, 24 Jan 2016 21:19:26 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</guid>
      <description>&lt;p&gt;I was looking for a better theme for my blog which is based on
&lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; static site generator in Python, but then I happened to look at
&lt;a href=&#34;http://npf.io&#34;&gt;this&lt;/a&gt; blog written in Hugo - a Go counterpart of Pelican. The
thing which caught my eye was the &lt;a href=&#34;http://npf.io/blog/&#34;&gt;posts&lt;/a&gt; page, which is
exactly how I wanted my first page to be. I&amp;rsquo;ve always wanted something like
Paul Graham&amp;rsquo;s &lt;a href=&#34;http://paulgraham.com/articles.html&#34;&gt;essays&lt;/a&gt; page, but couldn&amp;rsquo;t
find anything close to it until I found this site. After some thought, I
decided to make the move. This move has no effect on my love for Python
language. It&amp;rsquo;s just laziness trumping drudgery :)&lt;/p&gt;

&lt;p&gt;The good thing about static site generators is all of them support markdown &amp;ndash;
the markup language in which my Pelican blog was written. Althought the syntax
of Hugo was different, I could scribble up a &lt;a href=&#34;https://github.com/rushiagr/public/blob/master/scripts/pelican-to-hugo.py&#34;&gt;small Python
script&lt;/a&gt;
to convert Pelican&amp;rsquo;s way of writing blog metadata to Hugo&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Since I didn&amp;rsquo;t want readers who saved my blog links as bookmarks to suffer, I
had to manually make sure that the URLs of blog posts are not changed. Hugo by
default uses the markdown file name as the URL name. Pelican by default
converts blog post title to a slug and uses that slug in the URL. This has
helped me have markdown file names in lexicographical order (first one named as
&lt;code&gt;a-my-first-blog.md&lt;/code&gt;, second one &lt;code&gt;b-sequel-of-first-article.md&lt;/code&gt;, and so
on) for chronological viewing. But now I have to either change the file names,
or write a &lt;code&gt;slug&lt;/code&gt; entry to each blog post&amp;rsquo;s metadata. I figured out the earlier one
would be less time consuming, and did just that.&lt;/p&gt;

&lt;p&gt;One problem I faced was, the site-generation script was throwing an error.
Googling and stackoverflowing told me that it&amp;rsquo;s due to Hugo version
incompatibility. When Nate Finch, the original author of
&lt;a href=&#34;http://npf.io&#34;&gt;npf.io&lt;/a&gt; generated his site, he must have used an older version
of Hugo. But I had only the latest Hugo binary, built from source. Within some
time I was able to figure out the problem and
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/712506d460dbeb7cb80757d9d4f533f75983968d&#34;&gt;fixed&lt;/a&gt; them, and then submitted
&lt;a href=&#34;https://github.com/natefinch/npf/pull/5&#34;&gt;pull request&lt;/a&gt; for the same too. Open
source for the win :)&lt;/p&gt;

&lt;p&gt;I also realized than whenever I create a new blog post using &lt;code&gt;hugo new
&amp;lt;filename&amp;gt;.md&lt;/code&gt;, it would create another entry on the left sidebar, and not as a
blog post inside the &amp;lsquo;posts&amp;rsquo; page. The workaround was easy here too: just move
the markdown file to &lt;code&gt;blog&lt;/code&gt; directory, and change a few variables as I&amp;rsquo;ve now
written in &lt;a href=&#34;https://github.com/rushiagr/npf#create-a-new-post&#34;&gt;readme&lt;/a&gt;, and
it works as expected. I should probably write a shell function to do all of
these steps in one go :)&lt;/p&gt;

&lt;p&gt;I had to ensure that I remove all files generated by Pelican, as otherwise one
blog entry was going to the older-Pelican themed page when clicked on its link.
This and a
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/384283276cd960e494f97df9de46fda2f7f58383&#34;&gt;few&lt;/a&gt;
tweaks later, I had my shiny blog ready :)&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>