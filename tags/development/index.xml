<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>rushiagr</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.rushiagr.com/tags/development/</link>
    <language>en-us</language>
    <author>Rushi Agrawal</author>
    <copyright>2016 Rushi Agrawal</copyright>
    <updated>Tue, 11 Oct 2016 17:59:46 IST</updated>
    
    
    <item>
      <title>Python Engineer Beginner Mistakes</title>
      <link>http://www.rushiagr.com/blog/2016/10/11/python-engineer-beginner-mistakes/</link>
      <pubDate>Tue, 11 Oct 2016 17:59:46 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/10/11/python-engineer-beginner-mistakes/</guid>
      <description>

&lt;p&gt;I am writing Python code since 5 years, and I have worked with around 5-6
entry-level Python programmers. There is a pattern I can see in their programming
practices. My hope is by reading this article there will be lesser such
mistakes.&lt;/p&gt;

&lt;p&gt;I have worked on OpenStack for over three years, which is written in Python
and has a very high code quality, so I feel I am qualified enough to write this
post.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with talking about these beginner-programmers first. Some of the
people I have worked with are self-taught programmers but majority of them are
junior developers working in startups in Bangalore. For self-taught Python
programmers, such mistakes are understandable &amp;ndash; Python is a pretty easy
language to pick up and code, so they don&amp;rsquo;t really have a motivation to go with
best practices right from the start. Even if they googled &amp;lsquo;Python best
programming practices&amp;rsquo;, they will find a really big list of practices without
any indication about which ones are the most important and absolutely must be
followed right from the start.  For Python beginners working in startups, I am
guessing there are not enough senior Python programmers who can teach them the
required best practices.&lt;/p&gt;

&lt;p&gt;In this article I&amp;rsquo;m going to list the bare-minimum of these simple practices
you should follow. Surprisingly, most of the &amp;lsquo;Beginner Python mistakes to
avoid&amp;rsquo; articles on the web don&amp;rsquo;t talk about the bad practices I encounter. I
think they just assume such simple things are taken care of by a programmer.
My experience tells otherwise.&lt;/p&gt;

&lt;h2 id=&#34;indentation-tabs-and-spaces:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Indentation, tabs and spaces.&lt;/h2&gt;

&lt;p&gt;Never use tabs. Only use spaces. Use 4 spaces for a tab, always.&lt;/p&gt;

&lt;p&gt;I frequently see codes which use a mix of spaces and tabs, and mix of 2-space and
4-space indentations all in one file!  If you are coming from a different
language, or if you already have a notion of, say, 8 spaces for a tab, then it
might be difficult and seem unnecessary at first. But I am guessing you are
liking the language and you look forward to writing lots and lots of Python
code in your lifespan; in such a case, just bear with me for a few weeks and
it&amp;rsquo;ll come naturally to you, trust me :)&lt;/p&gt;

&lt;h2 id=&#34;raise-specific-exceptions:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Raise specific exceptions&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t write like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    # do something here
except Exception as e:
    # handle exception
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Catching the parent &lt;code&gt;Exception&lt;/code&gt; is bad. If you know what exception the code is
going to throw, just &lt;code&gt;except&lt;/code&gt; that specific exception. The most common example I have seen
is when calling &lt;code&gt;get()&lt;/code&gt; method on a Django&amp;rsquo;s model. If the object is not
present, Django throws &lt;code&gt;ObjectDoesNotExists&lt;/code&gt; exception. Catch &lt;em&gt;this&lt;/em&gt; exception,
not Exception.&lt;/p&gt;

&lt;p&gt;Most often, you do some corrective action in the &amp;lsquo;handling exception&amp;rsquo; part. If
you are excepting (if there&amp;rsquo;s a word &amp;lsquo;excepting&amp;rsquo;) &lt;code&gt;Exception&lt;/code&gt;, then you are
heading straight into this &amp;lsquo;handling exception&amp;rsquo; section no matter what
exception occurred. If your database is down, the &amp;lsquo;DatabaseIsDown&amp;rsquo; (I made up
that name) exception
will also be caught! This might make debugging extremely hard when your app
grows big or you start getting a lot of users.&lt;/p&gt;

&lt;h2 id=&#34;trailing-whitespaces:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Trailing whitespaces&lt;/h2&gt;

&lt;p&gt;In context of Python, whitespaces means space characters. There should be no
line in Python code which has spaces at it&amp;rsquo;s end.&lt;/p&gt;

&lt;p&gt;You might think why make such a big issue of this. The problem is
version/source control. You invariably will use a source control system at some
point of time, for example &amp;lsquo;git&amp;rsquo;. When you commit trailing spaces, it becomes
difficult to read the diffs (the difference between two commits/checkins).
Also, removing or adding more spaces might feel okay if you develop a habit of
leaving around trailing spaces. But when you will start using a source control
system, this will add unnecessary noise in commits, making code review and
debugging difficult. Remember, code is read much times than is written or
modified.&lt;/p&gt;

&lt;h2 id=&#34;edge-cases-first-shallow-nesting:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Edge cases first. Shallow nesting.&lt;/h2&gt;

&lt;p&gt;Consider two pseudo codes. These are codes for handling a request, but you can
altogether ignore that fact.&lt;/p&gt;

&lt;p&gt;Pseudo code 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if request is post:
    if parameter &#39;param1&#39; is specified:
        if the user can be authenticated:
            if the user can perform this action:
                # Execute core business logic here
            else:
                return saying &#39;user cannot perform this action&#39;
    else:
        return saying &#39;parameter param1 is mandatory&#39;
else:
    return saying &#39;any other method apart from POST method is disallowed&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pseudo code 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if request is not post:
    return saying &#39;any other method apart from POST method is disallowed&#39;

if parameter &#39;param1&#39; is specified:
    return saying &#39;parameter param1 is mandatory&#39;

if the user can be authenticated:
    return saying &#39;user cannot be authenticated&#39;

if the user can perform this action:
    return saying &#39;user cannot perform this action&#39;

# Execute core business logic here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the second code is much easier to read. You will also notice
that the second code doesn&amp;rsquo;t have a lot of nesting, which avoids common
problems. Can you see that I have not written one &amp;lsquo;else&amp;rsquo; section? If the core
logic is several dozens of lines long, it becomes difficult to find out which
&lt;code&gt;else&lt;/code&gt; belongs to which &lt;code&gt;if&lt;/code&gt; if we write in &amp;lsquo;Pseudo code 1&amp;rsquo; style.&lt;/p&gt;

&lt;p&gt;I am sure while starting to write, pseudo code 1 should feel normal. But with
very minimal effort you can very soon get used to writing code in &amp;lsquo;pseudo code
2&amp;rsquo; style.&lt;/p&gt;

&lt;p&gt;The suggestions mentioned below are minor, probably opinionated ones. These might apply to
not only Python but any programming language. I feel that these points are
important enough that you should start a habit of adhering to them right from
the start. It&amp;rsquo;ll help you in the long run.&lt;/p&gt;

&lt;h2 id=&#34;make-commit-messages-lengthy:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Make commit messages lengthy&lt;/h2&gt;

&lt;p&gt;This is a fairly general trend I see. The commit messages such people generally
write are just a few words long. Most of the beginners have started using &lt;code&gt;git&lt;/code&gt;
as version control system. In git, such people have gotten used to using &lt;code&gt;git
commit -m &amp;quot;your commit message here&amp;quot;&lt;/code&gt; command. If you use this command, I am
sure you won&amp;rsquo;t even feel like writing a commit message more than what fits in
one line :). Do you know that you can just type &lt;code&gt;git commit&lt;/code&gt; and it will open
up an editor (vim or nano) to write the commit message? Start using this
and stop using &lt;code&gt;-m&lt;/code&gt; flag directly on command line. Your colleagues and your
future self will be thankful to you :).&lt;/p&gt;

&lt;p&gt;I generally prefer writing a short description in the first line of commit
message, then leave a blank line, and then write a paragraph after that to
explain in more detail if required. The first line is the most important. Try
to describe as much as possible concisely in this single line. But don&amp;rsquo;t ever
let this line go above 100 characters, preferably 80. See this commit message
as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Don&#39;t allow access to POST /v1/purchases API without authentication

It was revealed during testing that the above mentioned API is accessible
even when accessed without authentication. This is a security risk. This
commit fixes it. One &#39;if&#39; condition added to reject API call if the user is
not authenticated.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might feel that it&amp;rsquo;s a lot of effort to write such log git commit messages.
But you can realise it&amp;rsquo;ll not take more than 2 minutes to write this. Much less
than how much time you spent writing code corresponding to this commit :)&lt;/p&gt;

&lt;p&gt;Again, remember that commit messages are important part of documentation, and are
extremely important for debugging later.&lt;/p&gt;

&lt;h2 id=&#34;do-only-one-thing-in-a-commit:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Do only one thing in a commit&lt;/h2&gt;

&lt;p&gt;If you are fixing three issues, make sure you create three different commits
for each one, and never one big commit to include three bug fixes. Even if each
of these bugfixes are just a couple of lines. If you are doing a feature work,
then it&amp;rsquo;s okay to put all the feature work in one single commit, but for a
bugfixes, create a separate commit for each one. As you can see, you should get
comfortable with the idea that a commit can be as short as one line and as
large as couple of hundred of lines.  Let go of the feeling which your brain has
about number of lines in a commit, that it feels right only when there are about 50-100 lines
in a commit. :)&lt;/p&gt;

&lt;p&gt;If you are using git, take use of &lt;code&gt;git add -p&lt;/code&gt; to add specific chunks of code
in git, instead of adding a complete file into git like you&amp;rsquo;re used to, by
doing &lt;code&gt;git add file1.py&lt;/code&gt;. It&amp;rsquo;s a pretty powerful tool. Spend 15 mins to
understand it and you&amp;rsquo;ll go &amp;lsquo;why didn&amp;rsquo;t I know about this till now!&amp;rsquo;&lt;/p&gt;

&lt;p&gt;I am realizing I can actually write &amp;lsquo;Git beginner mistakes&amp;rsquo; as a separate blog
:). But anyway, continuing..&lt;/p&gt;

&lt;h2 id=&#34;spaces-after-comma-and-colon:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Spaces after comma and colon&lt;/h2&gt;

&lt;p&gt;Just make this a habit. It improves your code readability.&lt;/p&gt;

&lt;p&gt;Example 1 - bad:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_user(name=name,height=height,weight=weight):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 2 - good:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_user(name=name, height=height, weight=weight):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 3 - bad:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;request_dict={&#39;name&#39;:name,&#39;height&#39;:height}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example 4 - good:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;request_dict = {&#39;name&#39;: name, &#39;height&#39;: height}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-a-lot-of-comments-and-docstrings:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Write a lot of comments and docstrings&lt;/h2&gt;

&lt;p&gt;If something is not abvious from the code, you should write a comment about
it. Also, make a habit of writing docstrings to functions/methods, even if it
is just a single line. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create_user(name, height=None, weight=None):
    &#39;&#39;&#39;Create a user entry in database. Returns database object created for user.&#39;&#39;&#39;
    # Logic to create entry into db and return db object
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;write-todos-literally-everywhere:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Write TODOs literally everywhere&lt;/h2&gt;

&lt;p&gt;While writing code, you realize it can be improved, but you don&amp;rsquo;t want to
improve it right now as it is not that important thing at this moment. What
should you do? Just create a TODO! I find this a very good compromise for
smaller tasks, instead of creating an issue in an issue/bug tracker. TODOs can
be written for improving on docstrings (TODO(rushiagr): add more description
here), a more optimised version of code (e.g. TODO(rushiagr): can be
optimised by using list comprehensions instead of the &amp;lsquo;for&amp;rsquo; loop), or a
refactoring (TODO(rushiagr): create a common method of this thrice-duplicated
code). The parenteses specify who wrote the TODO, which can be helpful if
somebody wants to fix the TODO but doesn&amp;rsquo;t know who to contact for more
information. But you can leave this part out too.&lt;/p&gt;

&lt;p&gt;I use TODOs so much that I created a Vim abbreviation for it, so that as soon
as I type &lt;code&gt;#t&lt;/code&gt; followed by a space, it auto-completes it to &lt;code&gt;# TODO(rushiagr):
&lt;/code&gt;. If you&amp;rsquo;re using Vim, you can do by adding this line to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:abbreviate #t # TODO(rushiagr):
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;parting-words:cd4fddc7a50aaf88948c76b1bce26509&#34;&gt;Parting words&lt;/h3&gt;

&lt;p&gt;My architect at Reliance used to say this: &amp;lsquo;You should not be able to
tell by looking at code who wrote that code&amp;rsquo;. What he meant was, one should not
be able to introduce his/her specific style of writing code into code base. Code
should be written using a convention generally accepted by the whole of the
team. It might not completely include everything of the best-practices of that
language, but your team should decide what programming practices can&amp;rsquo;t be
compromised.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all folks! :) Do let me know what you feel about this blog by
commenting. Do you know something which you too encountered a lot which is not
present in this article?  Or you disagree with something I wrote?&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Kubernetes in 30 minutes with minikube on Mac</title>
      <link>http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/</link>
      <pubDate>Tue, 16 Aug 2016 17:03:53 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/</guid>
      <description>

&lt;p&gt;Below are steps to create an express setup of Kubernetes on your Mac for quick use.&lt;/p&gt;

&lt;p&gt;Minikube is a small setup by Kubernetes guys, which will spawn a virtual machine and have a tiny (but fully functional) Kubernetes cluster inside the VM. &lt;code&gt;kubectl&lt;/code&gt; (pronounced &amp;lsquo;kube (like &amp;lsquo;tube&amp;rsquo;) control`) is the command line client you&amp;rsquo;ll use to connect to the Kubernetes cluster (which runs inside the VM created by minikube, in case you forgot :) )&lt;/p&gt;

&lt;p&gt;Note that you need VirtualBox installed on your system. You can do so by first installing brew cask and then installing virtualbox as outlined in the two lines below, taken from &lt;a href=&#34;https://gist.github.com/jloveland/df1bdec4705220eb5990&#34;&gt;here&lt;/a&gt;. I installed virtualbox from a different source, but the two lines below should work without a problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
brew cask install virtualbox
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;minikube-installation:39ea2a6527702640849009dd678ae0ea&#34;&gt;Minikube Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.7.1/minikube-darwin-amd64
chmod +x minikube
sudo mv minikube /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start minikube cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;minikube start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just for information, config file will be located in &lt;code&gt;~/.kube/&lt;/code&gt; directory, and
all the virtual machine bits will be present in &lt;code&gt;~/.minikube/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Get status of minikube cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;minikube status
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-kubectl-cli:39ea2a6527702640849009dd678ae0ea&#34;&gt;Install kubectl cli&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t install &lt;code&gt;kubectl&lt;/code&gt; from brew (&lt;code&gt;brew install kubernetes-cli&lt;/code&gt;) as brew contains an older incompatible version of &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl
chmod +x kubectl
sudo mv kubectl /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all pods from all namespaces. It should list two pods, one an &amp;lsquo;addon-manager&amp;rsquo; and another a &amp;lsquo;dashboard&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get pods --all-namespaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Populate environment variables so that docker can connect to minikube VM&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval $(minikube docker-env)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now list all running docker containers inside the minikube vm. This might throw error&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it errors with output &lt;code&gt;Error response from daemon: client is newer than server (client API version: 1.24, server API version: 1.23)&lt;/code&gt;, then we need to install
an older version of docker along with the current docker server installation.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use DVM (docker version manager) for the same, and we need to install DVM
first for that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install dvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;brew update&lt;/code&gt; fails, most of the times re-running &lt;code&gt;brew update&lt;/code&gt; again fixes
the problem (else do &lt;code&gt;brew upgrade &amp;amp;&amp;amp; brew update&lt;/code&gt; and wait for an hour for it
to finish depending upon your internet connection).&lt;/p&gt;

&lt;p&gt;Now source the shell script for &lt;code&gt;dvm&lt;/code&gt; command line tool&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[ -s &amp;quot;$(brew --prefix dvm)/dvm.sh&amp;quot; ]] &amp;amp;&amp;amp; source &amp;quot;$(brew --prefix dvm)/dvm.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View current docker version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dvm ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install older docker version 1.11.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_VERSION=1.11.1
dvm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you do &lt;code&gt;dvm ls&lt;/code&gt; you&amp;rsquo;ll see that your current docker version is 1.11.1.&lt;/p&gt;

&lt;p&gt;Now you can use &lt;code&gt;docker ps&lt;/code&gt; to see all your docker containers for Kubernetes
running inside minikube.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for this blogpost. I&amp;rsquo;ll write another blog post about how to create your own pods inside this running Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;Do let me know if you have comments/suggestions/edits/criticism/feedback.&lt;/p&gt;

&lt;p&gt;Cheers!
Rushi&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Make Vagrant Synced folders on Ubuntu Xenial guest work on Mac</title>
      <link>http://www.rushiagr.com/blog/2016/07/20/vagrant-shared-folder-in-mac-xenial-guest/</link>
      <pubDate>Wed, 20 Jul 2016 23:18:24 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/07/20/vagrant-shared-folder-in-mac-xenial-guest/</guid>
      <description>&lt;p&gt;Today I installed latest Vagrant, version 1.8.5. I was waiting for a newer
release because 1.8.1 and previous versions don&amp;rsquo;t work well with host-only
networks for Ubuntu Xenial (16.04) guests on my Mac running El Capitan. But I
faced another issue now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount: unknown filesystem type &#39;vboxsf&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is while specifying a synced folder in my &lt;code&gt;Vagrantfile&lt;/code&gt; with this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.vm.synced_folder(&amp;quot;/Users/apple/src/myutils&amp;quot;, &amp;quot;/home/ubuntu/myutils&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;a href=&#34;https://github.com/rushiagr/myutils&#34;&gt;myutils&lt;/a&gt; is where I keep all my
commanline shortcuts, tricks, and other shortcut-ish stuff. I Googled but
couldn&amp;rsquo;t find an article which described a way to fix this in one go, hence
this blog post :)&lt;/p&gt;

&lt;p&gt;The actual answer is pretty simple. Just install the &amp;lsquo;vbguest&amp;rsquo; plugin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant plugin install vagrant-vbguest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course I&amp;rsquo;m assuming you&amp;rsquo;re running Vagrant with VirtualBox :)&lt;/p&gt;

&lt;p&gt;After that just shut down the VM (&lt;code&gt;vagrant halt &amp;lt;vmname&amp;gt;&lt;/code&gt;), and start it again
(&lt;code&gt;vagrant up &amp;lt;vmname&amp;gt;&lt;/code&gt;), and everything should work as expected. I noticed two
things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Vagrant tries to install guest additions inside the VM by doing some
&lt;code&gt;apt-get&lt;/code&gt; stuff. Don&amp;rsquo;t worry about it and let it finish.&lt;/li&gt;
&lt;li&gt;Note that unlike Ubuntu Trusty (14.04), my hostname on Ubuntu Xenial is
&lt;code&gt;ubuntu&lt;/code&gt; and not &lt;code&gt;vagrant&lt;/code&gt;, so change the &lt;code&gt;synced_folder&lt;/code&gt; line in your
&lt;code&gt;Vagrantfile&lt;/code&gt; accordingly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cheers!
Rushi&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>You dont need Vim swap files. And how to get rid of them</title>
      <link>http://www.rushiagr.com/blog/2016/06/17/you-dont-need-vim-swap-files-and-how-to-get-rid-of-them/</link>
      <pubDate>Fri, 17 Jun 2016 11:18:27 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/06/17/you-dont-need-vim-swap-files-and-how-to-get-rid-of-them/</guid>
      <description>

&lt;p&gt;Estimated reading time: 5 minutes.&lt;/p&gt;

&lt;p&gt;Almost all IDEs today have &amp;lsquo;autosave&amp;rsquo; feature. That is, you don&amp;rsquo;t need to
explicitly save a file. The file is automatically saved as you type, so that
even if your computer crashes, you don&amp;rsquo;t lose data. This makes me wonder why
does Vim&amp;rsquo;s default behavior is of using swap files. Swap files are annoying.
I&amp;rsquo;ve seen all Vim developers, including me, struggle with swap files at one
point in their life.&lt;/p&gt;

&lt;p&gt;There is a Vim plugin for autosaving, and it has saved a lot of my time. I have
used the plugin such that every time I enter normal mode (after making edits in
Insert mode), it autosaves file. And, most importantly, I have disabled swap
file creation by Vim. It&amp;rsquo;s really that simple folks. You don&amp;rsquo;t really need swap
files 99.99% of the times.&lt;/p&gt;

&lt;h3 id=&#34;how-to-vim-autosave:c3bd95eae5779c78f8b280be1e967fb5&#34;&gt;How to Vim autosave&lt;/h3&gt;

&lt;p&gt;Download the plugin, which is present at
&lt;a href=&#34;https://github.com/907th/vim-auto-save&#34;&gt;https://github.com/907th/vim-auto-save&lt;/a&gt;, and put the plugin file in &lt;code&gt;~/.vim/plugin&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/plugin
cd ~/.vim/plugin
wget https://raw.githubusercontent.com/907th/vim-auto-save/master/plugin/AutoSave.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open the &lt;code&gt;~/.vimrc&lt;/code&gt; file and add these lines. Comments are
self-explanatory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Enable autosave plugin
let g:auto_save = 1

# Only save in Normal mode periodically. If the value is changed to &#39;1&#39;,
# then changes are saved when you are in Insert mode too, as you type, but
# I would say prefer not save in Insert mode
let g:auto_save_in_insert_mode = 0

# Silently autosave. If you disable this option by changing value to &#39;0&#39;,
# then in the vim status, it will display &amp;quot;(AutoSaved at &amp;lt;current time&amp;gt;)&amp;quot; all
# the time, which might get annoying
let g:auto_save_silent = 1

# And now turn Vim swapfile off
set noswapfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;things-to-note:c3bd95eae5779c78f8b280be1e967fb5&#34;&gt;Things to note&lt;/h3&gt;

&lt;p&gt;There are a few things to note when you switch to this &amp;lsquo;autosave, no swap
files&amp;rsquo; mode:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can&amp;rsquo;t just do a &lt;code&gt;:q!&lt;/code&gt; to discard unsaved changes.  Autosave already has
saved your changes! So the only real way to discard your changes is to undo
all the changes you&amp;rsquo;ve made (&lt;code&gt;u&lt;/code&gt; key) and then exit the file.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Earlier, you can&amp;rsquo;t modify a Vim file which is already open in another
terminal. Now too Vim will throw a warning message. The difference is how
you&amp;rsquo;re notified of it. Previously, even before opening the file Vim will say
that a swap file exists. But now, Vim will allow you to open the file, and
start editing it too. Only when you come out of Insert mode, AND you are
making a conflicting change, will it say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING: The file has been changed since reading it!!!
Do you really want to write to it (y/n)?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A conflicting change basically means you are making edits at a place where
edits are already made in another terminal where that same file is open.
For example, the file initially had &amp;lsquo;one&amp;rsquo; written on first line when it&amp;rsquo;s
opened in both terminals. In one terminal, you add a second line saying
&amp;lsquo;two&amp;rsquo;, and in another terminal when you add the second line saying &amp;lsquo;three&amp;rsquo;,
we have a conflict. This is because we are writing &amp;lsquo;three&amp;rsquo; at line number 2
where &amp;lsquo;two&amp;rsquo; is alredy written (from another terminal)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this helps. Questions, comments, suggestions, feedback? Comment :)&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Everything you need to know about Tmux copy paste - Ubuntu</title>
      <link>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/</link>
      <pubDate>Thu, 16 Jun 2016 10:59:02 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/</guid>
      <description>

&lt;p&gt;Copying from a Tmux session is something every Tmux user struggled with once.
I&amp;rsquo;m listing out all the stuff I learnt in this blog.&lt;/p&gt;

&lt;p&gt;I tested everything on Ubuntu 14.04 Trusty Tahr, which runs Tmux version 1.8.
To check your Tmux version, run &lt;code&gt;tmux -V&lt;/code&gt;. If you have a Mac, see
&lt;a href=&#34;http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;know-about-copy-buffers:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;Know about copy buffers&lt;/h2&gt;

&lt;p&gt;When you do a &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt;, the stuff you copy is stored in your computer&amp;rsquo;s
buffer, called &amp;lsquo;clipboard&amp;rsquo; from where you can paste anywhere by doing a
&lt;code&gt;CTRL&lt;/code&gt;+&amp;lsquo;v&amp;rsquo;. Tmux has it&amp;rsquo;s own buffer for coppying, which we&amp;rsquo;ll
call &amp;lsquo;tmux buffer&amp;rsquo;. Our goal is to understand in a Tmux session how to copy to
tmux buffer, and also to clipboard.&lt;/p&gt;

&lt;p&gt;You can always copy stuff into clipboard while usin Tmux. &amp;ldquo;Why do I need a Tmux
buffer then&amp;rdquo;, you might wonder. This is because, in your shell, the text you
want to select might not fit in your current screen (e.g. output of &lt;code&gt;cat
/etc/passwd&lt;/code&gt; file). If you copy normally, you will only be able to copy text
visible on your screen, and not the output which is &amp;lsquo;scrolled up&amp;rsquo; due to a lot
of output.&lt;/p&gt;

&lt;h2 id=&#34;tmux-copy-paste-the-defaults:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;Tmux copy-paste - the defaults&lt;/h2&gt;

&lt;p&gt;The defaults are slighly involved, so this section is purely for informational purposes, and shouldn&amp;rsquo;t be memorized. Skipping this section is perfectly okay.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter &amp;lsquo;copy mode&amp;rsquo; by pressing &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the arrow keys to go to the position from where you want to start copying. Press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;SPACE&lt;/code&gt; to start copying.&lt;/li&gt;
&lt;li&gt;Use arrow keys to go to the end of text you want to copy. Press &lt;code&gt;ALT&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt; or &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;w&lt;/code&gt; to copy into Tmux buffer.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; to paste in a possibly different Tmux pane/window.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tmux-vim-bindings-for-copying-into-tmux-buffer:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;Tmux Vim-bindings for copying into tmux buffer&lt;/h2&gt;

&lt;p&gt;Adding configuration described in this section will give you easier shortcuts
for copy-pasting in Tmux. Moreover, these shortcuts work very similar to Vim&amp;rsquo;s
copy-pasting shortcuts!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add these lines in a file by name &lt;code&gt;~/.tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind P paste-buffer
bind-key -t vi-copy &#39;v&#39; begin-selection
bind-key -t vi-copy &#39;y&#39; copy-selection
bind-key -t vi-copy &#39;r&#39; rectangle-toggle
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you can enter copy mode by pressing &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;, and then go
to start point, press &amp;lsquo;v&amp;rsquo; and start copying. After you have selected text
you want to copy, you can just press &amp;lsquo;y&amp;rsquo; (or the default &amp;lsquo;enter&amp;rsquo; key) to
copy the text into Tmux&amp;rsquo;s buffer. This is exactly the commands you would use
in Vim to copy text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To paste, press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;P&lt;/code&gt;. Note that it&amp;rsquo;s capital &amp;lsquo;p&amp;rsquo; (i.e.
&lt;code&gt;SHIFT&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt;). This again is similar to Vim&amp;rsquo;s shortcut &amp;lsquo;p&amp;rsquo; for paste, though
not exactly similar. You&amp;rsquo;ll realize in your Tmux journey why didn&amp;rsquo;t we use a
small &amp;lsquo;p&amp;rsquo; instead of a capital &amp;lsquo;P&amp;rsquo; ;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;copy-from-tmux-buffer-to-system-buffer-clipboard:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;Copy from tmux buffer to system buffer (clipboard)&lt;/h2&gt;

&lt;p&gt;For this to happen, you need to install &lt;code&gt;xclip&lt;/code&gt; on your computer. Do it as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install --assume-yes xclip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, you need to add this line in &lt;code&gt;~/.tmux.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind -t vi-copy y copy-pipe &amp;quot;xclip -sel clip -i&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now close all your tmux sessions. From now onwards, whatever you copy in Tmux
buffer will also land into system clipboard.&lt;/p&gt;

&lt;h2 id=&#34;tmux-copy-with-mouse-drag:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;Tmux copy with mouse drag!&lt;/h2&gt;

&lt;p&gt;You can enable &amp;lsquo;mouse mode&amp;rsquo;, using which you can copy text into tmux buffer by
mouse drag. For doing that, you just need to add this line to your
&lt;code&gt;~/.tmux.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setw -g mode-mouse on
set -g mouse-select-window on
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;but-now-i-can-t-do-normal-copy-paste-with-mouse:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;But now I can&amp;rsquo;t do normal copy-paste with mouse!&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll notice that now all your selections will go to tmux buffer, and not
clipboard buffer. Of course, you can enable copying to system clipboard as
described in a section above. However, you can notice that you can&amp;rsquo;t double
click to select a complete word with vi&amp;rsquo;s tmux copy-pasting shortcuts + mouse
option enabled.&lt;/p&gt;

&lt;p&gt;Just press &lt;code&gt;SHIFT&lt;/code&gt; button when copying, and now you can copy as if Tmux
doesn&amp;rsquo;t exist! :)&lt;/p&gt;

&lt;h2 id=&#34;copy-from-a-remote-server:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;Copy from a remote server&lt;/h2&gt;

&lt;p&gt;Install &lt;code&gt;xclip&lt;/code&gt; on the remote Ubuntu/Linux server, and add the line mentioned
above (&lt;code&gt;bind -t vi-copy y copy-pipe &amp;quot;xclip -sel clip -i&amp;quot;&lt;/code&gt;) to &lt;code&gt;~/.tmux.conf&lt;/code&gt; on
that server. Also, pass &lt;code&gt;-X&lt;/code&gt; option when making SSH connection to the server,
like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -X remoteuser@remotehost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And after that everything you copy into remote&amp;rsquo;s Tmux buffer will get copied
over to local clipboard. Magic!&lt;/p&gt;

&lt;h2 id=&#34;other-information:f51ef0cd3e0156da5d2e4dc056647b6a&#34;&gt;Other information&lt;/h2&gt;

&lt;p&gt;Done! Don&amp;rsquo;t forget to comment if you know something worth letting everybody
know! Thank you:)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Everything you need to know about Tmux copy paste</title>
      <link>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting/</link>
      <pubDate>Thu, 16 Jun 2016 10:58:02 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting/</guid>
      <description>

&lt;p&gt;Copying from a Tmux session is something every Tmux user struggled with once.
I&amp;rsquo;m listing out all the stuff I learnt in this blog.&lt;/p&gt;

&lt;p&gt;I tested everything on Mac OS X El Capitan. For Ubuntu/Linux guide, see &lt;a href=&#34;http://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/&#34;&gt;here&lt;/a&gt;. Mac OS X El Capitan runs Tmux version 2.1. To check your Tmux version, run &lt;code&gt;tmux -V&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;know-about-your-terminal:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Know about your terminal&lt;/h2&gt;

&lt;p&gt;The default terminal which comes with Mac is pretty limiting. Instead of
listing the limitations (and workarounds around it), I&amp;rsquo;ll just say that before
you proceed, please install iTerm 2 and start using that immediately. What I&amp;rsquo;m
writing below is all for iTerm 2. (Do let me know if you absolutely need Tmux
copy-paste to work in Terminal, and I&amp;rsquo;ll provide steps for that).&lt;/p&gt;

&lt;h2 id=&#34;know-about-copy-buffers:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Know about copy buffers&lt;/h2&gt;

&lt;p&gt;When you do a &lt;code&gt;Command&lt;/code&gt;+&lt;code&gt;c&lt;/code&gt;, the stuff you copy is stored in your computer&amp;rsquo;s
buffer, called &amp;lsquo;clipboard&amp;rsquo; from where you can paste anywhere by doing a
&lt;code&gt;Command&lt;/code&gt;+&lt;code&gt;v&lt;/code&gt;. Tmux has it&amp;rsquo;s own buffer for coppying, which we&amp;rsquo;ll
call &amp;lsquo;tmux buffer&amp;rsquo;. Our goal is to understand in a Tmux session how to copy to
tmux buffer, and also to clipboard.&lt;/p&gt;

&lt;p&gt;You can always copy stuff into clipboard while usin Tmux. &amp;ldquo;Why do I need a Tmux
buffer then&amp;rdquo;, you might wonder. This is because, in your shell, the text you
want to select might not fit in your current screen (e.g. output of &lt;code&gt;cat
/etc/passwd&lt;/code&gt; file). If you copy normally, you will only be able to copy text
visible on your screen, and not the output which is &amp;lsquo;scrolled up&amp;rsquo; due to a lot
of output.&lt;/p&gt;

&lt;h2 id=&#34;tmux-copy-paste-the-defaults:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux copy-paste - the defaults&lt;/h2&gt;

&lt;p&gt;Well, the defaults in Mac are horrible. There is simply no way to copy into
tmux buffer without using any external plugin. BUT you can copy stuff into
system clipboard by just using your mouse for selecting text.&lt;/p&gt;

&lt;h2 id=&#34;tmux-vim-bindings-for-copying-into-tmux-buffer:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux Vim-bindings for copying into tmux buffer&lt;/h2&gt;

&lt;p&gt;Adding configuration described in this section will give you easier shortcuts
for copy-pasting in Tmux. Moreover, these shortcuts work very similar to Vim&amp;rsquo;s
copy-pasting shortcuts!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add these lines in a file by name &lt;code&gt;~/.tmux.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind P paste-buffer
bind-key -t vi-copy &#39;v&#39; begin-selection
bind-key -t vi-copy &#39;y&#39; copy-selection
bind-key -t vi-copy &#39;r&#39; rectangle-toggle
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now you can enter copy mode by pressing &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;, and then go
to start point, press &amp;lsquo;v&amp;rsquo; and start copying. After you have selected text
you want to copy, you can just press &amp;lsquo;y&amp;rsquo; (or the default &amp;lsquo;enter&amp;rsquo; key) to
copy the text into Tmux&amp;rsquo;s buffer. This is exactly the commands you would use
in Vim to copy text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To paste, press &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt;,&lt;code&gt;P&lt;/code&gt;. Note that it&amp;rsquo;s capital &amp;lsquo;p&amp;rsquo; (i.e.
&lt;code&gt;SHIFT&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt;). This again is similar to Vim&amp;rsquo;s shortcut &amp;lsquo;p&amp;rsquo; for paste, though
not exactly similar. You&amp;rsquo;ll realize in your Tmux journey why didn&amp;rsquo;t we use a
small &amp;lsquo;p&amp;rsquo; instead of a capital &amp;lsquo;P&amp;rsquo; ;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;copy-from-tmux-buffer-to-system-buffer-clipboard:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Copy from tmux buffer to system buffer (clipboard)&lt;/h2&gt;

&lt;p&gt;In newer iTerm2, you need to enable one option in settings to copy a text into
both tmux buffer and clipboard at the same time. Go to iTerm2 &amp;gt; Preferences &amp;gt;
&amp;ldquo;General&amp;rdquo; tab, and in the &amp;ldquo;Selection&amp;rdquo; section, check the box which says
&amp;ldquo;Applications in terminal may access clipboard&amp;rdquo; if it isn&amp;rsquo;t checked. See
&lt;a href=&#34;http://apple.stackexchange.com/a/248828&#34;&gt;here&lt;/a&gt; for a screenshot.&lt;/p&gt;

&lt;h2 id=&#34;tmux-copy-with-mouse-drag:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Tmux copy with mouse drag!&lt;/h2&gt;

&lt;p&gt;You can enable &amp;lsquo;mouse mode&amp;rsquo;, using which you can copy text into tmux buffer by
mouse drag. For doing that, you just need to add this line to your
&lt;code&gt;~/.tmux.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -g mouse on
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;but-now-i-can-t-do-normal-copy-paste-with-mouse:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;But now I can&amp;rsquo;t do normal copy-paste with mouse!&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll notice that now all your selections will go to tmux buffer, and not
clipboard buffer. Of course, you can enable copying to system clipboard as
described in a section above. However, you can notice that you can&amp;rsquo;t double
click to select a complete word with vi&amp;rsquo;s tmux copy-pasting shortcuts + mouse
option enabled.&lt;/p&gt;

&lt;p&gt;Just press &lt;code&gt;Option&lt;/code&gt; (Alt) button when copying, and now you can copy as if Tmux
doesn&amp;rsquo;t exist! :)&lt;/p&gt;

&lt;h2 id=&#34;copy-from-a-remote-server:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Copy from a remote server&lt;/h2&gt;

&lt;p&gt;Now if your remote server is a Linux machine (e.g. an Ubuntu server), then
getting that remote server&amp;rsquo;s tmux buffer copied into our local Mac&amp;rsquo;s clipboard
makes for an interesting story! If the iTerm setting to allow applications in
terminal to access clipboard is enabled, then if you are running a tmux session
on remote server, and you copy stuff there into the tmux buffer of that system,
the copied text is already into your local system&amp;rsquo;s clipboard! Amazing! BUT but
but, this only works if you are connecting to the remote machine directly from
your terminal, i.e. not from inside a local Tmux session!! If you have a local
Tmux session, and then you SSH into remote machine, connect to remote Tmux
session and then try to copy text in the &amp;lsquo;remote&amp;rsquo; Tmux session (i.e. using
&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;b&lt;/code&gt; twice to send Tmux commands to inner Tmux session), then this won&amp;rsquo;t
work! (Note that you can always copy in the &amp;lsquo;outer&amp;rsquo; Tmux session, i.e. local
Tmux session, but as stated previously, you won&amp;rsquo;t be able to copy text which is
&amp;lsquo;scrolled up&amp;rsquo; in the inner Tmux session.)&lt;/p&gt;

&lt;p&gt;Generally I&amp;rsquo;m satisfied with the limitation mentioned here. In order to get
full copying from remote session working, you will need to do something more
involved, like &lt;a href=&#34;http://superuser.com/a/408374/315134&#34;&gt;here&lt;/a&gt;. Do let me know if
you need a better explanation of that method (e.g. more details on SSH keys and
enabling remote option on Mac OS X)&lt;/p&gt;

&lt;h2 id=&#34;other-information:ecacbb25d54684d6bcfb7679736c5319&#34;&gt;Other information&lt;/h2&gt;

&lt;p&gt;Done! Don&amp;rsquo;t forget to comment if you know something worth letting everybody
know! Thank you:)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Moving from Pelican to Hugo</title>
      <link>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</link>
      <pubDate>Sun, 24 Jan 2016 21:19:26 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</guid>
      <description>&lt;p&gt;I was looking for a better theme for my blog which is based on
&lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; static site generator in Python, but then I happened to look at
&lt;a href=&#34;http://npf.io&#34;&gt;this&lt;/a&gt; blog written in Hugo - a Go counterpart of Pelican. The
thing which caught my eye was the &lt;a href=&#34;http://npf.io/blog/&#34;&gt;posts&lt;/a&gt; page, which is
exactly how I wanted my first page to be. I&amp;rsquo;ve always wanted something like
Paul Graham&amp;rsquo;s &lt;a href=&#34;http://paulgraham.com/articles.html&#34;&gt;essays&lt;/a&gt; page, but couldn&amp;rsquo;t
find anything close to it until I found this site. After some thought, I
decided to make the move. This move has no effect on my love for Python
language. It&amp;rsquo;s just laziness trumping drudgery :)&lt;/p&gt;

&lt;p&gt;The good thing about static site generators is all of them support markdown &amp;ndash;
the markup language in which my Pelican blog was written. Althought the syntax
of Hugo was different, I could scribble up a &lt;a href=&#34;https://github.com/rushiagr/public/blob/master/scripts/pelican-to-hugo.py&#34;&gt;small Python
script&lt;/a&gt;
to convert Pelican&amp;rsquo;s way of writing blog metadata to Hugo&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Since I didn&amp;rsquo;t want readers who saved my blog links as bookmarks to suffer, I
had to manually make sure that the URLs of blog posts are not changed. Hugo by
default uses the markdown file name as the URL name. Pelican by default
converts blog post title to a slug and uses that slug in the URL. This has
helped me have markdown file names in lexicographical order (first one named as
&lt;code&gt;a-my-first-blog.md&lt;/code&gt;, second one &lt;code&gt;b-sequel-of-first-article.md&lt;/code&gt;, and so
on) for chronological viewing. But now I have to either change the file names,
or write a &lt;code&gt;slug&lt;/code&gt; entry to each blog post&amp;rsquo;s metadata. I figured out the earlier one
would be less time consuming, and did just that.&lt;/p&gt;

&lt;p&gt;One problem I faced was, the site-generation script was throwing an error.
Googling and stackoverflowing told me that it&amp;rsquo;s due to Hugo version
incompatibility. When Nate Finch, the original author of
&lt;a href=&#34;http://npf.io&#34;&gt;npf.io&lt;/a&gt; generated his site, he must have used an older version
of Hugo. But I had only the latest Hugo binary, built from source. Within some
time I was able to figure out the problem and
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/712506d460dbeb7cb80757d9d4f533f75983968d&#34;&gt;fixed&lt;/a&gt; them, and then submitted
&lt;a href=&#34;https://github.com/natefinch/npf/pull/5&#34;&gt;pull request&lt;/a&gt; for the same too. Open
source for the win :)&lt;/p&gt;

&lt;p&gt;I also realized than whenever I create a new blog post using &lt;code&gt;hugo new
&amp;lt;filename&amp;gt;.md&lt;/code&gt;, it would create another entry on the left sidebar, and not as a
blog post inside the &amp;lsquo;posts&amp;rsquo; page. The workaround was easy here too: just move
the markdown file to &lt;code&gt;blog&lt;/code&gt; directory, and change a few variables as I&amp;rsquo;ve now
written in &lt;a href=&#34;https://github.com/rushiagr/npf#create-a-new-post&#34;&gt;readme&lt;/a&gt;, and
it works as expected. I should probably write a shell function to do all of
these steps in one go :)&lt;/p&gt;

&lt;p&gt;I had to ensure that I remove all files generated by Pelican, as otherwise one
blog entry was going to the older-Pelican themed page when clicked on its link.
This and a
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/384283276cd960e494f97df9de46fda2f7f58383&#34;&gt;few&lt;/a&gt;
tweaks later, I had my shiny blog ready :)&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>