<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>rushiagr</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://www.rushiagr.com/tags/golang/</link>
    <language>en-us</language>
    <author>Rushi Agrawal</author>
    <copyright>2016 Rushi Agrawal</copyright>
    <updated>Tue, 16 Aug 2016 17:03:53 IST</updated>
    
    
    <item>
      <title>Kubernetes in 30 minutes with minikube on Mac</title>
      <link>http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/</link>
      <pubDate>Tue, 16 Aug 2016 17:03:53 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/08/16/kubernetes-in-30-minutes-with-minikube-on-mac/</guid>
      <description>

&lt;p&gt;Below are steps to create an express setup of kubernetes on your Mac for quick use.&lt;/p&gt;

&lt;p&gt;Minikube is a small setup by Kubernetes guys, which will spawn a virtual machine and have a tiny (but fully functional) Kubernetes cluster inside the VM. &lt;code&gt;kubectl&lt;/code&gt; (pronounced &amp;lsquo;kube (like &amp;lsquo;tube&amp;rsquo;) control`) is the command line client you&amp;rsquo;ll use to connect to the Kubernetes cluster (which runs inside the VM created by minikube, in case you forgot :) )&lt;/p&gt;

&lt;p&gt;Note that you need VirtualBox installed on your system. You can do so by first installing brew cask and then installing virtualbox as outlined in the two lines below, taken from &lt;a href=&#34;https://gist.github.com/jloveland/df1bdec4705220eb5990&#34;&gt;here&lt;/a&gt;. I installed virtualbox from a different source, but the two lines below should work without a problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
brew cask install virtualbox
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;minikube-installation:39ea2a6527702640849009dd678ae0ea&#34;&gt;Minikube Installation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.7.1/minikube-darwin-amd64
chmod +x minikube
sudo mv minikube /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start minikube cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;minikube start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just for information, config file will be located in &lt;code&gt;~/.kube/&lt;/code&gt; directory, and
all the virtual machine bits will be present in &lt;code&gt;~/.minikube/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Get status of minikube cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;minikube status
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-kubectl-cli:39ea2a6527702640849009dd678ae0ea&#34;&gt;Install kubectl cli&lt;/h2&gt;

&lt;p&gt;Don&amp;rsquo;t install &lt;code&gt;kubectl&lt;/code&gt; from brew (&lt;code&gt;brew install kubernetes-cli&lt;/code&gt;) as brew contains an older incompatible version of &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/darwin/amd64/kubectl
chmod +x kubectl
sudo mv kubectl /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List all pods from all namespaces. It should list two pods, one an &amp;lsquo;addon-manager&amp;rsquo; and another a &amp;lsquo;dashboard&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl get pods --all-namespaces
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Populate environment variables so that docker can connect to minikube VM&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval $(minikube docker-env)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now list all running docker containers inside the minikube vm. This might throw error&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the error is &lt;code&gt;Error response from daemon: client is newer than server (client API version: 1.24, server API version: 1.23)&lt;/code&gt;, then we need to install
an older version of docker along with the current docker server installation.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use DVM (docker version manager) for the same, and we need to install DVM
first for that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update &amp;amp;&amp;amp; brew install dvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If brew update fails, most of the times re-running &lt;code&gt;brew update&lt;/code&gt; again fixes
the problem (else do &lt;code&gt;brew upgrade &amp;amp;&amp;amp; brew update&lt;/code&gt; and wait for an hour for it
to finish depending upon your internet connection).&lt;/p&gt;

&lt;p&gt;Now source the shell script for &lt;code&gt;dvm&lt;/code&gt; command line tool&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[ -s &amp;quot;$(brew --prefix dvm)/dvm.sh&amp;quot; ]] &amp;amp;&amp;amp; source &amp;quot;$(brew --prefix dvm)/dvm.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View current docker version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dvm ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install older docker version 1.11.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_VERSION=1.11.1
dvm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you do &lt;code&gt;dvm ls&lt;/code&gt; you&amp;rsquo;ll see that your current docker version is 1.11.1.&lt;/p&gt;

&lt;p&gt;Now you can use &lt;code&gt;docker ps&lt;/code&gt; to see all your docker containers for kubernetes
running inside minikube.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for this blogpost. I&amp;rsquo;ll write another blog post about how to create your own pods inside this running Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;Do let me know if you have comments/suggestions/edits/criticism/feedback.&lt;/p&gt;

&lt;p&gt;Cheers!
Rushi&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Moving from Pelican to Hugo</title>
      <link>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</link>
      <pubDate>Sun, 24 Jan 2016 21:19:26 IST</pubDate>
      <author>Rushi Agrawal</author>
      <guid>http://www.rushiagr.com/blog/2016/01/24/moving-from-pelican-to-hugo/</guid>
      <description>&lt;p&gt;I was looking for a better theme for my blog which is based on
&lt;a href=&#34;http://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; static site generator in Python, but then I happened to look at
&lt;a href=&#34;http://npf.io&#34;&gt;this&lt;/a&gt; blog written in Hugo - a Go counterpart of Pelican. The
thing which caught my eye was the &lt;a href=&#34;http://npf.io/blog/&#34;&gt;posts&lt;/a&gt; page, which is
exactly how I wanted my first page to be. I&amp;rsquo;ve always wanted something like
Paul Graham&amp;rsquo;s &lt;a href=&#34;http://paulgraham.com/articles.html&#34;&gt;essays&lt;/a&gt; page, but couldn&amp;rsquo;t
find anything close to it until I found this site. After some thought, I
decided to make the move. This move has no effect on my love for Python
language. It&amp;rsquo;s just laziness trumping drudgery :)&lt;/p&gt;

&lt;p&gt;The good thing about static site generators is all of them support markdown &amp;ndash;
the markup language in which my Pelican blog was written. Althought the syntax
of Hugo was different, I could scribble up a &lt;a href=&#34;https://github.com/rushiagr/public/blob/master/scripts/pelican-to-hugo.py&#34;&gt;small Python
script&lt;/a&gt;
to convert Pelican&amp;rsquo;s way of writing blog metadata to Hugo&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Since I didn&amp;rsquo;t want readers who saved my blog links as bookmarks to suffer, I
had to manually make sure that the URLs of blog posts are not changed. Hugo by
default uses the markdown file name as the URL name. Pelican by default
converts blog post title to a slug and uses that slug in the URL. This has
helped me have markdown file names in lexicographical order (first one named as
&lt;code&gt;a-my-first-blog.md&lt;/code&gt;, second one &lt;code&gt;b-sequel-of-first-article.md&lt;/code&gt;, and so
on) for chronological viewing. But now I have to either change the file names,
or write a &lt;code&gt;slug&lt;/code&gt; entry to each blog post&amp;rsquo;s metadata. I figured out the earlier one
would be less time consuming, and did just that.&lt;/p&gt;

&lt;p&gt;One problem I faced was, the site-generation script was throwing an error.
Googling and stackoverflowing told me that it&amp;rsquo;s due to Hugo version
incompatibility. When Nate Finch, the original author of
&lt;a href=&#34;http://npf.io&#34;&gt;npf.io&lt;/a&gt; generated his site, he must have used an older version
of Hugo. But I had only the latest Hugo binary, built from source. Within some
time I was able to figure out the problem and
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/712506d460dbeb7cb80757d9d4f533f75983968d&#34;&gt;fixed&lt;/a&gt; them, and then submitted
&lt;a href=&#34;https://github.com/natefinch/npf/pull/5&#34;&gt;pull request&lt;/a&gt; for the same too. Open
source for the win :)&lt;/p&gt;

&lt;p&gt;I also realized than whenever I create a new blog post using &lt;code&gt;hugo new
&amp;lt;filename&amp;gt;.md&lt;/code&gt;, it would create another entry on the left sidebar, and not as a
blog post inside the &amp;lsquo;posts&amp;rsquo; page. The workaround was easy here too: just move
the markdown file to &lt;code&gt;blog&lt;/code&gt; directory, and change a few variables as I&amp;rsquo;ve now
written in &lt;a href=&#34;https://github.com/rushiagr/npf#create-a-new-post&#34;&gt;readme&lt;/a&gt;, and
it works as expected. I should probably write a shell function to do all of
these steps in one go :)&lt;/p&gt;

&lt;p&gt;I had to ensure that I remove all files generated by Pelican, as otherwise one
blog entry was going to the older-Pelican themed page when clicked on its link.
This and a
&lt;a href=&#34;https://github.com/rushiagr/npf/commit/384283276cd960e494f97df9de46fda2f7f58383&#34;&gt;few&lt;/a&gt;
tweaks later, I had my shiny blog ready :)&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>